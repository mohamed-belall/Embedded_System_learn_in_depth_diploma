
Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e40  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000f70  08000f70  00010f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f88  08000f88  00010f90  2**0
                  CONTENTS
  4 .ARM          00000000  08000f88  08000f88  00010f90  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f88  08000f90  00010f90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f88  08000f88  00010f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f8c  08000f8c  00010f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000000  08000f90  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08000f90  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010f90  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001f52  00000000  00000000  00010fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000997  00000000  00000000  00012f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000d78  00000000  00000000  000138a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000230  00000000  00000000  00014620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001c8  00000000  00000000  00014850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000101a  00000000  00000000  00014a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002fe7  00000000  00000000  00015a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000aa21  00000000  00000000  00018a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002343a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006fc  00000000  00000000  0002348c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f58 	.word	0x08000f58

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f58 	.word	0x08000f58

08000170 <EXTI0_IRQHandler>:
 * ======================        ISR Function        =======================
 * =========================================================================
 * =========================================================================
 */
void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//clear by writing "1" into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1<<0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALLback
	GP_IRQ_CallBack[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3

}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	2000001c 	.word	0x2000001c

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	//clear by writing "1" into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1<<1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALLback
	GP_IRQ_CallBack[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	2000001c 	.word	0x2000001c

080001b8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	//clear by writing "1" into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1<<2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALLback
	GP_IRQ_CallBack[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3

}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	2000001c 	.word	0x2000001c

080001dc <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	//clear by writing "1" into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1<<3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALLback
	GP_IRQ_CallBack[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3

}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	2000001c 	.word	0x2000001c

08000200 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	//clear by writing "1" into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1<<4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALLback
	GP_IRQ_CallBack[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3

}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	2000001c 	.word	0x2000001c

08000224 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<5)) { EXTI->PR |= (1<<5) ;          GP_IRQ_CallBack[5](); }
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if(EXTI->PR & (1<<6)) { EXTI->PR |= (1<<6) ;          GP_IRQ_CallBack[6](); }
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if(EXTI->PR & (1<<7)) { EXTI->PR |= (1<<7) ;          GP_IRQ_CallBack[7](); }
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if(EXTI->PR & (1<<8)) { EXTI->PR |= (1<<8) ;          GP_IRQ_CallBack[8](); }
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if(EXTI->PR & (1<<9)) { EXTI->PR |= (1<<9) ;          GP_IRQ_CallBack[9](); }
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	2000001c 	.word	0x2000001c

080002cc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<10)) { EXTI->PR |= (1<<10) ;          GP_IRQ_CallBack[10](); }
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if(EXTI->PR & (1<<11)) { EXTI->PR |= (1<<11) ;          GP_IRQ_CallBack[11](); }
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if(EXTI->PR & (1<<12)) { EXTI->PR |= (1<<12) ;          GP_IRQ_CallBack[12](); }
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if(EXTI->PR & (1<<13)) { EXTI->PR |= (1<<13) ;          GP_IRQ_CallBack[13](); }
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if(EXTI->PR & (1<<14)) { EXTI->PR |= (1<<14) ;          GP_IRQ_CallBack[14](); }
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if(EXTI->PR & (1<<15)) { EXTI->PR |= (1<<15) ;          GP_IRQ_CallBack[15](); }
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3

}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	2000001c 	.word	0x2000001c

08000390 <Get_CRLH_Position>:
 */

#include "STM32F103C6_GPIO_Drivers.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003a0:	f000 80a5 	beq.w	80004ee <Get_CRLH_Position+0x15e>
 80003a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003a8:	f300 80a3 	bgt.w	80004f2 <Get_CRLH_Position+0x162>
 80003ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003b0:	f000 809b 	beq.w	80004ea <Get_CRLH_Position+0x15a>
 80003b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003b8:	f300 809b 	bgt.w	80004f2 <Get_CRLH_Position+0x162>
 80003bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003c0:	f000 8091 	beq.w	80004e6 <Get_CRLH_Position+0x156>
 80003c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003c8:	f300 8093 	bgt.w	80004f2 <Get_CRLH_Position+0x162>
 80003cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003d0:	f000 8087 	beq.w	80004e2 <Get_CRLH_Position+0x152>
 80003d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003d8:	f300 808b 	bgt.w	80004f2 <Get_CRLH_Position+0x162>
 80003dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003e0:	d07d      	beq.n	80004de <Get_CRLH_Position+0x14e>
 80003e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003e6:	f300 8084 	bgt.w	80004f2 <Get_CRLH_Position+0x162>
 80003ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003ee:	d074      	beq.n	80004da <Get_CRLH_Position+0x14a>
 80003f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003f4:	dc7d      	bgt.n	80004f2 <Get_CRLH_Position+0x162>
 80003f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003fa:	d06c      	beq.n	80004d6 <Get_CRLH_Position+0x146>
 80003fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000400:	dc77      	bgt.n	80004f2 <Get_CRLH_Position+0x162>
 8000402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000406:	d064      	beq.n	80004d2 <Get_CRLH_Position+0x142>
 8000408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800040c:	dc71      	bgt.n	80004f2 <Get_CRLH_Position+0x162>
 800040e:	2b80      	cmp	r3, #128	; 0x80
 8000410:	d05d      	beq.n	80004ce <Get_CRLH_Position+0x13e>
 8000412:	2b80      	cmp	r3, #128	; 0x80
 8000414:	dc6d      	bgt.n	80004f2 <Get_CRLH_Position+0x162>
 8000416:	2b20      	cmp	r3, #32
 8000418:	dc48      	bgt.n	80004ac <Get_CRLH_Position+0x11c>
 800041a:	2b00      	cmp	r3, #0
 800041c:	dd69      	ble.n	80004f2 <Get_CRLH_Position+0x162>
 800041e:	3b01      	subs	r3, #1
 8000420:	2b1f      	cmp	r3, #31
 8000422:	d866      	bhi.n	80004f2 <Get_CRLH_Position+0x162>
 8000424:	a201      	add	r2, pc, #4	; (adr r2, 800042c <Get_CRLH_Position+0x9c>)
 8000426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042a:	bf00      	nop
 800042c:	080004b3 	.word	0x080004b3
 8000430:	080004b7 	.word	0x080004b7
 8000434:	080004f3 	.word	0x080004f3
 8000438:	080004bb 	.word	0x080004bb
 800043c:	080004f3 	.word	0x080004f3
 8000440:	080004f3 	.word	0x080004f3
 8000444:	080004f3 	.word	0x080004f3
 8000448:	080004bf 	.word	0x080004bf
 800044c:	080004f3 	.word	0x080004f3
 8000450:	080004f3 	.word	0x080004f3
 8000454:	080004f3 	.word	0x080004f3
 8000458:	080004f3 	.word	0x080004f3
 800045c:	080004f3 	.word	0x080004f3
 8000460:	080004f3 	.word	0x080004f3
 8000464:	080004f3 	.word	0x080004f3
 8000468:	080004c3 	.word	0x080004c3
 800046c:	080004f3 	.word	0x080004f3
 8000470:	080004f3 	.word	0x080004f3
 8000474:	080004f3 	.word	0x080004f3
 8000478:	080004f3 	.word	0x080004f3
 800047c:	080004f3 	.word	0x080004f3
 8000480:	080004f3 	.word	0x080004f3
 8000484:	080004f3 	.word	0x080004f3
 8000488:	080004f3 	.word	0x080004f3
 800048c:	080004f3 	.word	0x080004f3
 8000490:	080004f3 	.word	0x080004f3
 8000494:	080004f3 	.word	0x080004f3
 8000498:	080004f3 	.word	0x080004f3
 800049c:	080004f3 	.word	0x080004f3
 80004a0:	080004f3 	.word	0x080004f3
 80004a4:	080004f3 	.word	0x080004f3
 80004a8:	080004c7 	.word	0x080004c7
 80004ac:	2b40      	cmp	r3, #64	; 0x40
 80004ae:	d00c      	beq.n	80004ca <Get_CRLH_Position+0x13a>
 80004b0:	e01f      	b.n	80004f2 <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	e01e      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 80004b6:	2304      	movs	r3, #4
 80004b8:	e01c      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 80004ba:	2308      	movs	r3, #8
 80004bc:	e01a      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 80004be:	230c      	movs	r3, #12
 80004c0:	e018      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 80004c2:	2310      	movs	r3, #16
 80004c4:	e016      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 80004c6:	2314      	movs	r3, #20
 80004c8:	e014      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 80004ca:	2318      	movs	r3, #24
 80004cc:	e012      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 80004ce:	231c      	movs	r3, #28
 80004d0:	e010      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_8:
		return 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	e00e      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 80004d6:	2304      	movs	r3, #4
 80004d8:	e00c      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 80004da:	2308      	movs	r3, #8
 80004dc:	e00a      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 80004de:	230c      	movs	r3, #12
 80004e0:	e008      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 80004e2:	2310      	movs	r3, #16
 80004e4:	e006      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 80004e6:	2314      	movs	r3, #20
 80004e8:	e004      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 80004ea:	2318      	movs	r3, #24
 80004ec:	e002      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 80004ee:	231c      	movs	r3, #28
 80004f0:	e000      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 80004f2:	2300      	movs	r3, #0
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MCAL_GPIO_Init>:
 * @Note			-STM32F103C6 MCU has GPIO A,B,C,D,E modules
 * 					 but LQFP48 package has only GPIO A,B,part of (C,D) exported as external PINS from the MCU
 * ===================================
 * */
void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx , GPIO_PinConfig_t* PinConfig)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
	// port configuration register low (GPIOx_CRL) configure pin from 0 => 7
	// port configuration register high (GPIOx_CRH) configure pin from 8 => 15
	volatile uint32_t*  configRegister = NULL;
 800050a:	2300      	movs	r3, #0
 800050c:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config =0;
 800050e:	2300      	movs	r3, #0
 8000510:	73fb      	strb	r3, [r7, #15]

	configRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL  :  &GPIOx->CRH;
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	2bff      	cmp	r3, #255	; 0xff
 8000518:	d801      	bhi.n	800051e <MCAL_GPIO_Init+0x1e>
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	e001      	b.n	8000522 <MCAL_GPIO_Init+0x22>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	3304      	adds	r3, #4
 8000522:	60bb      	str	r3, [r7, #8]

	//clear CNF0[1:0] MODE0[1:0]
	(*configRegister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff ff31 	bl	8000390 <Get_CRLH_Position>
 800052e:	4603      	mov	r3, r0
 8000530:	461a      	mov	r2, r3
 8000532:	230f      	movs	r3, #15
 8000534:	4093      	lsls	r3, r2
 8000536:	43da      	mvns	r2, r3
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	401a      	ands	r2, r3
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	601a      	str	r2, [r3, #0]

	// if pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) )
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	789b      	ldrb	r3, [r3, #2]
 8000546:	2b04      	cmp	r3, #4
 8000548:	d00b      	beq.n	8000562 <MCAL_GPIO_Init+0x62>
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	789b      	ldrb	r3, [r3, #2]
 800054e:	2b05      	cmp	r3, #5
 8000550:	d007      	beq.n	8000562 <MCAL_GPIO_Init+0x62>
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	789b      	ldrb	r3, [r3, #2]
 8000556:	2b06      	cmp	r3, #6
 8000558:	d003      	beq.n	8000562 <MCAL_GPIO_Init+0x62>
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	789b      	ldrb	r3, [r3, #2]
 800055e:	2b07      	cmp	r3, #7
 8000560:	d10e      	bne.n	8000580 <MCAL_GPIO_Init+0x80>
	{
		//SET CNF0[1:0] MODE0[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_output_speed)) & 0x0F );
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	789b      	ldrb	r3, [r3, #2]
 8000566:	3b04      	subs	r3, #4
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	b25a      	sxtb	r2, r3
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	78db      	ldrb	r3, [r3, #3]
 8000570:	b25b      	sxtb	r3, r3
 8000572:	4313      	orrs	r3, r2
 8000574:	b25b      	sxtb	r3, r3
 8000576:	b2db      	uxtb	r3, r3
 8000578:	f003 030f 	and.w	r3, r3, #15
 800057c:	73fb      	strb	r3, [r7, #15]
 800057e:	e02c      	b.n	80005da <MCAL_GPIO_Init+0xda>
	}
	// if pin is input
	else //  00: Input mode (reset state)
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	789b      	ldrb	r3, [r3, #2]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d003      	beq.n	8000590 <MCAL_GPIO_Init+0x90>
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	789b      	ldrb	r3, [r3, #2]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d107      	bne.n	80005a0 <MCAL_GPIO_Init+0xa0>
		{
			//SET CNF0[1:0] MODE0[1:0] = 00
			PIN_Config =( (((PinConfig->GPIO_MODE) << 2) | 0x0)& 0x0F);
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	789b      	ldrb	r3, [r3, #2]
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	b2db      	uxtb	r3, r3
 8000598:	f003 030f 	and.w	r3, r3, #15
 800059c:	73fb      	strb	r3, [r7, #15]
 800059e:	e01c      	b.n	80005da <MCAL_GPIO_Init+0xda>
		}else if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF)) // Consider it as input floating
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	789b      	ldrb	r3, [r3, #2]
 80005a4:	2b08      	cmp	r3, #8
 80005a6:	d102      	bne.n	80005ae <MCAL_GPIO_Init+0xae>
		{
			//SET CNF0[1:0] MODE0[1:0] = 00
			PIN_Config =( (((GPIO_MODE_INPUT_FLOATING) << 2)  | 0x0) & 0x0F);
 80005a8:	2304      	movs	r3, #4
 80005aa:	73fb      	strb	r3, [r7, #15]
 80005ac:	e015      	b.n	80005da <MCAL_GPIO_Init+0xda>
		}else // PU PD
		{
			PIN_Config =( (((GPIO_MODE_INPUT_PU) << 2) | 0x0)& 0x0F);
 80005ae:	2308      	movs	r3, #8
 80005b0:	73fb      	strb	r3, [r7, #15]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU) // pull up
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	789b      	ldrb	r3, [r3, #2]
 80005b6:	2b02      	cmp	r3, #2
 80005b8:	d107      	bne.n	80005ca <MCAL_GPIO_Init+0xca>
			{
				//Table 20. Port bit configuration table PxODR 1 => input pull up
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	683a      	ldr	r2, [r7, #0]
 80005c0:	8812      	ldrh	r2, [r2, #0]
 80005c2:	431a      	orrs	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	e007      	b.n	80005da <MCAL_GPIO_Init+0xda>
			}else // pull down
			{
				//Table 20. Port bit configuration table PxODR 0 => input pull down
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	8812      	ldrh	r2, [r2, #0]
 80005d2:	43d2      	mvns	r2, r2
 80005d4:	401a      	ands	r2, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	60da      	str	r2, [r3, #12]
			}
		}

	}
	// write on CRL OR CRH
	(*configRegister) |= (PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80005da:	7bfc      	ldrb	r4, [r7, #15]
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff fed5 	bl	8000390 <Get_CRLH_Position>
 80005e6:	4603      	mov	r3, r0
 80005e8:	fa04 f203 	lsl.w	r2, r4, r3
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	431a      	orrs	r2, r3
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	601a      	str	r2, [r3, #0]
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd90      	pop	{r4, r7, pc}
	...

08000600 <MCAL_RCC_GetSYS_ClockFreq>:




uint32_t MCAL_RCC_GetSYS_ClockFreq(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: Not applicable

	switch((RCC->CFGR >> 2) & 0b11)
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <MCAL_RCC_GetSYS_ClockFreq+0x34>)
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	089b      	lsrs	r3, r3, #2
 800060a:	f003 0303 	and.w	r3, r3, #3
 800060e:	2b02      	cmp	r3, #2
 8000610:	d00a      	beq.n	8000628 <MCAL_RCC_GetSYS_ClockFreq+0x28>
 8000612:	2b02      	cmp	r3, #2
 8000614:	d80a      	bhi.n	800062c <MCAL_RCC_GetSYS_ClockFreq+0x2c>
 8000616:	2b00      	cmp	r3, #0
 8000618:	d002      	beq.n	8000620 <MCAL_RCC_GetSYS_ClockFreq+0x20>
 800061a:	2b01      	cmp	r3, #1
 800061c:	d002      	beq.n	8000624 <MCAL_RCC_GetSYS_ClockFreq+0x24>
 800061e:	e005      	b.n	800062c <MCAL_RCC_GetSYS_ClockFreq+0x2c>
	{

	case 0:
		return HSI_RC_Clock;
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <MCAL_RCC_GetSYS_ClockFreq+0x38>)
 8000622:	e003      	b.n	800062c <MCAL_RCC_GetSYS_ClockFreq+0x2c>
		break;

	case 1:
		// TODO: need to calculate it //HSE user should specify it
		return HSE_Clock;
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <MCAL_RCC_GetSYS_ClockFreq+0x3c>)
 8000626:	e001      	b.n	800062c <MCAL_RCC_GetSYS_ClockFreq+0x2c>
		break;

	case 2:
		// TODO: need to calculate it //PLLCLK & PLLMUL & PLL SOURCE MUX
		return 16000000;
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <MCAL_RCC_GetSYS_ClockFreq+0x3c>)
 800062a:	e7ff      	b.n	800062c <MCAL_RCC_GetSYS_ClockFreq+0x2c>
		break;
	}

}
 800062c:	4618      	mov	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	40021000 	.word	0x40021000
 8000638:	007a1200 	.word	0x007a1200
 800063c:	00f42400 	.word	0x00f42400

08000640 <MCAL_RCC_GetHCLKFreq>:


//Bits 7:4 HPRE[3:0]: AHB prescaler
uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetSYS_ClockFreq() >> AHBPrescTable[((RCC->CFGR >> 4) & 0b1111)]); // the first shift is multiplication
 8000644:	f7ff ffdc 	bl	8000600 <MCAL_RCC_GetSYS_ClockFreq>
 8000648:	4602      	mov	r2, r0
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <MCAL_RCC_GetHCLKFreq+0x20>)
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	091b      	lsrs	r3, r3, #4
 8000650:	f003 030f 	and.w	r3, r3, #15
 8000654:	4903      	ldr	r1, [pc, #12]	; (8000664 <MCAL_RCC_GetHCLKFreq+0x24>)
 8000656:	5ccb      	ldrb	r3, [r1, r3]
 8000658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800065c:	4618      	mov	r0, r3
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40021000 	.word	0x40021000
 8000664:	08000f78 	.word	0x08000f78

08000668 <MCAL_RCC_GetPCLK1Freq>:


//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	/* ============== GET HCLK source and compute PCLK1 Frequency ============== */
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[((RCC->CFGR >> 8) & 0b111)]); // the first shift is multiplication
 800066c:	f7ff ffe8 	bl	8000640 <MCAL_RCC_GetHCLKFreq>
 8000670:	4602      	mov	r2, r0
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	0a1b      	lsrs	r3, r3, #8
 8000678:	f003 0307 	and.w	r3, r3, #7
 800067c:	4903      	ldr	r1, [pc, #12]	; (800068c <MCAL_RCC_GetPCLK1Freq+0x24>)
 800067e:	5ccb      	ldrb	r3, [r1, r3]
 8000680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000684:	4618      	mov	r0, r3
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000
 800068c:	08000f70 	.word	0x08000f70

08000690 <MCAL_RCC_GetPCLK2Freq>:

//Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	/* ============== GET HCLK source and compute PCLK2 Frequency ============== */
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[((RCC->CFGR >> 11) & 0b111)]); // the first shift is multiplication
 8000694:	f7ff ffd4 	bl	8000640 <MCAL_RCC_GetHCLKFreq>
 8000698:	4602      	mov	r2, r0
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <MCAL_RCC_GetPCLK2Freq+0x20>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	0adb      	lsrs	r3, r3, #11
 80006a0:	f003 0307 	and.w	r3, r3, #7
 80006a4:	4903      	ldr	r1, [pc, #12]	; (80006b4 <MCAL_RCC_GetPCLK2Freq+0x24>)
 80006a6:	5ccb      	ldrb	r3, [r1, r3]
 80006a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000
 80006b4:	08000f70 	.word	0x08000f70

080006b8 <MCAL_SPI_Init>:
 * @Note			- support for SPI full Duplex master/slave only & NSS HW/SW
 * 					- in case of master you have to configure pin and drive it
 * ===================================
 * */
void MCAL_SPI_Init(SPI_TypeDef * SPIx , SPI_Config_t * SPI_config )
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
	/* ------------- safety for register ------------- */
	uint16_t tempRegister_CR1 = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	81fb      	strh	r3, [r7, #14]
	uint16_t tempRegister_CR2 = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	81bb      	strh	r3, [r7, #12]


	if(SPIx == SPI1)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a3b      	ldr	r2, [pc, #236]	; (80007bc <MCAL_SPI_Init+0x104>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d109      	bne.n	80006e6 <MCAL_SPI_Init+0x2e>
	{
		Global_SPI_Config[SPI1_Index] = SPI_config;
 80006d2:	4a3b      	ldr	r2, [pc, #236]	; (80007c0 <MCAL_SPI_Init+0x108>)
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	6013      	str	r3, [r2, #0]
		RCC_SPI1_CLK_EN();
 80006d8:	4b3a      	ldr	r3, [pc, #232]	; (80007c4 <MCAL_SPI_Init+0x10c>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a39      	ldr	r2, [pc, #228]	; (80007c4 <MCAL_SPI_Init+0x10c>)
 80006de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	e00c      	b.n	8000700 <MCAL_SPI_Init+0x48>
	}else if(SPIx == SPI2)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4a37      	ldr	r2, [pc, #220]	; (80007c8 <MCAL_SPI_Init+0x110>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d108      	bne.n	8000700 <MCAL_SPI_Init+0x48>
	{
		Global_SPI_Config[SPI2_Index] = SPI_config;
 80006ee:	4a34      	ldr	r2, [pc, #208]	; (80007c0 <MCAL_SPI_Init+0x108>)
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	6053      	str	r3, [r2, #4]
		RCC_SPI2_CLK_EN();
 80006f4:	4b33      	ldr	r3, [pc, #204]	; (80007c4 <MCAL_SPI_Init+0x10c>)
 80006f6:	69db      	ldr	r3, [r3, #28]
 80006f8:	4a32      	ldr	r2, [pc, #200]	; (80007c4 <MCAL_SPI_Init+0x10c>)
 80006fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fe:	61d3      	str	r3, [r2, #28]
	}

	/* ------------- enable SPI CR1.SPE BIT6 W1 to enable ------------- */
	tempRegister_CR1 = (0x1U<<6);
 8000700:	2340      	movs	r3, #64	; 0x40
 8000702:	81fb      	strh	r3, [r7, #14]


	/* --------------------- master | slave --------------------------- */
	tempRegister_CR1 |= SPI_config->Device_Mode;
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	881a      	ldrh	r2, [r3, #0]
 8000708:	89fb      	ldrh	r3, [r7, #14]
 800070a:	4313      	orrs	r3, r2
 800070c:	81fb      	strh	r3, [r7, #14]


	/* -------------------- SPI_Communication_Mode -------------------- */
	tempRegister_CR1 |= SPI_config->Communication_Mode;
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	885a      	ldrh	r2, [r3, #2]
 8000712:	89fb      	ldrh	r3, [r7, #14]
 8000714:	4313      	orrs	r3, r2
 8000716:	81fb      	strh	r3, [r7, #14]


	/* -------------------- SPI_Frame_Format ------------------------- */
	tempRegister_CR1 |= SPI_config->Frame_Format;
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	889a      	ldrh	r2, [r3, #4]
 800071c:	89fb      	ldrh	r3, [r7, #14]
 800071e:	4313      	orrs	r3, r2
 8000720:	81fb      	strh	r3, [r7, #14]


	/* -------------------- SPI_DataSize ----------------------------- */
	tempRegister_CR1 |= SPI_config->DataSize;
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	88da      	ldrh	r2, [r3, #6]
 8000726:	89fb      	ldrh	r3, [r7, #14]
 8000728:	4313      	orrs	r3, r2
 800072a:	81fb      	strh	r3, [r7, #14]


	/* -------------------- SPI_CLKPolarity ------------------------- */
	tempRegister_CR1 |= SPI_config->CLKPolarity;
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	891a      	ldrh	r2, [r3, #8]
 8000730:	89fb      	ldrh	r3, [r7, #14]
 8000732:	4313      	orrs	r3, r2
 8000734:	81fb      	strh	r3, [r7, #14]


	/* -------------------- SPI_CLKPhase ---------------------------- */
	tempRegister_CR1 |= SPI_config->CLKPhase;
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	895a      	ldrh	r2, [r3, #10]
 800073a:	89fb      	ldrh	r3, [r7, #14]
 800073c:	4313      	orrs	r3, r2
 800073e:	81fb      	strh	r3, [r7, #14]


	/* --------------------- SPI_NSS ------------------------------- */
	if(SPI_config->NSS == SPI_NSS_HW_Master_SS_Output_Enable)
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	899b      	ldrh	r3, [r3, #12]
 8000744:	2b04      	cmp	r3, #4
 8000746:	d105      	bne.n	8000754 <MCAL_SPI_Init+0x9c>
	{
		tempRegister_CR2 |= SPI_config->NSS;
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	899a      	ldrh	r2, [r3, #12]
 800074c:	89bb      	ldrh	r3, [r7, #12]
 800074e:	4313      	orrs	r3, r2
 8000750:	81bb      	strh	r3, [r7, #12]
 8000752:	e004      	b.n	800075e <MCAL_SPI_Init+0xa6>
	}else if(SPI_config->NSS == SPI_NSS_HW_Master_SS_Output_Disable)
	{
		tempRegister_CR2 &= SPI_config->NSS;
	}else
	{
		tempRegister_CR1 |= SPI_config->NSS;
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	899a      	ldrh	r2, [r3, #12]
 8000758:	89fb      	ldrh	r3, [r7, #14]
 800075a:	4313      	orrs	r3, r2
 800075c:	81fb      	strh	r3, [r7, #14]
	}


	/* --------------------- SPI_SPI_BaudRate --------------------- */
	tempRegister_CR1 |= SPI_config->SPI_BaudRate;
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	89da      	ldrh	r2, [r3, #14]
 8000762:	89fb      	ldrh	r3, [r7, #14]
 8000764:	4313      	orrs	r3, r2
 8000766:	81fb      	strh	r3, [r7, #14]


	/* --------------------- SPI_IRQ_Enable ----------------------- */
	if(SPI_config->IRQ_Enable != SPI_IRQ_Enable_NONE)
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	8a1b      	ldrh	r3, [r3, #16]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d019      	beq.n	80007a4 <MCAL_SPI_Init+0xec>
	{
		tempRegister_CR2 |= SPI_config->IRQ_Enable;
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	8a1a      	ldrh	r2, [r3, #16]
 8000774:	89bb      	ldrh	r3, [r7, #12]
 8000776:	4313      	orrs	r3, r2
 8000778:	81bb      	strh	r3, [r7, #12]
		if(SPIx == SPI1)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <MCAL_SPI_Init+0x104>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d106      	bne.n	8000790 <MCAL_SPI_Init+0xd8>
		{
			NVIC_IRQ35_SPI1_Enable;
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MCAL_SPI_Init+0x114>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a11      	ldr	r2, [pc, #68]	; (80007cc <MCAL_SPI_Init+0x114>)
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	6013      	str	r3, [r2, #0]
 800078e:	e009      	b.n	80007a4 <MCAL_SPI_Init+0xec>
		}else if(SPIx == SPI2)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4a0d      	ldr	r2, [pc, #52]	; (80007c8 <MCAL_SPI_Init+0x110>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d105      	bne.n	80007a4 <MCAL_SPI_Init+0xec>
		{
			NVIC_IRQ36_SPI2_Enable;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MCAL_SPI_Init+0x114>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <MCAL_SPI_Init+0x114>)
 800079e:	f043 0310 	orr.w	r3, r3, #16
 80007a2:	6013      	str	r3, [r2, #0]
		}
	}



	SPIx->SPI_CR1 = tempRegister_CR1;
 80007a4:	89fa      	ldrh	r2, [r7, #14]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	601a      	str	r2, [r3, #0]
	SPIx->SPI_CR2 = tempRegister_CR2;
 80007aa:	89ba      	ldrh	r2, [r7, #12]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	605a      	str	r2, [r3, #4]
}
 80007b0:	bf00      	nop
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40013000 	.word	0x40013000
 80007c0:	20000058 	.word	0x20000058
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40003800 	.word	0x40003800
 80007cc:	e000e104 	.word	0xe000e104

080007d0 <MCAL_SPI_GPIO_Set_Pins>:
 * @Note			- support for SPI full Duplex master/slave only & NSS HW/SW
 * 					- in case of master you have to configure pin and drive it
 * ===================================
 * */
void MCAL_SPI_GPIO_Set_Pins(SPI_TypeDef * SPIx )
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t pinCfg ;
	if(SPIx == SPI1)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4a73      	ldr	r2, [pc, #460]	; (80009a8 <MCAL_SPI_GPIO_Set_Pins+0x1d8>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d169      	bne.n	80008b4 <MCAL_SPI_GPIO_Set_Pins+0xe4>
		 * PA6  ====> SPI1_MISO
		 * PA7  ====> SPI1_MOSI
		 */
		// 9.1.11 GPIO configurations for device peripherals
		// Table 25. SPI
		if(Global_SPI_Config[SPI1_Index]->Device_Mode == Device_Mode_Master)
 80007e0:	4b72      	ldr	r3, [pc, #456]	; (80009ac <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	d134      	bne.n	8000854 <MCAL_SPI_GPIO_Set_Pins+0x84>
		{
			// PA4  ====> SPI1_NSS
			switch(Global_SPI_Config[SPI1_Index]->NSS)
 80007ea:	4b70      	ldr	r3, [pc, #448]	; (80009ac <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	899b      	ldrh	r3, [r3, #12]
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	d10c      	bne.n	800080e <MCAL_SPI_GPIO_Set_Pins+0x3e>
				pinCfg.GPIO_MODE =GPIO_MODE_INPUT_FLOATING;
				MCAL_GPIO_Init(GPIOA, &pinCfg);
				break;
			case SPI_NSS_HW_Master_SS_Output_Enable:
				//Hardware master/ NSS output enabled Alternate function push-pull
				pinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80007f4:	2310      	movs	r3, #16
 80007f6:	81bb      	strh	r3, [r7, #12]
				pinCfg.GPIO_MODE =GPIO_MODE_OUTPUT_AF_PP;
 80007f8:	2306      	movs	r3, #6
 80007fa:	73bb      	strb	r3, [r7, #14]
				pinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 80007fc:	2301      	movs	r3, #1
 80007fe:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &pinCfg);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4619      	mov	r1, r3
 8000806:	486a      	ldr	r0, [pc, #424]	; (80009b0 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000808:	f7ff fe7a 	bl	8000500 <MCAL_GPIO_Init>
				break;
 800080c:	bf00      	nop
			}


			// PA5  ====> SPI1_SCK
			// Master Alternate function push-pull
			pinCfg.GPIO_PinNumber = GPIO_PIN_5;
 800080e:	2320      	movs	r3, #32
 8000810:	81bb      	strh	r3, [r7, #12]
			pinCfg.GPIO_MODE =GPIO_MODE_OUTPUT_AF_PP;
 8000812:	2306      	movs	r3, #6
 8000814:	73bb      	strb	r3, [r7, #14]
			pinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 8000816:	2301      	movs	r3, #1
 8000818:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &pinCfg);
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	4619      	mov	r1, r3
 8000820:	4863      	ldr	r0, [pc, #396]	; (80009b0 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000822:	f7ff fe6d 	bl	8000500 <MCAL_GPIO_Init>


			//PA6  ====> SPI1_MISO
			// Full duplex / master Input floating / Input pull-up
			pinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000826:	2340      	movs	r3, #64	; 0x40
 8000828:	81bb      	strh	r3, [r7, #12]
			pinCfg.GPIO_MODE =GPIO_MODE_INPUT_FLOATING;
 800082a:	2301      	movs	r3, #1
 800082c:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &pinCfg);
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	4619      	mov	r1, r3
 8000834:	485e      	ldr	r0, [pc, #376]	; (80009b0 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000836:	f7ff fe63 	bl	8000500 <MCAL_GPIO_Init>


			// PA7  ====> SPI1_MOSI
			// Full duplex / master Alternate function push-pull
			pinCfg.GPIO_PinNumber = GPIO_PIN_7;
 800083a:	2380      	movs	r3, #128	; 0x80
 800083c:	81bb      	strh	r3, [r7, #12]
			pinCfg.GPIO_MODE =GPIO_MODE_OUTPUT_AF_PP;
 800083e:	2306      	movs	r3, #6
 8000840:	73bb      	strb	r3, [r7, #14]
			pinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 8000842:	2301      	movs	r3, #1
 8000844:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &pinCfg);
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4619      	mov	r1, r3
 800084c:	4858      	ldr	r0, [pc, #352]	; (80009b0 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800084e:	f7ff fe57 	bl	8000500 <MCAL_GPIO_Init>
			pinCfg.GPIO_MODE =GPIO_MODE_INPUT_FLOATING;
			MCAL_GPIO_Init(GPIOA, &pinCfg);
		}
	}

}
 8000852:	e0a4      	b.n	800099e <MCAL_SPI_GPIO_Set_Pins+0x1ce>
			if(Global_SPI_Config[SPI1_Index]->NSS == SPI_NSS_HW_Slave)
 8000854:	4b55      	ldr	r3, [pc, #340]	; (80009ac <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	899b      	ldrh	r3, [r3, #12]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d109      	bne.n	8000872 <MCAL_SPI_GPIO_Set_Pins+0xa2>
				pinCfg.GPIO_PinNumber = GPIO_PIN_4;
 800085e:	2310      	movs	r3, #16
 8000860:	81bb      	strh	r3, [r7, #12]
				pinCfg.GPIO_MODE =GPIO_MODE_INPUT_FLOATING;
 8000862:	2301      	movs	r3, #1
 8000864:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &pinCfg);
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	4619      	mov	r1, r3
 800086c:	4850      	ldr	r0, [pc, #320]	; (80009b0 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800086e:	f7ff fe47 	bl	8000500 <MCAL_GPIO_Init>
			pinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000872:	2320      	movs	r3, #32
 8000874:	81bb      	strh	r3, [r7, #12]
			pinCfg.GPIO_MODE =GPIO_MODE_INPUT_FLOATING;
 8000876:	2301      	movs	r3, #1
 8000878:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &pinCfg);
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	4619      	mov	r1, r3
 8000880:	484b      	ldr	r0, [pc, #300]	; (80009b0 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000882:	f7ff fe3d 	bl	8000500 <MCAL_GPIO_Init>
			pinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000886:	2340      	movs	r3, #64	; 0x40
 8000888:	81bb      	strh	r3, [r7, #12]
			pinCfg.GPIO_MODE =GPIO_MODE_OUTPUT_AF_PP;
 800088a:	2306      	movs	r3, #6
 800088c:	73bb      	strb	r3, [r7, #14]
			pinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 800088e:	2301      	movs	r3, #1
 8000890:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &pinCfg);
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	4619      	mov	r1, r3
 8000898:	4845      	ldr	r0, [pc, #276]	; (80009b0 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800089a:	f7ff fe31 	bl	8000500 <MCAL_GPIO_Init>
			pinCfg.GPIO_PinNumber = GPIO_PIN_7;
 800089e:	2380      	movs	r3, #128	; 0x80
 80008a0:	81bb      	strh	r3, [r7, #12]
			pinCfg.GPIO_MODE =GPIO_MODE_INPUT_FLOATING;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &pinCfg);
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	4619      	mov	r1, r3
 80008ac:	4840      	ldr	r0, [pc, #256]	; (80009b0 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80008ae:	f7ff fe27 	bl	8000500 <MCAL_GPIO_Init>
}
 80008b2:	e074      	b.n	800099e <MCAL_SPI_GPIO_Set_Pins+0x1ce>
	}else if(SPIx == SPI2)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a3f      	ldr	r2, [pc, #252]	; (80009b4 <MCAL_SPI_GPIO_Set_Pins+0x1e4>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d170      	bne.n	800099e <MCAL_SPI_GPIO_Set_Pins+0x1ce>
		if(Global_SPI_Config[SPI2_Index]->Device_Mode == Device_Mode_Master)
 80008bc:	4b3b      	ldr	r3, [pc, #236]	; (80009ac <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	881b      	ldrh	r3, [r3, #0]
 80008c2:	2b04      	cmp	r3, #4
 80008c4:	d138      	bne.n	8000938 <MCAL_SPI_GPIO_Set_Pins+0x168>
			switch(Global_SPI_Config[SPI2_Index]->NSS)
 80008c6:	4b39      	ldr	r3, [pc, #228]	; (80009ac <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	899b      	ldrh	r3, [r3, #12]
 80008cc:	2b04      	cmp	r3, #4
 80008ce:	d10d      	bne.n	80008ec <MCAL_SPI_GPIO_Set_Pins+0x11c>
				pinCfg.GPIO_PinNumber = GPIO_PIN_12;
 80008d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d4:	81bb      	strh	r3, [r7, #12]
				pinCfg.GPIO_MODE =GPIO_MODE_OUTPUT_AF_PP;
 80008d6:	2306      	movs	r3, #6
 80008d8:	73bb      	strb	r3, [r7, #14]
				pinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 80008da:	2301      	movs	r3, #1
 80008dc:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &pinCfg);
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	4619      	mov	r1, r3
 80008e4:	4832      	ldr	r0, [pc, #200]	; (80009b0 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80008e6:	f7ff fe0b 	bl	8000500 <MCAL_GPIO_Init>
				break;
 80008ea:	bf00      	nop
			pinCfg.GPIO_PinNumber = GPIO_PIN_13;
 80008ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f0:	81bb      	strh	r3, [r7, #12]
			pinCfg.GPIO_MODE =GPIO_MODE_OUTPUT_AF_PP;
 80008f2:	2306      	movs	r3, #6
 80008f4:	73bb      	strb	r3, [r7, #14]
			pinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 80008f6:	2301      	movs	r3, #1
 80008f8:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &pinCfg);
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	4619      	mov	r1, r3
 8000900:	482b      	ldr	r0, [pc, #172]	; (80009b0 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000902:	f7ff fdfd 	bl	8000500 <MCAL_GPIO_Init>
			pinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8000906:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800090a:	81bb      	strh	r3, [r7, #12]
			pinCfg.GPIO_MODE =GPIO_MODE_INPUT_FLOATING;
 800090c:	2301      	movs	r3, #1
 800090e:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &pinCfg);
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	4619      	mov	r1, r3
 8000916:	4826      	ldr	r0, [pc, #152]	; (80009b0 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000918:	f7ff fdf2 	bl	8000500 <MCAL_GPIO_Init>
			pinCfg.GPIO_PinNumber = GPIO_PIN_15;
 800091c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000920:	81bb      	strh	r3, [r7, #12]
			pinCfg.GPIO_MODE =GPIO_MODE_OUTPUT_AF_PP;
 8000922:	2306      	movs	r3, #6
 8000924:	73bb      	strb	r3, [r7, #14]
			pinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 8000926:	2301      	movs	r3, #1
 8000928:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &pinCfg);
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	4619      	mov	r1, r3
 8000930:	481f      	ldr	r0, [pc, #124]	; (80009b0 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000932:	f7ff fde5 	bl	8000500 <MCAL_GPIO_Init>
}
 8000936:	e032      	b.n	800099e <MCAL_SPI_GPIO_Set_Pins+0x1ce>
			if(Global_SPI_Config[SPI2_Index]->NSS == SPI_NSS_HW_Slave)
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	899b      	ldrh	r3, [r3, #12]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d10a      	bne.n	8000958 <MCAL_SPI_GPIO_Set_Pins+0x188>
				pinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8000942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000946:	81bb      	strh	r3, [r7, #12]
				pinCfg.GPIO_MODE =GPIO_MODE_INPUT_FLOATING;
 8000948:	2301      	movs	r3, #1
 800094a:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &pinCfg);
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	4619      	mov	r1, r3
 8000952:	4817      	ldr	r0, [pc, #92]	; (80009b0 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000954:	f7ff fdd4 	bl	8000500 <MCAL_GPIO_Init>
			pinCfg.GPIO_PinNumber = GPIO_PIN_13;
 8000958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800095c:	81bb      	strh	r3, [r7, #12]
			pinCfg.GPIO_MODE =GPIO_MODE_INPUT_FLOATING;
 800095e:	2301      	movs	r3, #1
 8000960:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &pinCfg);
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	4619      	mov	r1, r3
 8000968:	4811      	ldr	r0, [pc, #68]	; (80009b0 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800096a:	f7ff fdc9 	bl	8000500 <MCAL_GPIO_Init>
			pinCfg.GPIO_PinNumber = GPIO_PIN_14;
 800096e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000972:	81bb      	strh	r3, [r7, #12]
			pinCfg.GPIO_MODE =GPIO_MODE_OUTPUT_AF_PP;
 8000974:	2306      	movs	r3, #6
 8000976:	73bb      	strb	r3, [r7, #14]
			pinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 8000978:	2301      	movs	r3, #1
 800097a:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &pinCfg);
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	4619      	mov	r1, r3
 8000982:	480b      	ldr	r0, [pc, #44]	; (80009b0 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000984:	f7ff fdbc 	bl	8000500 <MCAL_GPIO_Init>
			pinCfg.GPIO_PinNumber = GPIO_PIN_15;
 8000988:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800098c:	81bb      	strh	r3, [r7, #12]
			pinCfg.GPIO_MODE =GPIO_MODE_INPUT_FLOATING;
 800098e:	2301      	movs	r3, #1
 8000990:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &pinCfg);
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800099a:	f7ff fdb1 	bl	8000500 <MCAL_GPIO_Init>
}
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40013000 	.word	0x40013000
 80009ac:	20000058 	.word	0x20000058
 80009b0:	40010800 	.word	0x40010800
 80009b4:	40003800 	.word	0x40003800

080009b8 <MCAL_SPI_TX_RX>:
 * @retval			- none
 * @Note			- none
 * ===================================
 * */
void MCAL_SPI_TX_RX(SPI_TypeDef * SPIx , uint16_t *pTxBuffer ,  enum PollingMechanism PollingEN)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	4613      	mov	r3, r2
 80009c4:	71fb      	strb	r3, [r7, #7]
	/* ---------------- transmit ---------------- */
	if(PollingEN == PollingEnable)
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d106      	bne.n	80009da <MCAL_SPI_TX_RX+0x22>
		while(!(SPIx->SPI_SR & SPI_SR_TXE));
 80009cc:	bf00      	nop
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d0f9      	beq.n	80009ce <MCAL_SPI_TX_RX+0x16>

	SPIx->SPI_DR = *pTxBuffer;
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	461a      	mov	r2, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	60da      	str	r2, [r3, #12]

	/* ---------------- receive ---------------- */
	if(PollingEN == PollingEnable)
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d106      	bne.n	80009f8 <MCAL_SPI_TX_RX+0x40>
		while(!(SPIx->SPI_SR & SPI_SR_RXNE));
 80009ea:	bf00      	nop
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0f9      	beq.n	80009ec <MCAL_SPI_TX_RX+0x34>

	*pTxBuffer = SPIx->SPI_DR;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	801a      	strh	r2, [r3, #0]
}
 8000a02:	bf00      	nop
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <SPI1_IRQHandler>:
 * ===========================================================================================================
 *											ISR
 * ===========================================================================================================
 * */
void SPI1_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_src;
	IRQ_src.TXE   = ( ( (SPI1->SR) & (1<<1) ) >> 1);
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <SPI1_IRQHandler+0x54>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	085b      	lsrs	r3, r3, #1
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	793b      	ldrb	r3, [r7, #4]
 8000a20:	f362 0300 	bfi	r3, r2, #0, #1
 8000a24:	713b      	strb	r3, [r7, #4]
	IRQ_src.RXNE  = ( ( (SPI1->SR) & (1<<0) ) >> 0);
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <SPI1_IRQHandler+0x54>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	793b      	ldrb	r3, [r7, #4]
 8000a32:	f362 0341 	bfi	r3, r2, #1, #1
 8000a36:	713b      	strb	r3, [r7, #4]
	IRQ_src.ERRI  = ( ( (SPI1->SR) & (1<<4) ) >> 4);
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <SPI1_IRQHandler+0x54>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	091b      	lsrs	r3, r3, #4
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	793b      	ldrb	r3, [r7, #4]
 8000a46:	f362 0382 	bfi	r3, r2, #2, #1
 8000a4a:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack(IRQ_src);
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <SPI1_IRQHandler+0x58>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	7938      	ldrb	r0, [r7, #4]
 8000a54:	4798      	blx	r3
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40013000 	.word	0x40013000
 8000a64:	20000058 	.word	0x20000058

08000a68 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_src;
	IRQ_src.TXE   = ( ( (SPI2->SR) & (1<<1) ) >> 1);
 8000a6e:	4b13      	ldr	r3, [pc, #76]	; (8000abc <SPI2_IRQHandler+0x54>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	085b      	lsrs	r3, r3, #1
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	793b      	ldrb	r3, [r7, #4]
 8000a7c:	f362 0300 	bfi	r3, r2, #0, #1
 8000a80:	713b      	strb	r3, [r7, #4]
	IRQ_src.RXNE  = ( ( (SPI2->SR) & (1<<0) ) >> 0);
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <SPI2_IRQHandler+0x54>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	793b      	ldrb	r3, [r7, #4]
 8000a8e:	f362 0341 	bfi	r3, r2, #1, #1
 8000a92:	713b      	strb	r3, [r7, #4]
	IRQ_src.ERRI  = ( ( (SPI2->SR) & (1<<4) ) >> 4);
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <SPI2_IRQHandler+0x54>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	091b      	lsrs	r3, r3, #4
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	793b      	ldrb	r3, [r7, #4]
 8000aa2:	f362 0382 	bfi	r3, r2, #2, #1
 8000aa6:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack(IRQ_src);
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <SPI2_IRQHandler+0x58>)
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	7938      	ldrb	r0, [r7, #4]
 8000ab0:	4798      	blx	r3
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40003800 	.word	0x40003800
 8000ac0:	20000058 	.word	0x20000058

08000ac4 <MCAL_UART_Init>:
 * @retval			- none
 * @Note			- support for now asynchronous
 * ===================================
 * */
void MCAL_UART_Init(USART_TypeDef* USARTx , UART_ConFig* USART_CFG)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
	Global_UART_Config = USART_CFG;
 8000ace:	4a5c      	ldr	r2, [pc, #368]	; (8000c40 <MCAL_UART_Init+0x17c>)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	6013      	str	r3, [r2, #0]

	// enable CLOCK for given UART peripheral
	if(USARTx == USART1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a5b      	ldr	r2, [pc, #364]	; (8000c44 <MCAL_UART_Init+0x180>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d106      	bne.n	8000aea <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_EN();
 8000adc:	4b5a      	ldr	r3, [pc, #360]	; (8000c48 <MCAL_UART_Init+0x184>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a59      	ldr	r2, [pc, #356]	; (8000c48 <MCAL_UART_Init+0x184>)
 8000ae2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae6:	6193      	str	r3, [r2, #24]
 8000ae8:	e014      	b.n	8000b14 <MCAL_UART_Init+0x50>
	else if(USARTx == USART2)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a57      	ldr	r2, [pc, #348]	; (8000c4c <MCAL_UART_Init+0x188>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d106      	bne.n	8000b00 <MCAL_UART_Init+0x3c>
		RCC_USART2_CLK_EN();
 8000af2:	4b55      	ldr	r3, [pc, #340]	; (8000c48 <MCAL_UART_Init+0x184>)
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	4a54      	ldr	r2, [pc, #336]	; (8000c48 <MCAL_UART_Init+0x184>)
 8000af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000afc:	61d3      	str	r3, [r2, #28]
 8000afe:	e009      	b.n	8000b14 <MCAL_UART_Init+0x50>
	else if(USARTx == USART3)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a53      	ldr	r2, [pc, #332]	; (8000c50 <MCAL_UART_Init+0x18c>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d105      	bne.n	8000b14 <MCAL_UART_Init+0x50>
		RCC_USART3_CLK_EN();
 8000b08:	4b4f      	ldr	r3, [pc, #316]	; (8000c48 <MCAL_UART_Init+0x184>)
 8000b0a:	69db      	ldr	r3, [r3, #28]
 8000b0c:	4a4e      	ldr	r2, [pc, #312]	; (8000c48 <MCAL_UART_Init+0x184>)
 8000b0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b12:	61d3      	str	r3, [r2, #28]



	// enable UART
	// Bit 13 UE: USART enable
	USARTx->CR1 |= (1<<13);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	60da      	str	r2, [r3, #12]



	// enable TX/RX engine according to the UART configuration item
	// USARTx->CR1 |=    Bit 10 PCE: Parity control enable      Bit 9 PS: Parity selection
	USARTx->CR1 |= USART_CFG->USART_Mode;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	7812      	ldrb	r2, [r2, #0]
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	60da      	str	r2, [r3, #12]


	// PAYLOAD width
	//  USARTx->CR1 |=   	Bit 12 M: Word length
	USARTx->CR1 |= USART_CFG->USART_PayLoad_Length;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	683a      	ldr	r2, [r7, #0]
 8000b34:	7a12      	ldrb	r2, [r2, #8]
 8000b36:	431a      	orrs	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	60da      	str	r2, [r3, #12]



	// configuration of parity control bit fields
	//  USARTx->CR1 |=   	Bit 10 PCE: Parity control enable         Bit 9 PS: Parity selection
	USARTx->CR1 |= USART_CFG->USART_Parity;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	683a      	ldr	r2, [r7, #0]
 8000b42:	7a52      	ldrb	r2, [r2, #9]
 8000b44:	431a      	orrs	r2, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	60da      	str	r2, [r3, #12]



	// configuration of stop bits
	//   USARTx->CR2 |=   	Bits 13:12 STOP: STOP bits
	USARTx->CR2 |=  USART_CFG->USART_StopBits;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	691b      	ldr	r3, [r3, #16]
 8000b4e:	683a      	ldr	r2, [r7, #0]
 8000b50:	7a92      	ldrb	r2, [r2, #10]
 8000b52:	431a      	orrs	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	611a      	str	r2, [r3, #16]



	// UART hardware flow control
	// USARTx->CR3 |=       Bit 9 CTSE: CTS enable                Bit 8 RTSE: RTS enable
	USARTx->CR3 |= USART_CFG->USART_HwFlowCtl;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	695b      	ldr	r3, [r3, #20]
 8000b5c:	683a      	ldr	r2, [r7, #0]
 8000b5e:	7ad2      	ldrb	r2, [r2, #11]
 8000b60:	431a      	orrs	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	615a      	str	r2, [r3, #20]


	// confiuration of baud rate register (BBR)
	// PCLK1 => USART2 , 3
	// PCLK2 => USART1
	if(USARTx == USART1)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a36      	ldr	r2, [pc, #216]	; (8000c44 <MCAL_UART_Init+0x180>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d106      	bne.n	8000b7c <MCAL_UART_Init+0xb8>
		pclk = MCAL_RCC_GetPCLK2Freq();
 8000b6e:	f7ff fd8f 	bl	8000690 <MCAL_RCC_GetPCLK2Freq>
 8000b72:	4603      	mov	r3, r0
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b37      	ldr	r3, [pc, #220]	; (8000c54 <MCAL_UART_Init+0x190>)
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	e005      	b.n	8000b88 <MCAL_UART_Init+0xc4>
	else
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000b7c:	f7ff fd74 	bl	8000668 <MCAL_RCC_GetPCLK1Freq>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b33      	ldr	r3, [pc, #204]	; (8000c54 <MCAL_UART_Init+0x190>)
 8000b86:	601a      	str	r2, [r3, #0]

	BRR  = UART_BRR_Register(pclk , USART_CFG->USART_BaudRate);
 8000b88:	4b32      	ldr	r3, [pc, #200]	; (8000c54 <MCAL_UART_Init+0x190>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	011b      	lsls	r3, r3, #4
 8000b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b96:	0119      	lsls	r1, r3, #4
 8000b98:	4b2e      	ldr	r3, [pc, #184]	; (8000c54 <MCAL_UART_Init+0x190>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	4413      	add	r3, r2
 8000ba2:	009a      	lsls	r2, r3, #2
 8000ba4:	441a      	add	r2, r3
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bb0:	4b28      	ldr	r3, [pc, #160]	; (8000c54 <MCAL_UART_Init+0x190>)
 8000bb2:	6818      	ldr	r0, [r3, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	011b      	lsls	r3, r3, #4
 8000bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8000bbe:	2064      	movs	r0, #100	; 0x64
 8000bc0:	fb00 f303 	mul.w	r3, r0, r3
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	011b      	lsls	r3, r3, #4
 8000bc8:	4a23      	ldr	r2, [pc, #140]	; (8000c58 <MCAL_UART_Init+0x194>)
 8000bca:	fba2 2303 	umull	r2, r3, r2, r3
 8000bce:	095b      	lsrs	r3, r3, #5
 8000bd0:	f003 030f 	and.w	r3, r3, #15
 8000bd4:	430b      	orrs	r3, r1
 8000bd6:	4a21      	ldr	r2, [pc, #132]	; (8000c5c <MCAL_UART_Init+0x198>)
 8000bd8:	6013      	str	r3, [r2, #0]
	USARTx->BRR = BRR;
 8000bda:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <MCAL_UART_Init+0x198>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	609a      	str	r2, [r3, #8]

	// enable / disable interrupt
	//USART_CR1
	if(USART_CFG->USART_IRQ_Enable != USART_IRQ_Enable_NONE)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	7b1b      	ldrb	r3, [r3, #12]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d026      	beq.n	8000c38 <MCAL_UART_Init+0x174>
	{
		// USART_CR1  =>     Bit 8 PEIE: PE interrupt enable
		USARTx->CR1 |= USART_CFG->USART_IRQ_Enable;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	7b12      	ldrb	r2, [r2, #12]
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	60da      	str	r2, [r3, #12]

		//enable NVIC for USARTx IRQ
		if(USARTx == USART1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <MCAL_UART_Init+0x180>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d106      	bne.n	8000c0e <MCAL_UART_Init+0x14a>
			NVIC_IRQ37_USART1_Enable;
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <MCAL_UART_Init+0x19c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a16      	ldr	r2, [pc, #88]	; (8000c60 <MCAL_UART_Init+0x19c>)
 8000c06:	f043 0320 	orr.w	r3, r3, #32
 8000c0a:	6013      	str	r3, [r2, #0]

		else if(USARTx == USART3)
			NVIC_IRQ39_USART3_Enable;
	}

}
 8000c0c:	e014      	b.n	8000c38 <MCAL_UART_Init+0x174>
		else if(USARTx == USART2)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <MCAL_UART_Init+0x188>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d106      	bne.n	8000c24 <MCAL_UART_Init+0x160>
			NVIC_IRQ38_USART2_Enable;
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <MCAL_UART_Init+0x19c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a11      	ldr	r2, [pc, #68]	; (8000c60 <MCAL_UART_Init+0x19c>)
 8000c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c20:	6013      	str	r3, [r2, #0]
}
 8000c22:	e009      	b.n	8000c38 <MCAL_UART_Init+0x174>
		else if(USARTx == USART3)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <MCAL_UART_Init+0x18c>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d105      	bne.n	8000c38 <MCAL_UART_Init+0x174>
			NVIC_IRQ39_USART3_Enable;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <MCAL_UART_Init+0x19c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0b      	ldr	r2, [pc, #44]	; (8000c60 <MCAL_UART_Init+0x19c>)
 8000c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000060 	.word	0x20000060
 8000c44:	40013800 	.word	0x40013800
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40004400 	.word	0x40004400
 8000c50:	40004800 	.word	0x40004800
 8000c54:	20000064 	.word	0x20000064
 8000c58:	51eb851f 	.word	0x51eb851f
 8000c5c:	20000068 	.word	0x20000068
 8000c60:	e000e104 	.word	0xe000e104

08000c64 <MCAL_UART_GPIO_Set_Pins>:
 * @retval			- none
 * @Note			- should enable the corresponding ALT & GPIO in RCC clock also called after MCAL_GPIO_Init()
 * ===================================
 * */
void MCAL_UART_GPIO_Set_Pins(USART_TypeDef* USARTx )
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;

	if(USARTx == USART1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a2b      	ldr	r2, [pc, #172]	; (8000d1c <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d118      	bne.n	8000ca6 <MCAL_UART_GPIO_Set_Pins+0x42>
		 * USART1_CTS   ====>  PA11
		 * USART1_RTS   ====>  PA12
		 * */

		// USART1_TX    ====>  PA9
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c78:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000c7a:	2306      	movs	r3, #6
 8000c7c:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	4619      	mov	r1, r3
 8000c88:	4825      	ldr	r0, [pc, #148]	; (8000d20 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000c8a:	f7ff fc39 	bl	8000500 <MCAL_GPIO_Init>

		// USART1_RX    ====>  PA10
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c92:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000c94:	2308      	movs	r3, #8
 8000c96:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4820      	ldr	r0, [pc, #128]	; (8000d20 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000ca0:	f7ff fc2e 	bl	8000500 <MCAL_GPIO_Init>

		}

	}

}
 8000ca4:	e036      	b.n	8000d14 <MCAL_UART_GPIO_Set_Pins+0xb0>
	}else if (USARTx == USART2)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a1e      	ldr	r2, [pc, #120]	; (8000d24 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d116      	bne.n	8000cdc <MCAL_UART_GPIO_Set_Pins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000cae:	2304      	movs	r3, #4
 8000cb0:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000cb2:	2306      	movs	r3, #6
 8000cb4:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000cba:	f107 030c 	add.w	r3, r7, #12
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4817      	ldr	r0, [pc, #92]	; (8000d20 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000cc2:	f7ff fc1d 	bl	8000500 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000cc6:	2308      	movs	r3, #8
 8000cc8:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000cca:	2308      	movs	r3, #8
 8000ccc:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4812      	ldr	r0, [pc, #72]	; (8000d20 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000cd6:	f7ff fc13 	bl	8000500 <MCAL_GPIO_Init>
}
 8000cda:	e01b      	b.n	8000d14 <MCAL_UART_GPIO_Set_Pins+0xb0>
	}else if (USARTx == USART3)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a12      	ldr	r2, [pc, #72]	; (8000d28 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d117      	bne.n	8000d14 <MCAL_UART_GPIO_Set_Pins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce8:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000cea:	2306      	movs	r3, #6
 8000cec:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000cfa:	f7ff fc01 	bl	8000500 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000cfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d02:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000d04:	2308      	movs	r3, #8
 8000d06:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4807      	ldr	r0, [pc, #28]	; (8000d2c <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000d10:	f7ff fbf6 	bl	8000500 <MCAL_GPIO_Init>
}
 8000d14:	bf00      	nop
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40013800 	.word	0x40013800
 8000d20:	40010800 	.word	0x40010800
 8000d24:	40004400 	.word	0x40004400
 8000d28:	40004800 	.word	0x40004800
 8000d2c:	40010c00 	.word	0x40010c00

08000d30 <MCAL_UART_SendData>:
						When receiving with the parity enabled, the value read in the MSB bit is the received parity
						bit.
 * ===================================
 * */
void MCAL_UART_SendData(USART_TypeDef* USARTx , uint16_t* pTxBuffer , enum Polling_Mechism PollingEN)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	71fb      	strb	r3, [r7, #7]
	//Write the data to send in the USART_DR register (this clears the TXE bit). Repeat this
	// for each data to be transmitted in case of single buffer.
	// wait until TXE flag is  set in SR => send data from transmit data register (TDR) === TO ===> transmit shift register
	if(PollingEN == enable)
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d106      	bne.n	8000d52 <MCAL_UART_SendData+0x22>
	{
		while(!(USARTx->SR & 1<<7));
 8000d44:	bf00      	nop
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d0f9      	beq.n	8000d46 <MCAL_UART_SendData+0x16>
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
	}else

	{
		// this is 8bit data transfer
		USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	605a      	str	r2, [r3, #4]

	}



}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
	...

08000d68 <USART1_IRQHandler>:
 * ===========================================================================================================
 * */


void USART1_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack ();
 8000d6c:	4b02      	ldr	r3, [pc, #8]	; (8000d78 <USART1_IRQHandler+0x10>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	691b      	ldr	r3, [r3, #16]
 8000d72:	4798      	blx	r3
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000060 	.word	0x20000060

08000d7c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack ();
 8000d80:	4b02      	ldr	r3, [pc, #8]	; (8000d8c <USART2_IRQHandler+0x10>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	691b      	ldr	r3, [r3, #16]
 8000d86:	4798      	blx	r3
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000060 	.word	0x20000060

08000d90 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack ();
 8000d94:	4b02      	ldr	r3, [pc, #8]	; (8000da0 <USART3_IRQHandler+0x10>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	4798      	blx	r3
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000060 	.word	0x20000060

08000da4 <Clock_Init>:
//#define MCU_Act_As_Master
#define MCU_Act_As_Slave


void Clock_Init(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

	RCC_GPIOA_CLK_EN();
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <Clock_Init+0x30>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a09      	ldr	r2, [pc, #36]	; (8000dd4 <Clock_Init+0x30>)
 8000dae:	f043 0304 	orr.w	r3, r3, #4
 8000db2:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <Clock_Init+0x30>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <Clock_Init+0x30>)
 8000dba:	f043 0308 	orr.w	r3, r3, #8
 8000dbe:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <Clock_Init+0x30>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a03      	ldr	r2, [pc, #12]	; (8000dd4 <Clock_Init+0x30>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6193      	str	r3, [r2, #24]
	//	RCC_GPIOC_CLK_EN();

}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <SPI_IRQ_CALLBACK>:

unsigned char ch;

void SPI_IRQ_CALLBACK(struct S_IRQ_SRC irqSrc)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	7138      	strb	r0, [r7, #4]
#ifdef MCU_Act_As_Slave
	if(irqSrc.RXNE)
 8000de0:	793b      	ldrb	r3, [r7, #4]
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d00c      	beq.n	8000e06 <SPI_IRQ_CALLBACK+0x2e>
	{
		ch = 0xf;
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <SPI_IRQ_CALLBACK+0x38>)
 8000dee:	220f      	movs	r2, #15
 8000df0:	701a      	strb	r2, [r3, #0]
		MCAL_SPI_TX_RX(SPI1, &ch, PollingDisable);
 8000df2:	2201      	movs	r2, #1
 8000df4:	4906      	ldr	r1, [pc, #24]	; (8000e10 <SPI_IRQ_CALLBACK+0x38>)
 8000df6:	4807      	ldr	r0, [pc, #28]	; (8000e14 <SPI_IRQ_CALLBACK+0x3c>)
 8000df8:	f7ff fdde 	bl	80009b8 <MCAL_SPI_TX_RX>
		MCAL_UART_SendData(USART1, &ch, enable);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	4904      	ldr	r1, [pc, #16]	; (8000e10 <SPI_IRQ_CALLBACK+0x38>)
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <SPI_IRQ_CALLBACK+0x40>)
 8000e02:	f7ff ff95 	bl	8000d30 <MCAL_UART_SendData>
	}
#endif
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	2000006c 	.word	0x2000006c
 8000e14:	40013000 	.word	0x40013000
 8000e18:	40013800 	.word	0x40013800

08000e1c <USART_IRQ_CALLBACK>:

void USART_IRQ_CALLBACK(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
	// send spi
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
	MCAL_SPI_TX_RX(SPI1, &ch, PollingEnable);
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
#endif
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <main>:

int main(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	; 0x30
 8000e2c:	af00      	add	r7, sp, #0

	UART_ConFig UartCfg;
	Clock_Init();
 8000e2e:	f7ff ffb9 	bl	8000da4 <Clock_Init>

	UartCfg.USART_BaudRate = USART_BaudRate_115200;
 8000e32:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000e36:	623b      	str	r3, [r7, #32]
	UartCfg.USART_HwFlowCtl = USART_HwFlowCtl_NONE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	UartCfg.USART_IRQ_Enable = USART_IRQ_Enable_RXNEIE;
 8000e3e:	2320      	movs	r3, #32
 8000e40:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	UartCfg.P_IRQ_CallBack = USART_IRQ_CALLBACK;
 8000e44:	4b19      	ldr	r3, [pc, #100]	; (8000eac <main+0x84>)
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c

	UartCfg.USART_Parity = USART_Parity_NONE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	UartCfg.USART_PayLoad_Length = USART_PayLoad_Length_8B;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	UartCfg.USART_StopBits = USART_StopBits_1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	UartCfg.USART_Mode = USART_Mode_TX_RX;
 8000e5a:	230c      	movs	r3, #12
 8000e5c:	773b      	strb	r3, [r7, #28]

	MCAL_UART_Init(USART1, &UartCfg);
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	4619      	mov	r1, r3
 8000e64:	4812      	ldr	r0, [pc, #72]	; (8000eb0 <main+0x88>)
 8000e66:	f7ff fe2d 	bl	8000ac4 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 8000e6a:	4811      	ldr	r0, [pc, #68]	; (8000eb0 <main+0x88>)
 8000e6c:	f7ff fefa 	bl	8000c64 <MCAL_UART_GPIO_Set_Pins>
	 * PA6  ====> SPI1_MISO
	 * PA7  ====> SPI1_MOSI
	 */
	SPI_Config_t SPI1_cfg;
	/* --------------- common configuration --------------- */
	SPI1_cfg.CLKPhase = SPI_CLKPhase_2ndEdge_First_Data_Capture_Edge;
 8000e70:	2301      	movs	r3, #1
 8000e72:	81fb      	strh	r3, [r7, #14]
	SPI1_cfg.CLKPolarity = SPI_CLKPolarity_1_when_idle;
 8000e74:	2302      	movs	r3, #2
 8000e76:	81bb      	strh	r3, [r7, #12]
	SPI1_cfg.Communication_Mode = SPI_Direction_2LINE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	80fb      	strh	r3, [r7, #6]
	SPI1_cfg.DataSize = SPI_DataSize_8BIT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	817b      	strh	r3, [r7, #10]

	SPI1_cfg.Frame_Format = SPI_Frame_Format_MSB_Transmitted_First;
 8000e80:	2300      	movs	r3, #0
 8000e82:	813b      	strh	r3, [r7, #8]

	// assume by default pclk2 = 8MHz
	SPI1_cfg.SPI_BaudRate = SPI_BaudRatePrescaler_8;
 8000e84:	2310      	movs	r3, #16
 8000e86:	827b      	strh	r3, [r7, #18]
#endif



#ifdef MCU_Act_As_Slave
SPI1_cfg.Device_Mode = Device_Mode_Slave;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	80bb      	strh	r3, [r7, #4]
SPI1_cfg.Communication_Mode = SPI_NSS_HW_Slave;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	80fb      	strh	r3, [r7, #6]
SPI1_cfg.IRQ_Enable = SPI_IRQ_Enable_RXNEIE;
 8000e90:	2340      	movs	r3, #64	; 0x40
 8000e92:	82bb      	strh	r3, [r7, #20]
SPI1_cfg.P_IRQ_CallBack = SPI_IRQ_CALLBACK;
 8000e94:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <main+0x8c>)
 8000e96:	61bb      	str	r3, [r7, #24]
#endif

	MCAL_SPI_Init(SPI1, &SPI1_cfg);
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <main+0x90>)
 8000e9e:	f7ff fc0b 	bl	80006b8 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <main+0x90>)
 8000ea4:	f7ff fc94 	bl	80007d0 <MCAL_SPI_GPIO_Set_Pins>





	while(1)
 8000ea8:	e7fe      	b.n	8000ea8 <main+0x80>
 8000eaa:	bf00      	nop
 8000eac:	08000e1d 	.word	0x08000e1d
 8000eb0:	40013800 	.word	0x40013800
 8000eb4:	08000dd9 	.word	0x08000dd9
 8000eb8:	40013000 	.word	0x40013000

08000ebc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ebc:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ebe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ec0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec4:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ec6:	490d      	ldr	r1, [pc, #52]	; (8000efc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <LoopForever+0xe>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ecc:	e002      	b.n	8000ed4 <LoopCopyDataInit>

08000ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed2:	3304      	adds	r3, #4

08000ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed8:	d3f9      	bcc.n	8000ece <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000edc:	4c0a      	ldr	r4, [pc, #40]	; (8000f08 <LoopForever+0x16>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee0:	e001      	b.n	8000ee6 <LoopFillZerobss>

08000ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee4:	3204      	adds	r2, #4

08000ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee8:	d3fb      	bcc.n	8000ee2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000eea:	f000 f811 	bl	8000f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eee:	f7ff ff9b 	bl	8000e28 <main>

08000ef2 <LoopForever>:

LoopForever:
  b LoopForever
 8000ef2:	e7fe      	b.n	8000ef2 <LoopForever>
  ldr   r0, =_estack
 8000ef4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000efc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000f00:	08000f90 	.word	0x08000f90
  ldr r2, =_sbss
 8000f04:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000f08:	20000070 	.word	0x20000070

08000f0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f0c:	e7fe      	b.n	8000f0c <ADC1_2_IRQHandler>
	...

08000f10 <__libc_init_array>:
 8000f10:	b570      	push	{r4, r5, r6, lr}
 8000f12:	2600      	movs	r6, #0
 8000f14:	4d0c      	ldr	r5, [pc, #48]	; (8000f48 <__libc_init_array+0x38>)
 8000f16:	4c0d      	ldr	r4, [pc, #52]	; (8000f4c <__libc_init_array+0x3c>)
 8000f18:	1b64      	subs	r4, r4, r5
 8000f1a:	10a4      	asrs	r4, r4, #2
 8000f1c:	42a6      	cmp	r6, r4
 8000f1e:	d109      	bne.n	8000f34 <__libc_init_array+0x24>
 8000f20:	f000 f81a 	bl	8000f58 <_init>
 8000f24:	2600      	movs	r6, #0
 8000f26:	4d0a      	ldr	r5, [pc, #40]	; (8000f50 <__libc_init_array+0x40>)
 8000f28:	4c0a      	ldr	r4, [pc, #40]	; (8000f54 <__libc_init_array+0x44>)
 8000f2a:	1b64      	subs	r4, r4, r5
 8000f2c:	10a4      	asrs	r4, r4, #2
 8000f2e:	42a6      	cmp	r6, r4
 8000f30:	d105      	bne.n	8000f3e <__libc_init_array+0x2e>
 8000f32:	bd70      	pop	{r4, r5, r6, pc}
 8000f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f38:	4798      	blx	r3
 8000f3a:	3601      	adds	r6, #1
 8000f3c:	e7ee      	b.n	8000f1c <__libc_init_array+0xc>
 8000f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f42:	4798      	blx	r3
 8000f44:	3601      	adds	r6, #1
 8000f46:	e7f2      	b.n	8000f2e <__libc_init_array+0x1e>
 8000f48:	08000f88 	.word	0x08000f88
 8000f4c:	08000f88 	.word	0x08000f88
 8000f50:	08000f88 	.word	0x08000f88
 8000f54:	08000f8c 	.word	0x08000f8c

08000f58 <_init>:
 8000f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5a:	bf00      	nop
 8000f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f5e:	bc08      	pop	{r3}
 8000f60:	469e      	mov	lr, r3
 8000f62:	4770      	bx	lr

08000f64 <_fini>:
 8000f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f66:	bf00      	nop
 8000f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f6a:	bc08      	pop	{r3}
 8000f6c:	469e      	mov	lr, r3
 8000f6e:	4770      	bx	lr
