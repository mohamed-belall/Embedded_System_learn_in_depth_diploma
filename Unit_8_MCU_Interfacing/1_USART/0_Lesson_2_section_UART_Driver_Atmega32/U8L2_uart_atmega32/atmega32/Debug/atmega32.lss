
atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  000002a6  0000033a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000032  008000a4  008000a4  0000037e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e1b  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000815  00000000  00000000  000012df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000758  00000000  00000000  00001af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  0000224c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050f  00000000  00000000  00002464  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000711  00000000  00000000  00002973  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ea       	ldi	r30, 0xA6	; 166
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3a       	cpi	r26, 0xA4	; 164
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 ea       	ldi	r26, 0xA4	; 164
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3d       	cpi	r26, 0xD6	; 214
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <main>
  8a:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Kick>:
	}
}

void LCD_Kick(void)
{	
	LCD_CONTROL_PORT |= (1<<EN_switch);
  92:	88 b3       	in	r24, 0x18	; 24
  94:	88 60       	ori	r24, 0x08	; 8
  96:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f e7       	ldi	r18, 0x7F	; 127
  9a:	88 e3       	ldi	r24, 0x38	; 56
  9c:	91 e0       	ldi	r25, 0x01	; 1
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <LCD_Kick+0xc>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <LCD_Kick+0x16>
  a8:	00 00       	nop
	_delay_ms(50);
	LCD_CONTROL_PORT &= ~(1<<EN_switch);
  aa:	88 b3       	in	r24, 0x18	; 24
  ac:	87 7f       	andi	r24, 0xF7	; 247
  ae:	88 bb       	out	0x18, r24	; 24
  b0:	08 95       	ret

000000b2 <LCD_Check_Is_Busy>:
	

}
void LCD_Check_Is_Busy(void)
{
	DataDir_LCD_PORT &= ~(0xFF << DATA_SHIFT);
  b2:	8a b3       	in	r24, 0x1a	; 26
  b4:	1a ba       	out	0x1a, r1	; 26
	LCD_CONTROL_PORT |= (1<<RW_switch);            //1: Read
  b6:	88 b3       	in	r24, 0x18	; 24
  b8:	84 60       	ori	r24, 0x04	; 4
  ba:	88 bb       	out	0x18, r24	; 24
	LCD_CONTROL_PORT &= ~(1<<RS_switch);           // 0: Command Register
  bc:	88 b3       	in	r24, 0x18	; 24
  be:	8d 7f       	andi	r24, 0xFD	; 253
  c0:	88 bb       	out	0x18, r24	; 24
	
	LCD_Kick();
  c2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Kick>
	
	DataDir_LCD_PORT |= (0xFF << DATA_SHIFT);
  c6:	8a b3       	in	r24, 0x1a	; 26
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8a bb       	out	0x1a, r24	; 26
	LCD_CONTROL_PORT &= ~(1<<RW_switch);       //0: Write
  cc:	88 b3       	in	r24, 0x18	; 24
  ce:	8b 7f       	andi	r24, 0xFB	; 251
  d0:	88 bb       	out	0x18, r24	; 24
  d2:	08 95       	ret

000000d4 <LCD_Send_Command>:
{
	LCD_Send_Command(LCD_CLEAR);
}

void LCD_Send_Command(uint8_t command)
{
  d4:	cf 93       	push	r28
  d6:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
	LCD_Check_Is_Busy();
  d8:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Check_Is_Busy>
	
	LCD_PORT = command;
  dc:	cb bb       	out	0x1b, r28	; 27
	LCD_CONTROL_PORT &= ~((1<<RW_switch) | (1<<RS_switch));
  de:	88 b3       	in	r24, 0x18	; 24
  e0:	89 7f       	andi	r24, 0xF9	; 249
  e2:	88 bb       	out	0x18, r24	; 24
  e4:	8f ec       	ldi	r24, 0xCF	; 207
  e6:	97 e0       	ldi	r25, 0x07	; 7
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCD_Send_Command+0x14>
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCD_Send_Command+0x1a>
  ee:	00 00       	nop
	_delay_ms(1);
	LCD_Kick();
  f0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Kick>
	LCD_PORT = (LCD_PORT &0x0F) | (command << 4);
	LCD_CONTROL_PORT &= ~((1<<RW_switch) | (1<<RS_switch));
	LCD_Kick();
	#endif
	
}
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <LCD_Clear_Screen>:
	
}

void LCD_Clear_Screen(void)
{
	LCD_Send_Command(LCD_CLEAR);
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_Send_Command>
  fe:	08 95       	ret

00000100 <LCD_Init>:
 100:	8f e3       	ldi	r24, 0x3F	; 63
 102:	9c e9       	ldi	r25, 0x9C	; 156
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LCD_Init+0x4>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LCD_Init+0xa>
 10a:	00 00       	nop
#include "lcd_driver.h"

void LCD_Init(void)
{
	_delay_ms(20);
	DataDir_LCD_CONTROL |=  (1<<EN_switch | 1<<RW_switch | 1<<RS_switch);
 10c:	87 b3       	in	r24, 0x17	; 23
 10e:	8e 60       	ori	r24, 0x0E	; 14
 110:	87 bb       	out	0x17, r24	; 23
	LCD_CONTROL_PORT    &= ~(1<<EN_switch | 1<<RW_switch | 1<<RS_switch);
 112:	88 b3       	in	r24, 0x18	; 24
 114:	81 7f       	andi	r24, 0xF1	; 241
 116:	88 bb       	out	0x18, r24	; 24


	
	DataDir_LCD_PORT = 0xFF;
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	8a bb       	out	0x1a, r24	; 26
 11c:	8f e2       	ldi	r24, 0x2F	; 47
 11e:	95 e7       	ldi	r25, 0x75	; 117
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <LCD_Init+0x20>
 124:	00 c0       	rjmp	.+0      	; 0x126 <LCD_Init+0x26>
 126:	00 00       	nop
	
	_delay_ms(15);
	LCD_Clear_Screen();
 128:	0e 94 7c 00 	call	0xf8	; 0xf8 <LCD_Clear_Screen>
	
	#ifdef EIGHT_BIT_MODE
	LCD_Send_Command(LCD_FUNCTION_8BIT_2LINES);
 12c:	88 e3       	ldi	r24, 0x38	; 56
 12e:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_Send_Command>
	#ifdef FOUR_BIT_MODE
	LCD_Send_Command(0x02);
	LCD_Send_Command(LCD_FUNCTION_4BIT_2LINES);
	#endif
	
	LCD_Send_Command(LCD_ENTRY_MODE);
 132:	86 e0       	ldi	r24, 0x06	; 6
 134:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_Send_Command>
	LCD_Send_Command(LCD_BEGIN_AT_FIRST_RAW);
 138:	80 e8       	ldi	r24, 0x80	; 128
 13a:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_Send_Command>
	LCD_Send_Command(LCD_DISP_0N_CURSOR_BLINK);
 13e:	8f e0       	ldi	r24, 0x0F	; 15
 140:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_Send_Command>
 144:	08 95       	ret

00000146 <LCD_Send_Character>:
	LCD_Kick();
	#endif
	
}
void LCD_Send_Character(uint8_t character)
{
 146:	cf 93       	push	r28
 148:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
	LCD_Check_Is_Busy();
 14a:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Check_Is_Busy>

	LCD_PORT = (character << DATA_SHIFT);
 14e:	cb bb       	out	0x1b, r28	; 27
	LCD_CONTROL_PORT &= ~(1<<RW_switch);    //0: Write
 150:	88 b3       	in	r24, 0x18	; 24
 152:	8b 7f       	andi	r24, 0xFB	; 251
 154:	88 bb       	out	0x18, r24	; 24
	LCD_CONTROL_PORT |= (1<<RS_switch);     //1: Data Register
 156:	88 b3       	in	r24, 0x18	; 24
 158:	82 60       	ori	r24, 0x02	; 2
 15a:	88 bb       	out	0x18, r24	; 24
 15c:	8f ec       	ldi	r24, 0xCF	; 207
 15e:	97 e0       	ldi	r25, 0x07	; 7
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <LCD_Send_Character+0x1a>
 164:	00 c0       	rjmp	.+0      	; 0x166 <LCD_Send_Character+0x20>
 166:	00 00       	nop
	_delay_ms(1);
	LCD_Kick();
 168:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Kick>
	LCD_PORT = (LCD_PORT &0x0F) | (character << 4);
	LCD_CONTROL_PORT &= ~(1<<RW_switch);    //0: Write
	LCD_CONTROL_PORT |= (1<<RS_switch);     //1: Data Register
	LCD_Kick();
	#endif
}
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <LCD_gotoXY>:
	LCD_CONTROL_PORT &= ~(1<<RW_switch);       //0: Write
}

void LCD_gotoXY(uint8_t line , uint8_t position)
{
	if (line == 1) // line 1
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	39 f4       	brne	.+14     	; 0x182 <LCD_gotoXY+0x12>
	{
		if(position < 16 && position >= 0)
 174:	60 31       	cpi	r22, 0x10	; 16
 176:	68 f4       	brcc	.+26     	; 0x192 <LCD_gotoXY+0x22>
			LCD_Send_Command(LCD_BEGIN_AT_FIRST_RAW+position);
 178:	80 e8       	ldi	r24, 0x80	; 128
 17a:	86 0f       	add	r24, r22
 17c:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_Send_Command>
 180:	08 95       	ret
	}
	else if (line == 2) //  line 2
 182:	82 30       	cpi	r24, 0x02	; 2
 184:	31 f4       	brne	.+12     	; 0x192 <LCD_gotoXY+0x22>
	{
		if(position < 16 && position >= 0)
 186:	60 31       	cpi	r22, 0x10	; 16
 188:	20 f4       	brcc	.+8      	; 0x192 <LCD_gotoXY+0x22>
			LCD_Send_Command(LCD_BEGIN_AT_SECOND_RAW+position);
 18a:	80 ec       	ldi	r24, 0xC0	; 192
 18c:	86 0f       	add	r24, r22
 18e:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_Send_Command>
 192:	08 95       	ret

00000194 <LCD_Send_String>:
	LCD_CONTROL_PORT |= (1<<RS_switch);     //1: Data Register
	LCD_Kick();
	#endif
}
void LCD_Send_String(char *string)
{
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	8c 01       	movw	r16, r24
	int count =0;
 19e:	c0 e0       	ldi	r28, 0x00	; 0
 1a0:	d0 e0       	ldi	r29, 0x00	; 0
	while(*string >0)
 1a2:	18 c0       	rjmp	.+48     	; 0x1d4 <LCD_Send_String+0x40>
	{
		count++;
 1a4:	21 96       	adiw	r28, 0x01	; 1
		LCD_Send_Character(*string++);
 1a6:	0f 5f       	subi	r16, 0xFF	; 255
 1a8:	1f 4f       	sbci	r17, 0xFF	; 255
 1aa:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_Send_Character>
		if (count == 16)
 1ae:	c0 31       	cpi	r28, 0x10	; 16
 1b0:	d1 05       	cpc	r29, r1
 1b2:	29 f4       	brne	.+10     	; 0x1be <LCD_Send_String+0x2a>
		{
			LCD_gotoXY(2,0);
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_gotoXY>
 1bc:	0b c0       	rjmp	.+22     	; 0x1d4 <LCD_Send_String+0x40>
		}else if(count >= 32 )
 1be:	c0 32       	cpi	r28, 0x20	; 32
 1c0:	d1 05       	cpc	r29, r1
 1c2:	44 f0       	brlt	.+16     	; 0x1d4 <LCD_Send_String+0x40>
		{
			LCD_Clear_Screen();
 1c4:	0e 94 7c 00 	call	0xf8	; 0xf8 <LCD_Clear_Screen>
			LCD_gotoXY(1,0);
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_gotoXY>
			count =0;
 1d0:	c0 e0       	ldi	r28, 0x00	; 0
 1d2:	d0 e0       	ldi	r29, 0x00	; 0
	#endif
}
void LCD_Send_String(char *string)
{
	int count =0;
	while(*string >0)
 1d4:	f8 01       	movw	r30, r16
 1d6:	80 81       	ld	r24, Z
 1d8:	81 11       	cpse	r24, r1
 1da:	e4 cf       	rjmp	.-56     	; 0x1a4 <LCD_Send_String+0x10>
			LCD_Clear_Screen();
			LCD_gotoXY(1,0);
			count =0;
		}
	}
}
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	1f 91       	pop	r17
 1e2:	0f 91       	pop	r16
 1e4:	08 95       	ret

000001e6 <main>:
#include "MCAL/UART.h"

int main(void)
{
	uint8 *arr;
	LCD_Init();
 1e6:	0e 94 80 00 	call	0x100	; 0x100 <LCD_Init>
	
	UART_Init();
 1ea:	0e 94 08 01 	call	0x210	; 0x210 <UART_Init>
	LCD_Send_String("uart is ready");
 1ee:	80 e6       	ldi	r24, 0x60	; 96
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_Send_String>

	UART_Send_String("welcome to uart ( enter * to send string to lcd ) => ");
 1f6:	8e e6       	ldi	r24, 0x6E	; 110
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 2e 01 	call	0x25c	; 0x25c <UART_Send_String>
	LCD_gotoXY(2,0);
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_gotoXY>
    while (1) 
    {
			
			arr = UART_Receive_String();
 206:	0e 94 3b 01 	call	0x276	; 0x276 <UART_Receive_String>
			LCD_Send_String(arr);
 20a:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_Send_String>
 20e:	fb cf       	rjmp	.-10     	; 0x206 <main+0x20>

00000210 <UART_Init>:
	p[0] = UART_Receive();
	p[1] = UART_Receive();
	p[2] = UART_Receive();
	p[3] = UART_Receive();
	return number;
}
 210:	83 e3       	ldi	r24, 0x33	; 51
 212:	89 b9       	out	0x09, r24	; 9
 214:	8b b1       	in	r24, 0x0b	; 11
 216:	8d 7f       	andi	r24, 0xFD	; 253
 218:	8b b9       	out	0x0b, r24	; 11
 21a:	80 b5       	in	r24, 0x20	; 32
 21c:	8f 7b       	andi	r24, 0xBF	; 191
 21e:	80 bd       	out	0x20, r24	; 32
 220:	80 b5       	in	r24, 0x20	; 32
 222:	8f 7e       	andi	r24, 0xEF	; 239
 224:	80 bd       	out	0x20, r24	; 32
 226:	80 b5       	in	r24, 0x20	; 32
 228:	8f 7d       	andi	r24, 0xDF	; 223
 22a:	80 bd       	out	0x20, r24	; 32
 22c:	80 b5       	in	r24, 0x20	; 32
 22e:	82 60       	ori	r24, 0x02	; 2
 230:	80 bd       	out	0x20, r24	; 32
 232:	80 b5       	in	r24, 0x20	; 32
 234:	84 60       	ori	r24, 0x04	; 4
 236:	80 bd       	out	0x20, r24	; 32
 238:	8a b1       	in	r24, 0x0a	; 10
 23a:	8b 7f       	andi	r24, 0xFB	; 251
 23c:	8a b9       	out	0x0a, r24	; 10
 23e:	8a b1       	in	r24, 0x0a	; 10
 240:	88 60       	ori	r24, 0x08	; 8
 242:	8a b9       	out	0x0a, r24	; 10
 244:	8a b1       	in	r24, 0x0a	; 10
 246:	80 61       	ori	r24, 0x10	; 16
 248:	8a b9       	out	0x0a, r24	; 10
 24a:	08 95       	ret

0000024c <UART_Send>:
 24c:	5d 9b       	sbis	0x0b, 5	; 11
 24e:	fe cf       	rjmp	.-4      	; 0x24c <UART_Send>
 250:	8c b9       	out	0x0c, r24	; 12
 252:	08 95       	ret

00000254 <UART_Receive>:
 254:	5f 9b       	sbis	0x0b, 7	; 11
 256:	fe cf       	rjmp	.-4      	; 0x254 <UART_Receive>
 258:	8c b1       	in	r24, 0x0c	; 12
 25a:	08 95       	ret

0000025c <UART_Send_String>:


void UART_Send_String(uint8 *string)
{
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	ec 01       	movw	r28, r24
	while(*string)
 262:	03 c0       	rjmp	.+6      	; 0x26a <UART_Send_String+0xe>
	{
		UART_Send(*string);
 264:	0e 94 26 01 	call	0x24c	; 0x24c <UART_Send>
		string++;
 268:	21 96       	adiw	r28, 0x01	; 1
}


void UART_Send_String(uint8 *string)
{
	while(*string)
 26a:	88 81       	ld	r24, Y
 26c:	81 11       	cpse	r24, r1
 26e:	fa cf       	rjmp	.-12     	; 0x264 <UART_Send_String+0x8>
	{
		UART_Send(*string);
		string++;
	}
}
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <UART_Receive_String>:


uint8 *UART_Receive_String(void)
{
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
	static uint8 string[50];
	uint8 *p = &string;
	*string = UART_Receive();
 27a:	0e 94 2a 01 	call	0x254	; 0x254 <UART_Receive>
 27e:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__data_end>


uint8 *UART_Receive_String(void)
{
	static uint8 string[50];
	uint8 *p = &string;
 282:	c4 ea       	ldi	r28, 0xA4	; 164
 284:	d0 e0       	ldi	r29, 0x00	; 0
	*string = UART_Receive();
	while(*p != '*')
 286:	04 c0       	rjmp	.+8      	; 0x290 <UART_Receive_String+0x1a>
	{
		p++;
 288:	21 96       	adiw	r28, 0x01	; 1
		*p = UART_Receive();
 28a:	0e 94 2a 01 	call	0x254	; 0x254 <UART_Receive>
 28e:	88 83       	st	Y, r24
uint8 *UART_Receive_String(void)
{
	static uint8 string[50];
	uint8 *p = &string;
	*string = UART_Receive();
	while(*p != '*')
 290:	88 81       	ld	r24, Y
 292:	8a 32       	cpi	r24, 0x2A	; 42
 294:	c9 f7       	brne	.-14     	; 0x288 <UART_Receive_String+0x12>
	{
		p++;
		*p = UART_Receive();
	}
	*p = '\0';
 296:	18 82       	st	Y, r1
	return string;
 298:	84 ea       	ldi	r24, 0xA4	; 164
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <_exit>:
 2a2:	f8 94       	cli

000002a4 <__stop_program>:
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <__stop_program>
