
lab2_atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000188  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000723  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e2  00000000  00000000  000009b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032b  00000000  00000000  00000f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  000012c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000394  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000018f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_1>
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_2>
   c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 57 00 	call	0xae	; 0xae <main>
  64:	0c 94 c2 00 	jmp	0x184	; 0x184 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_INIT>:

void GPIO_INIT(void)
{
	
		// make pin 5 , 6 , 7 output
		DDRD |= (1<<5);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 62       	ori	r24, 0x20	; 32
  70:	81 bb       	out	0x11, r24	; 17
		DDRD |= (1<<6);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	80 64       	ori	r24, 0x40	; 64
  76:	81 bb       	out	0x11, r24	; 17
		DDRD |= (1<<7);
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	80 68       	ori	r24, 0x80	; 128
  7c:	81 bb       	out	0x11, r24	; 17
  7e:	08 95       	ret

00000080 <EXTI_INIT>:
	2. INT1 => rising edge
	3. INT2 => falling edge 
	*/
	
	// 1. INT0 => any change (rising or falling)
	MCUCR |= (1<<0);
  80:	85 b7       	in	r24, 0x35	; 53
  82:	81 60       	ori	r24, 0x01	; 1
  84:	85 bf       	out	0x35, r24	; 53
	// 2. INT1 => rising edge		
	MCUCR |= (1<<2); 
  86:	85 b7       	in	r24, 0x35	; 53
  88:	84 60       	ori	r24, 0x04	; 4
  8a:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<3); 
  8c:	85 b7       	in	r24, 0x35	; 53
  8e:	88 60       	ori	r24, 0x08	; 8
  90:	85 bf       	out	0x35, r24	; 53
	// 3. INT2 => falling edge 
	MCUCSR &= ~(1<<6);	    
  92:	84 b7       	in	r24, 0x34	; 52
  94:	8f 7b       	andi	r24, 0xBF	; 191
  96:	84 bf       	out	0x34, r24	; 52
	
	// GICR general interrupt control register
	GICR |= (1<<5); // enable external interrupt INT2
  98:	8b b7       	in	r24, 0x3b	; 59
  9a:	80 62       	ori	r24, 0x20	; 32
  9c:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1<<6); // enable external interrupt INT0
  9e:	8b b7       	in	r24, 0x3b	; 59
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1<<7); // enable external interrupt INT1
  a4:	8b b7       	in	r24, 0x3b	; 59
  a6:	80 68       	ori	r24, 0x80	; 128
  a8:	8b bf       	out	0x3b, r24	; 59
	
	
	//enable global interrupt
	sei();
  aa:	78 94       	sei
  ac:	08 95       	ret

000000ae <main>:
void EXTI_INIT(void);
void GPIO_INIT(void);
int main(void)
{

	EXTI_INIT();
  ae:	0e 94 40 00 	call	0x80	; 0x80 <EXTI_INIT>
	GPIO_INIT();
  b2:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_INIT>

    /* Replace with your application code */
    while (1) 
    {
		PORTD &= ~(1<<5);
  b6:	82 b3       	in	r24, 0x12	; 18
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	82 bb       	out	0x12, r24	; 18
		PORTD &= ~(1<<6);
  bc:	82 b3       	in	r24, 0x12	; 18
  be:	8f 7b       	andi	r24, 0xBF	; 191
  c0:	82 bb       	out	0x12, r24	; 18
		PORTD &= ~(1<<7);
  c2:	82 b3       	in	r24, 0x12	; 18
  c4:	8f 77       	andi	r24, 0x7F	; 127
  c6:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	89 e6       	ldi	r24, 0x69	; 105
  cc:	98 e1       	ldi	r25, 0x18	; 24
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x20>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x2a>
  d8:	00 00       	nop
  da:	ed cf       	rjmp	.-38     	; 0xb6 <main+0x8>

000000dc <__vector_1>:
	//enable global interrupt
	sei();
}

ISR(INT0_vect)
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	2f 93       	push	r18
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
	PORTD |=(1<<5);
  ec:	82 b3       	in	r24, 0x12	; 18
  ee:	80 62       	ori	r24, 0x20	; 32
  f0:	82 bb       	out	0x12, r24	; 18
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	89 e6       	ldi	r24, 0x69	; 105
  f6:	98 e1       	ldi	r25, 0x18	; 24
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <__vector_1+0x1c>
 100:	00 c0       	rjmp	.+0      	; 0x102 <__vector_1+0x26>
 102:	00 00       	nop
	_delay_ms(1000);
	
}
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	2f 91       	pop	r18
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <__vector_2>:
ISR(INT1_vect)
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	2f 93       	push	r18
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
	PORTD |=(1<<6);
 124:	82 b3       	in	r24, 0x12	; 18
 126:	80 64       	ori	r24, 0x40	; 64
 128:	82 bb       	out	0x12, r24	; 18
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	89 e6       	ldi	r24, 0x69	; 105
 12e:	98 e1       	ldi	r25, 0x18	; 24
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <__vector_2+0x1c>
 138:	00 c0       	rjmp	.+0      	; 0x13a <__vector_2+0x26>
 13a:	00 00       	nop
	_delay_ms(1000);
	
}
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <__vector_3>:
ISR(INT2_vect)
{
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	2f 93       	push	r18
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
	PORTD |=(1<<7);
 15c:	82 b3       	in	r24, 0x12	; 18
 15e:	80 68       	ori	r24, 0x80	; 128
 160:	82 bb       	out	0x12, r24	; 18
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	89 e6       	ldi	r24, 0x69	; 105
 166:	98 e1       	ldi	r25, 0x18	; 24
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <__vector_3+0x1c>
 170:	00 c0       	rjmp	.+0      	; 0x172 <__vector_3+0x26>
 172:	00 00       	nop
	_delay_ms(1000);
	
}
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	2f 91       	pop	r18
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
