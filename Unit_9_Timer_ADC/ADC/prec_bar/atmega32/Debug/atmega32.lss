
atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000b96  00000c2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800076  00800076  00000c40  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001282  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0a  00000000  00000000  0000208a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a17  00000000  00000000  00002a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  000034ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000737  00000000  00000000  00003804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000958  00000000  00000000  00003f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004893  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__vector_10>
  2c:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e9       	ldi	r30, 0x96	; 150
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 38       	cpi	r26, 0x8B	; 139
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ad 01 	call	0x35a	; 0x35a <main>
  8a:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <prec_bar_app>:
#include "prec_bar.h"
#include "./../../HAL/lcd_driver.h"

uint32_t ADC_Result , prec , barSize;
void prec_bar_app(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	27 97       	sbiw	r28, 0x07	; 7
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	LCD_Init();
  a6:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Init>
	
	ADC_Config_t ADCcfg;
	ADCcfg.ADC_Mode = ADC_Mode_SINGLE_CONVERSION;
  aa:	19 82       	std	Y+1, r1	; 0x01
	ADCcfg.ADC_Prescaler = ADC_PRESCALER_64;
  ac:	86 e0       	ldi	r24, 0x06	; 6
  ae:	8b 83       	std	Y+3, r24	; 0x03
	ADCcfg.ADC_Result_Presentation = ADC_Result_Presentation_LEFT;
  b0:	80 e2       	ldi	r24, 0x20	; 32
  b2:	8c 83       	std	Y+4, r24	; 0x04
	ADCcfg.ADC_Voltage_Reference = ADC_Voltage_Reference_AVCC;
  b4:	80 e4       	ldi	r24, 0x40	; 64
  b6:	8a 83       	std	Y+2, r24	; 0x02
	ADCcfg.IRQ_Enable = IRQ_ADIE_Disable;
  b8:	1d 82       	std	Y+5, r1	; 0x05
	
	MCAL_ADC_Init(&ADCcfg);
  ba:	ce 01       	movw	r24, r28
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	0e 94 b2 01 	call	0x364	; 0x364 <MCAL_ADC_Init>
	
	LCD_Send_String("PREC: ");
  c2:	80 e6       	ldi	r24, 0x60	; 96
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_Send_String>
	
	while (1)
	{
		
		
	 MCAL_ADC_GetConversionResult(ADC0,&ADC_Result , Polling_ENABLE);
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	6c e7       	ldi	r22, 0x7C	; 124
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <MCAL_ADC_GetConversionResult>
	 prec = (ADC_Result *100)/1023;
  d6:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <ADC_Result>
  da:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <ADC_Result+0x1>
  de:	40 91 7e 00 	lds	r20, 0x007E	; 0x80007e <ADC_Result+0x2>
  e2:	50 91 7f 00 	lds	r21, 0x007F	; 0x80007f <ADC_Result+0x3>
  e6:	a4 e6       	ldi	r26, 0x64	; 100
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	0e 94 c5 02 	call	0x58a	; 0x58a <__muluhisi3>
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	33 e0       	ldi	r19, 0x03	; 3
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	0e 94 a3 02 	call	0x546	; 0x546 <__udivmodsi4>
  fa:	69 01       	movw	r12, r18
  fc:	7a 01       	movw	r14, r20
  fe:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <prec>
 102:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <prec+0x1>
 106:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <prec+0x2>
 10a:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <prec+0x3>
	 barSize = (160 / (1000 / prec));
 10e:	68 ee       	ldi	r22, 0xE8	; 232
 110:	73 e0       	ldi	r23, 0x03	; 3
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 a3 02 	call	0x546	; 0x546 <__udivmodsi4>
 11a:	60 ea       	ldi	r22, 0xA0	; 160
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 a3 02 	call	0x546	; 0x546 <__udivmodsi4>
 126:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <barSize>
 12a:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <barSize+0x1>
 12e:	40 93 82 00 	sts	0x0082, r20	; 0x800082 <barSize+0x2>
 132:	50 93 83 00 	sts	0x0083, r21	; 0x800083 <barSize+0x3>
	 LCD_Display_Number(prec);
 136:	c6 01       	movw	r24, r12
 138:	0e 94 83 01 	call	0x306	; 0x306 <LCD_Display_Number>
	 LCD_Send_Character('%');
 13c:	85 e2       	ldi	r24, 0x25	; 37
 13e:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_Send_Character>
	 
	 int i;
	 LCD_gotoXY(2,0);
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 41 01 	call	0x282	; 0x282 <LCD_gotoXY>

	 for(i=0;i<barSize;i++)
 14e:	00 e0       	ldi	r16, 0x00	; 0
 150:	10 e0       	ldi	r17, 0x00	; 0
 152:	05 c0       	rjmp	.+10     	; 0x15e <prec_bar_app+0xcc>
	 {
		 LCD_Send_Character(0xff);
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_Send_Character>
	 LCD_Send_Character('%');
	 
	 int i;
	 LCD_gotoXY(2,0);

	 for(i=0;i<barSize;i++)
 15a:	0f 5f       	subi	r16, 0xFF	; 255
 15c:	1f 4f       	sbci	r17, 0xFF	; 255
 15e:	40 91 80 00 	lds	r20, 0x0080	; 0x800080 <barSize>
 162:	50 91 81 00 	lds	r21, 0x0081	; 0x800081 <barSize+0x1>
 166:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <barSize+0x2>
 16a:	70 91 83 00 	lds	r23, 0x0083	; 0x800083 <barSize+0x3>
 16e:	c8 01       	movw	r24, r16
 170:	01 2e       	mov	r0, r17
 172:	00 0c       	add	r0, r0
 174:	aa 0b       	sbc	r26, r26
 176:	bb 0b       	sbc	r27, r27
 178:	84 17       	cp	r24, r20
 17a:	95 07       	cpc	r25, r21
 17c:	a6 07       	cpc	r26, r22
 17e:	b7 07       	cpc	r27, r23
 180:	48 f3       	brcs	.-46     	; 0x154 <prec_bar_app+0xc2>
	 {
		 LCD_Send_Character(0xff);
	 }
	  for(i=barSize;i<16;i++)
 182:	8a 01       	movw	r16, r20
 184:	05 c0       	rjmp	.+10     	; 0x190 <prec_bar_app+0xfe>
	  {
		  LCD_Send_Character(0x00);
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_Send_Character>

	 for(i=0;i<barSize;i++)
	 {
		 LCD_Send_Character(0xff);
	 }
	  for(i=barSize;i<16;i++)
 18c:	0f 5f       	subi	r16, 0xFF	; 255
 18e:	1f 4f       	sbci	r17, 0xFF	; 255
 190:	00 31       	cpi	r16, 0x10	; 16
 192:	11 05       	cpc	r17, r1
 194:	c4 f3       	brlt	.-16     	; 0x186 <prec_bar_app+0xf4>
	  {
		  LCD_Send_Character(0x00);
	  }
	LCD_gotoXY(1,6);
 196:	66 e0       	ldi	r22, 0x06	; 6
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 41 01 	call	0x282	; 0x282 <LCD_gotoXY>

	 
	}
 1a2:	93 cf       	rjmp	.-218    	; 0xca <prec_bar_app+0x38>

000001a4 <LCD_Kick>:
	}
}

void LCD_Kick(void)
{	
	LCD_CONTROL_PORT |= (1<<EN_switch);
 1a4:	88 b3       	in	r24, 0x18	; 24
 1a6:	84 60       	ori	r24, 0x04	; 4
 1a8:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1aa:	2f e7       	ldi	r18, 0x7F	; 127
 1ac:	88 e3       	ldi	r24, 0x38	; 56
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	21 50       	subi	r18, 0x01	; 1
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <LCD_Kick+0xc>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <LCD_Kick+0x16>
 1ba:	00 00       	nop
	_delay_ms(50);
	LCD_CONTROL_PORT &= ~(1<<EN_switch);
 1bc:	88 b3       	in	r24, 0x18	; 24
 1be:	8b 7f       	andi	r24, 0xFB	; 251
 1c0:	88 bb       	out	0x18, r24	; 24
 1c2:	08 95       	ret

000001c4 <LCD_Check_Is_Busy>:
	

}
void LCD_Check_Is_Busy(void)
{
	DataDir_LCD_PORT &= ~(0xFF << DATA_SHIFT);
 1c4:	81 b3       	in	r24, 0x11	; 17
 1c6:	11 ba       	out	0x11, r1	; 17
	LCD_CONTROL_PORT |= (1<<RW_switch);            //1: Read
 1c8:	88 b3       	in	r24, 0x18	; 24
 1ca:	82 60       	ori	r24, 0x02	; 2
 1cc:	88 bb       	out	0x18, r24	; 24
	LCD_CONTROL_PORT &= ~(1<<RS_switch);           // 0: Command Register
 1ce:	88 b3       	in	r24, 0x18	; 24
 1d0:	8e 7f       	andi	r24, 0xFE	; 254
 1d2:	88 bb       	out	0x18, r24	; 24
	
	LCD_Kick();
 1d4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Kick>
	
	DataDir_LCD_PORT |= (0xFF << DATA_SHIFT);
 1d8:	81 b3       	in	r24, 0x11	; 17
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	81 bb       	out	0x11, r24	; 17
	LCD_CONTROL_PORT &= ~(1<<RW_switch);       //0: Write
 1de:	88 b3       	in	r24, 0x18	; 24
 1e0:	8d 7f       	andi	r24, 0xFD	; 253
 1e2:	88 bb       	out	0x18, r24	; 24
 1e4:	08 95       	ret

000001e6 <LCD_Send_Command>:
{
	LCD_Send_Command(LCD_CLEAR);
}

void LCD_Send_Command(uint8_t command)
{
 1e6:	cf 93       	push	r28
 1e8:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
	LCD_Check_Is_Busy();
 1ea:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCD_Check_Is_Busy>
	
	LCD_PORT = command;
 1ee:	c2 bb       	out	0x12, r28	; 18
	LCD_CONTROL_PORT &= ~((1<<RW_switch) | (1<<RS_switch));
 1f0:	88 b3       	in	r24, 0x18	; 24
 1f2:	8c 7f       	andi	r24, 0xFC	; 252
 1f4:	88 bb       	out	0x18, r24	; 24
 1f6:	8f ec       	ldi	r24, 0xCF	; 207
 1f8:	97 e0       	ldi	r25, 0x07	; 7
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCD_Send_Command+0x14>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <LCD_Send_Command+0x1a>
 200:	00 00       	nop
	_delay_ms(1);
	LCD_Kick();
 202:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Kick>
	LCD_PORT = (LCD_PORT &0x0F) | (command << 4);
	LCD_CONTROL_PORT &= ~((1<<RW_switch) | (1<<RS_switch));
	LCD_Kick();
	#endif
	
}
 206:	cf 91       	pop	r28
 208:	08 95       	ret

0000020a <LCD_Clear_Screen>:
	
}

void LCD_Clear_Screen(void)
{
	LCD_Send_Command(LCD_CLEAR);
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_Send_Command>
 210:	08 95       	ret

00000212 <LCD_Init>:
 212:	8f e3       	ldi	r24, 0x3F	; 63
 214:	9c e9       	ldi	r25, 0x9C	; 156
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <LCD_Init+0x4>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <LCD_Init+0xa>
 21c:	00 00       	nop
#include "lcd_driver.h"

void LCD_Init(void)
{
	_delay_ms(20);
	DataDir_LCD_CONTROL |=  (1<<EN_switch | 1<<RW_switch | 1<<RS_switch);
 21e:	87 b3       	in	r24, 0x17	; 23
 220:	87 60       	ori	r24, 0x07	; 7
 222:	87 bb       	out	0x17, r24	; 23
	LCD_CONTROL_PORT    &= ~(1<<EN_switch | 1<<RW_switch | 1<<RS_switch);
 224:	88 b3       	in	r24, 0x18	; 24
 226:	88 7f       	andi	r24, 0xF8	; 248
 228:	88 bb       	out	0x18, r24	; 24


	
	DataDir_LCD_PORT = 0xFF;
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	81 bb       	out	0x11, r24	; 17
 22e:	8f e2       	ldi	r24, 0x2F	; 47
 230:	95 e7       	ldi	r25, 0x75	; 117
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <LCD_Init+0x20>
 236:	00 c0       	rjmp	.+0      	; 0x238 <LCD_Init+0x26>
 238:	00 00       	nop
	
	_delay_ms(15);
	LCD_Clear_Screen();
 23a:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_Clear_Screen>
	
	#ifdef EIGHT_BIT_MODE
	LCD_Send_Command(LCD_FUNCTION_8BIT_2LINES);
 23e:	88 e3       	ldi	r24, 0x38	; 56
 240:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_Send_Command>
	#ifdef FOUR_BIT_MODE
	LCD_Send_Command(0x02);
	LCD_Send_Command(LCD_FUNCTION_4BIT_2LINES);
	#endif
	
	LCD_Send_Command(LCD_ENTRY_MODE);
 244:	86 e0       	ldi	r24, 0x06	; 6
 246:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_Send_Command>
	LCD_Send_Command(LCD_BEGIN_AT_FIRST_RAW);
 24a:	80 e8       	ldi	r24, 0x80	; 128
 24c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_Send_Command>
	LCD_Send_Command(LCD_DISP_0N);
 250:	8c e0       	ldi	r24, 0x0C	; 12
 252:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_Send_Command>
 256:	08 95       	ret

00000258 <LCD_Send_Character>:
	LCD_Kick();
	#endif
	
}
void LCD_Send_Character(uint8_t character)
{
 258:	cf 93       	push	r28
 25a:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
	LCD_Check_Is_Busy();
 25c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCD_Check_Is_Busy>

	LCD_PORT = (character << DATA_SHIFT);
 260:	c2 bb       	out	0x12, r28	; 18
	LCD_CONTROL_PORT &= ~(1<<RW_switch);    //0: Write
 262:	88 b3       	in	r24, 0x18	; 24
 264:	8d 7f       	andi	r24, 0xFD	; 253
 266:	88 bb       	out	0x18, r24	; 24
	LCD_CONTROL_PORT |= (1<<RS_switch);     //1: Data Register
 268:	88 b3       	in	r24, 0x18	; 24
 26a:	81 60       	ori	r24, 0x01	; 1
 26c:	88 bb       	out	0x18, r24	; 24
 26e:	8f ec       	ldi	r24, 0xCF	; 207
 270:	97 e0       	ldi	r25, 0x07	; 7
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <LCD_Send_Character+0x1a>
 276:	00 c0       	rjmp	.+0      	; 0x278 <LCD_Send_Character+0x20>
 278:	00 00       	nop
	_delay_ms(1);
	LCD_Kick();
 27a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Kick>
	LCD_PORT = (LCD_PORT &0x0F) | (character << 4);
	LCD_CONTROL_PORT &= ~(1<<RW_switch);    //0: Write
	LCD_CONTROL_PORT |= (1<<RS_switch);     //1: Data Register
	LCD_Kick();
	#endif
}
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <LCD_gotoXY>:
	LCD_CONTROL_PORT &= ~(1<<RW_switch);       //0: Write
}

void LCD_gotoXY(uint16_t line , uint16_t position)
{
	if (line == 1) // line 1
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	91 05       	cpc	r25, r1
 286:	41 f4       	brne	.+16     	; 0x298 <LCD_gotoXY+0x16>
	{
		if(  position >= 0 && position < 16)
 288:	60 31       	cpi	r22, 0x10	; 16
 28a:	71 05       	cpc	r23, r1
 28c:	70 f4       	brcc	.+28     	; 0x2aa <LCD_gotoXY+0x28>
			LCD_Send_Command(LCD_BEGIN_AT_FIRST_RAW+position);
 28e:	80 e8       	ldi	r24, 0x80	; 128
 290:	86 0f       	add	r24, r22
 292:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_Send_Command>
 296:	08 95       	ret
	}
	else if (line == 2) //  line 2
 298:	02 97       	sbiw	r24, 0x02	; 2
 29a:	39 f4       	brne	.+14     	; 0x2aa <LCD_gotoXY+0x28>
	{
		if(  position >= 0 && position < 16)
 29c:	60 31       	cpi	r22, 0x10	; 16
 29e:	71 05       	cpc	r23, r1
 2a0:	20 f4       	brcc	.+8      	; 0x2aa <LCD_gotoXY+0x28>
			LCD_Send_Command(LCD_BEGIN_AT_SECOND_RAW+position);
 2a2:	80 ec       	ldi	r24, 0xC0	; 192
 2a4:	86 0f       	add	r24, r22
 2a6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_Send_Command>
 2aa:	08 95       	ret

000002ac <LCD_Send_String>:
	LCD_CONTROL_PORT |= (1<<RS_switch);     //1: Data Register
	LCD_Kick();
	#endif
}
void LCD_Send_String(char *string)
{
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	8c 01       	movw	r16, r24
	int count =0;
 2b6:	c0 e0       	ldi	r28, 0x00	; 0
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
	while(*string >0)
 2ba:	1c c0       	rjmp	.+56     	; 0x2f4 <LCD_Send_String+0x48>
	{
		count++;
 2bc:	21 96       	adiw	r28, 0x01	; 1
		LCD_Send_Character(*string++);
 2be:	0f 5f       	subi	r16, 0xFF	; 255
 2c0:	1f 4f       	sbci	r17, 0xFF	; 255
 2c2:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_Send_Character>
		if (count == 16)
 2c6:	c0 31       	cpi	r28, 0x10	; 16
 2c8:	d1 05       	cpc	r29, r1
 2ca:	39 f4       	brne	.+14     	; 0x2da <LCD_Send_String+0x2e>
		{
			LCD_gotoXY(2,0);
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 41 01 	call	0x282	; 0x282 <LCD_gotoXY>
 2d8:	0d c0       	rjmp	.+26     	; 0x2f4 <LCD_Send_String+0x48>
		}else if(count >= 32 )
 2da:	c0 32       	cpi	r28, 0x20	; 32
 2dc:	d1 05       	cpc	r29, r1
 2de:	54 f0       	brlt	.+20     	; 0x2f4 <LCD_Send_String+0x48>
		{
			LCD_Clear_Screen();
 2e0:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_Clear_Screen>
			LCD_gotoXY(1,0);
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 41 01 	call	0x282	; 0x282 <LCD_gotoXY>
			count =0;
 2f0:	c0 e0       	ldi	r28, 0x00	; 0
 2f2:	d0 e0       	ldi	r29, 0x00	; 0
	#endif
}
void LCD_Send_String(char *string)
{
	int count =0;
	while(*string >0)
 2f4:	f8 01       	movw	r30, r16
 2f6:	80 81       	ld	r24, Z
 2f8:	81 11       	cpse	r24, r1
 2fa:	e0 cf       	rjmp	.-64     	; 0x2bc <LCD_Send_String+0x10>
			LCD_Clear_Screen();
			LCD_gotoXY(1,0);
			count =0;
		}
	}
}
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	1f 91       	pop	r17
 302:	0f 91       	pop	r16
 304:	08 95       	ret

00000306 <LCD_Display_Number>:
		if(  position >= 0 && position < 16)
			LCD_Send_Command(LCD_BEGIN_AT_SECOND_RAW+position);
	}
}
void LCD_Display_Number(unsigned int Number)
{
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	00 d0       	rcall	.+0      	; 0x310 <LCD_Display_Number+0xa>
 310:	00 d0       	rcall	.+0      	; 0x312 <LCD_Display_Number+0xc>
 312:	00 d0       	rcall	.+0      	; 0x314 <LCD_Display_Number+0xe>
 314:	cd b7       	in	r28, 0x3d	; 61
 316:	de b7       	in	r29, 0x3e	; 62
	char str[6];
	sprintf(str,"%d",Number); //adjust the formatting to your liking
 318:	9f 93       	push	r25
 31a:	8f 93       	push	r24
 31c:	87 e6       	ldi	r24, 0x67	; 103
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	9f 93       	push	r25
 322:	8f 93       	push	r24
 324:	8e 01       	movw	r16, r28
 326:	0f 5f       	subi	r16, 0xFF	; 255
 328:	1f 4f       	sbci	r17, 0xFF	; 255
 32a:	1f 93       	push	r17
 32c:	0f 93       	push	r16
 32e:	0e 94 df 02 	call	0x5be	; 0x5be <sprintf>

	LCD_Send_String(str);
 332:	c8 01       	movw	r24, r16
 334:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_Send_String>
}
 338:	0f 90       	pop	r0
 33a:	0f 90       	pop	r0
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
 342:	0f 90       	pop	r0
 344:	26 96       	adiw	r28, 0x06	; 6
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	f8 94       	cli
 34a:	de bf       	out	0x3e, r29	; 62
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	cd bf       	out	0x3d, r28	; 61
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	0f 91       	pop	r16
 358:	08 95       	ret

0000035a <main>:
#include "APP/LM35/LM35.h"
#include "APP/PREC_BAR/prec_bar.h"

int main(void)
{
	prec_bar_app();
 35a:	0e 94 49 00 	call	0x92	; 0x92 <prec_bar_app>
	//LM35_temperature_sensor();
}
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	08 95       	ret

00000364 <MCAL_ADC_Init>:


void MCAL_ADC_DeInit(void)
{
	ADMUX  = 0x00;
	ADCSRA = 0x00;
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	ec 01       	movw	r28, r24
 36a:	87 e0       	ldi	r24, 0x07	; 7
 36c:	fe 01       	movw	r30, r28
 36e:	a4 e8       	ldi	r26, 0x84	; 132
 370:	b0 e0       	ldi	r27, 0x00	; 0
 372:	01 90       	ld	r0, Z+
 374:	0d 92       	st	X+, r0
 376:	8a 95       	dec	r24
 378:	e1 f7       	brne	.-8      	; 0x372 <MCAL_ADC_Init+0xe>
 37a:	96 b1       	in	r25, 0x06	; 6
 37c:	88 81       	ld	r24, Y
 37e:	89 2b       	or	r24, r25
 380:	86 b9       	out	0x06, r24	; 6
 382:	97 b1       	in	r25, 0x07	; 7
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	89 2b       	or	r24, r25
 388:	87 b9       	out	0x07, r24	; 7
 38a:	97 b1       	in	r25, 0x07	; 7
 38c:	8b 81       	ldd	r24, Y+3	; 0x03
 38e:	89 2b       	or	r24, r25
 390:	87 b9       	out	0x07, r24	; 7
 392:	97 b1       	in	r25, 0x07	; 7
 394:	8a 81       	ldd	r24, Y+2	; 0x02
 396:	89 2b       	or	r24, r25
 398:	87 b9       	out	0x07, r24	; 7
 39a:	96 b1       	in	r25, 0x06	; 6
 39c:	8c 81       	ldd	r24, Y+4	; 0x04
 39e:	89 2b       	or	r24, r25
 3a0:	86 b9       	out	0x06, r24	; 6
 3a2:	8c 81       	ldd	r24, Y+4	; 0x04
 3a4:	88 30       	cpi	r24, 0x08	; 8
 3a6:	09 f4       	brne	.+2      	; 0x3aa <MCAL_ADC_Init+0x46>
 3a8:	78 94       	sei
 3aa:	86 b1       	in	r24, 0x06	; 6
 3ac:	80 68       	ori	r24, 0x80	; 128
 3ae:	86 b9       	out	0x06, r24	; 6
 3b0:	28 81       	ld	r18, Y
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	46 b1       	in	r20, 0x06	; 6
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <MCAL_ADC_Init+0x5c>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	4a 95       	dec	r20
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <MCAL_ADC_Init+0x58>
 3c4:	99 27       	eor	r25, r25
 3c6:	28 17       	cp	r18, r24
 3c8:	39 07       	cpc	r19, r25
 3ca:	19 f4       	brne	.+6      	; 0x3d2 <MCAL_ADC_Init+0x6e>
 3cc:	86 b1       	in	r24, 0x06	; 6
 3ce:	80 64       	ori	r24, 0x40	; 64
 3d0:	86 b9       	out	0x06, r24	; 6
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	08 95       	ret

000003d8 <MCAL_ADC_GetConversionResult>:
}

void MCAL_ADC_GetConversionResult(Channel_Select_t channel , uint16_t * result  , Polling_Mechanism_t polling)
{
	
	ADMUX &= ~(0x1F);
 3d8:	97 b1       	in	r25, 0x07	; 7
 3da:	90 7e       	andi	r25, 0xE0	; 224
 3dc:	97 b9       	out	0x07, r25	; 7
	
	
	// 1. select channel 
	ADMUX |= (uint8_t)channel;
 3de:	97 b1       	in	r25, 0x07	; 7
 3e0:	98 2b       	or	r25, r24
 3e2:	97 b9       	out	0x07, r25	; 7
	CLEARBIT(DDRA,channel);
 3e4:	5a b3       	in	r21, 0x1a	; 26
 3e6:	21 e0       	ldi	r18, 0x01	; 1
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	f9 01       	movw	r30, r18
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <MCAL_ADC_GetConversionResult+0x1a>
 3ee:	ee 0f       	add	r30, r30
 3f0:	ff 1f       	adc	r31, r31
 3f2:	8a 95       	dec	r24
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <MCAL_ADC_GetConversionResult+0x16>
 3f6:	cf 01       	movw	r24, r30
 3f8:	80 95       	com	r24
 3fa:	85 23       	and	r24, r21
 3fc:	8a bb       	out	0x1a, r24	; 26
	
	// 2. start conversion
	if (G_ADC_ConFig.ADC_Mode == ADC_Mode_SINGLE_CONVERSION)
 3fe:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <G_ADC_ConFig>
 402:	81 11       	cpse	r24, r1
 404:	03 c0       	rjmp	.+6      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
	{
		SETBIT(ADCSRA , ADSC);
 406:	86 b1       	in	r24, 0x06	; 6
 408:	80 64       	ori	r24, 0x40	; 64
 40a:	86 b9       	out	0x06, r24	; 6
	}
	
	// 3. wait until  ADC conversion completes and the Data Registers are updated   => ADCSRA >> ADIF flag
	if (polling == Polling_ENABLE)
 40c:	41 11       	cpse	r20, r1
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
	{
		while(!READBIT(ADCSRA , ADIF));
 410:	34 9b       	sbis	0x06, 4	; 6
 412:	fe cf       	rjmp	.-4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
	}
	
	
	// 4. read conversion data
	if (G_ADC_ConFig.ADC_Result_Presentation == ADC_Result_Presentation_RIGHT)
 414:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <G_ADC_ConFig+0x3>
 418:	81 11       	cpse	r24, r1
 41a:	0b c0       	rjmp	.+22     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
	{
		*result = (ADCL | ((ADCH & (0x03)) << 8));
 41c:	24 b1       	in	r18, 0x04	; 4
 41e:	85 b1       	in	r24, 0x05	; 5
 420:	83 70       	andi	r24, 0x03	; 3
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	98 2f       	mov	r25, r24
 426:	88 27       	eor	r24, r24
 428:	82 2b       	or	r24, r18
 42a:	fb 01       	movw	r30, r22
 42c:	91 83       	std	Z+1, r25	; 0x01
 42e:	80 83       	st	Z, r24
 430:	11 c0       	rjmp	.+34     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
	}else if (G_ADC_ConFig.ADC_Result_Presentation == ADC_Result_Presentation_LEFT)
 432:	80 32       	cpi	r24, 0x20	; 32
 434:	79 f4       	brne	.+30     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
	{
		*result = (((ADCL & 0xC0) >> 6)|(ADCH<<2));
 436:	24 b1       	in	r18, 0x04	; 4
 438:	22 95       	swap	r18
 43a:	26 95       	lsr	r18
 43c:	26 95       	lsr	r18
 43e:	23 70       	andi	r18, 0x03	; 3
 440:	85 b1       	in	r24, 0x05	; 5
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	82 2b       	or	r24, r18
 44e:	fb 01       	movw	r30, r22
 450:	91 83       	std	Z+1, r25	; 0x01
 452:	80 83       	st	Z, r24
	}


	// 5. Clear ADIF flag
	CLEARBIT(ADCSRA, ADIF);
 454:	86 b1       	in	r24, 0x06	; 6
 456:	8f 7e       	andi	r24, 0xEF	; 239
 458:	86 b9       	out	0x06, r24	; 6
 45a:	08 95       	ret

0000045c <__vector_16>:

/* ============================================================================ */
/* ================================== IRQ Handlers ============================ */
/* ============================================================================ */
ISR(ADC_vect)
{
 45c:	1f 92       	push	r1
 45e:	0f 92       	push	r0
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	0f 92       	push	r0
 464:	11 24       	eor	r1, r1
 466:	2f 93       	push	r18
 468:	3f 93       	push	r19
 46a:	4f 93       	push	r20
 46c:	5f 93       	push	r21
 46e:	6f 93       	push	r22
 470:	7f 93       	push	r23
 472:	8f 93       	push	r24
 474:	9f 93       	push	r25
 476:	af 93       	push	r26
 478:	bf 93       	push	r27
 47a:	ef 93       	push	r30
 47c:	ff 93       	push	r31
	G_ADC_ConFig.P_IRQ_CallBack();
 47e:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <G_ADC_ConFig+0x5>
 482:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <G_ADC_ConFig+0x6>
 486:	09 95       	icall
 488:	ff 91       	pop	r31
 48a:	ef 91       	pop	r30
 48c:	bf 91       	pop	r27
 48e:	af 91       	pop	r26
 490:	9f 91       	pop	r25
 492:	8f 91       	pop	r24
 494:	7f 91       	pop	r23
 496:	6f 91       	pop	r22
 498:	5f 91       	pop	r21
 49a:	4f 91       	pop	r20
 49c:	3f 91       	pop	r19
 49e:	2f 91       	pop	r18
 4a0:	0f 90       	pop	r0
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	0f 90       	pop	r0
 4a6:	1f 90       	pop	r1
 4a8:	18 95       	reti

000004aa <__vector_11>:
/* ============================================================================ */
/* ================================== IRQ Handlers ============================ */
/* ============================================================================ */

ISR(TIMER0_OVF_vect)
{
 4aa:	1f 92       	push	r1
 4ac:	0f 92       	push	r0
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	0f 92       	push	r0
 4b2:	11 24       	eor	r1, r1
 4b4:	2f 93       	push	r18
 4b6:	3f 93       	push	r19
 4b8:	4f 93       	push	r20
 4ba:	5f 93       	push	r21
 4bc:	6f 93       	push	r22
 4be:	7f 93       	push	r23
 4c0:	8f 93       	push	r24
 4c2:	9f 93       	push	r25
 4c4:	af 93       	push	r26
 4c6:	bf 93       	push	r27
 4c8:	ef 93       	push	r30
 4ca:	ff 93       	push	r31
    GP_IRQ_CallBack();
 4cc:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <__data_end>
 4d0:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <__data_end+0x1>
 4d4:	09 95       	icall
}
 4d6:	ff 91       	pop	r31
 4d8:	ef 91       	pop	r30
 4da:	bf 91       	pop	r27
 4dc:	af 91       	pop	r26
 4de:	9f 91       	pop	r25
 4e0:	8f 91       	pop	r24
 4e2:	7f 91       	pop	r23
 4e4:	6f 91       	pop	r22
 4e6:	5f 91       	pop	r21
 4e8:	4f 91       	pop	r20
 4ea:	3f 91       	pop	r19
 4ec:	2f 91       	pop	r18
 4ee:	0f 90       	pop	r0
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	0f 90       	pop	r0
 4f4:	1f 90       	pop	r1
 4f6:	18 95       	reti

000004f8 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 4f8:	1f 92       	push	r1
 4fa:	0f 92       	push	r0
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	0f 92       	push	r0
 500:	11 24       	eor	r1, r1
 502:	2f 93       	push	r18
 504:	3f 93       	push	r19
 506:	4f 93       	push	r20
 508:	5f 93       	push	r21
 50a:	6f 93       	push	r22
 50c:	7f 93       	push	r23
 50e:	8f 93       	push	r24
 510:	9f 93       	push	r25
 512:	af 93       	push	r26
 514:	bf 93       	push	r27
 516:	ef 93       	push	r30
 518:	ff 93       	push	r31
    GP_IRQ_CallBack();
 51a:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <__data_end>
 51e:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <__data_end+0x1>
 522:	09 95       	icall
 524:	ff 91       	pop	r31
 526:	ef 91       	pop	r30
 528:	bf 91       	pop	r27
 52a:	af 91       	pop	r26
 52c:	9f 91       	pop	r25
 52e:	8f 91       	pop	r24
 530:	7f 91       	pop	r23
 532:	6f 91       	pop	r22
 534:	5f 91       	pop	r21
 536:	4f 91       	pop	r20
 538:	3f 91       	pop	r19
 53a:	2f 91       	pop	r18
 53c:	0f 90       	pop	r0
 53e:	0f be       	out	0x3f, r0	; 63
 540:	0f 90       	pop	r0
 542:	1f 90       	pop	r1
 544:	18 95       	reti

00000546 <__udivmodsi4>:
 546:	a1 e2       	ldi	r26, 0x21	; 33
 548:	1a 2e       	mov	r1, r26
 54a:	aa 1b       	sub	r26, r26
 54c:	bb 1b       	sub	r27, r27
 54e:	fd 01       	movw	r30, r26
 550:	0d c0       	rjmp	.+26     	; 0x56c <__udivmodsi4_ep>

00000552 <__udivmodsi4_loop>:
 552:	aa 1f       	adc	r26, r26
 554:	bb 1f       	adc	r27, r27
 556:	ee 1f       	adc	r30, r30
 558:	ff 1f       	adc	r31, r31
 55a:	a2 17       	cp	r26, r18
 55c:	b3 07       	cpc	r27, r19
 55e:	e4 07       	cpc	r30, r20
 560:	f5 07       	cpc	r31, r21
 562:	20 f0       	brcs	.+8      	; 0x56c <__udivmodsi4_ep>
 564:	a2 1b       	sub	r26, r18
 566:	b3 0b       	sbc	r27, r19
 568:	e4 0b       	sbc	r30, r20
 56a:	f5 0b       	sbc	r31, r21

0000056c <__udivmodsi4_ep>:
 56c:	66 1f       	adc	r22, r22
 56e:	77 1f       	adc	r23, r23
 570:	88 1f       	adc	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	1a 94       	dec	r1
 576:	69 f7       	brne	.-38     	; 0x552 <__udivmodsi4_loop>
 578:	60 95       	com	r22
 57a:	70 95       	com	r23
 57c:	80 95       	com	r24
 57e:	90 95       	com	r25
 580:	9b 01       	movw	r18, r22
 582:	ac 01       	movw	r20, r24
 584:	bd 01       	movw	r22, r26
 586:	cf 01       	movw	r24, r30
 588:	08 95       	ret

0000058a <__muluhisi3>:
 58a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__umulhisi3>
 58e:	a5 9f       	mul	r26, r21
 590:	90 0d       	add	r25, r0
 592:	b4 9f       	mul	r27, r20
 594:	90 0d       	add	r25, r0
 596:	a4 9f       	mul	r26, r20
 598:	80 0d       	add	r24, r0
 59a:	91 1d       	adc	r25, r1
 59c:	11 24       	eor	r1, r1
 59e:	08 95       	ret

000005a0 <__umulhisi3>:
 5a0:	a2 9f       	mul	r26, r18
 5a2:	b0 01       	movw	r22, r0
 5a4:	b3 9f       	mul	r27, r19
 5a6:	c0 01       	movw	r24, r0
 5a8:	a3 9f       	mul	r26, r19
 5aa:	70 0d       	add	r23, r0
 5ac:	81 1d       	adc	r24, r1
 5ae:	11 24       	eor	r1, r1
 5b0:	91 1d       	adc	r25, r1
 5b2:	b2 9f       	mul	r27, r18
 5b4:	70 0d       	add	r23, r0
 5b6:	81 1d       	adc	r24, r1
 5b8:	11 24       	eor	r1, r1
 5ba:	91 1d       	adc	r25, r1
 5bc:	08 95       	ret

000005be <sprintf>:
 5be:	ae e0       	ldi	r26, 0x0E	; 14
 5c0:	b0 e0       	ldi	r27, 0x00	; 0
 5c2:	e5 ee       	ldi	r30, 0xE5	; 229
 5c4:	f2 e0       	ldi	r31, 0x02	; 2
 5c6:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <__prologue_saves__+0x1c>
 5ca:	0d 89       	ldd	r16, Y+21	; 0x15
 5cc:	1e 89       	ldd	r17, Y+22	; 0x16
 5ce:	86 e0       	ldi	r24, 0x06	; 6
 5d0:	8c 83       	std	Y+4, r24	; 0x04
 5d2:	1a 83       	std	Y+2, r17	; 0x02
 5d4:	09 83       	std	Y+1, r16	; 0x01
 5d6:	8f ef       	ldi	r24, 0xFF	; 255
 5d8:	9f e7       	ldi	r25, 0x7F	; 127
 5da:	9e 83       	std	Y+6, r25	; 0x06
 5dc:	8d 83       	std	Y+5, r24	; 0x05
 5de:	ae 01       	movw	r20, r28
 5e0:	47 5e       	subi	r20, 0xE7	; 231
 5e2:	5f 4f       	sbci	r21, 0xFF	; 255
 5e4:	6f 89       	ldd	r22, Y+23	; 0x17
 5e6:	78 8d       	ldd	r23, Y+24	; 0x18
 5e8:	ce 01       	movw	r24, r28
 5ea:	01 96       	adiw	r24, 0x01	; 1
 5ec:	0e 94 01 03 	call	0x602	; 0x602 <vfprintf>
 5f0:	ef 81       	ldd	r30, Y+7	; 0x07
 5f2:	f8 85       	ldd	r31, Y+8	; 0x08
 5f4:	e0 0f       	add	r30, r16
 5f6:	f1 1f       	adc	r31, r17
 5f8:	10 82       	st	Z, r1
 5fa:	2e 96       	adiw	r28, 0x0e	; 14
 5fc:	e4 e0       	ldi	r30, 0x04	; 4
 5fe:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__epilogue_restores__+0x1c>

00000602 <vfprintf>:
 602:	ab e0       	ldi	r26, 0x0B	; 11
 604:	b0 e0       	ldi	r27, 0x00	; 0
 606:	e7 e0       	ldi	r30, 0x07	; 7
 608:	f3 e0       	ldi	r31, 0x03	; 3
 60a:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__prologue_saves__>
 60e:	6c 01       	movw	r12, r24
 610:	7b 01       	movw	r14, r22
 612:	8a 01       	movw	r16, r20
 614:	fc 01       	movw	r30, r24
 616:	17 82       	std	Z+7, r1	; 0x07
 618:	16 82       	std	Z+6, r1	; 0x06
 61a:	83 81       	ldd	r24, Z+3	; 0x03
 61c:	81 ff       	sbrs	r24, 1
 61e:	cc c1       	rjmp	.+920    	; 0x9b8 <__stack+0x159>
 620:	ce 01       	movw	r24, r28
 622:	01 96       	adiw	r24, 0x01	; 1
 624:	3c 01       	movw	r6, r24
 626:	f6 01       	movw	r30, r12
 628:	93 81       	ldd	r25, Z+3	; 0x03
 62a:	f7 01       	movw	r30, r14
 62c:	93 fd       	sbrc	r25, 3
 62e:	85 91       	lpm	r24, Z+
 630:	93 ff       	sbrs	r25, 3
 632:	81 91       	ld	r24, Z+
 634:	7f 01       	movw	r14, r30
 636:	88 23       	and	r24, r24
 638:	09 f4       	brne	.+2      	; 0x63c <vfprintf+0x3a>
 63a:	ba c1       	rjmp	.+884    	; 0x9b0 <__stack+0x151>
 63c:	85 32       	cpi	r24, 0x25	; 37
 63e:	39 f4       	brne	.+14     	; 0x64e <vfprintf+0x4c>
 640:	93 fd       	sbrc	r25, 3
 642:	85 91       	lpm	r24, Z+
 644:	93 ff       	sbrs	r25, 3
 646:	81 91       	ld	r24, Z+
 648:	7f 01       	movw	r14, r30
 64a:	85 32       	cpi	r24, 0x25	; 37
 64c:	29 f4       	brne	.+10     	; 0x658 <vfprintf+0x56>
 64e:	b6 01       	movw	r22, r12
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <fputc>
 656:	e7 cf       	rjmp	.-50     	; 0x626 <vfprintf+0x24>
 658:	91 2c       	mov	r9, r1
 65a:	21 2c       	mov	r2, r1
 65c:	31 2c       	mov	r3, r1
 65e:	ff e1       	ldi	r31, 0x1F	; 31
 660:	f3 15       	cp	r31, r3
 662:	d8 f0       	brcs	.+54     	; 0x69a <vfprintf+0x98>
 664:	8b 32       	cpi	r24, 0x2B	; 43
 666:	79 f0       	breq	.+30     	; 0x686 <vfprintf+0x84>
 668:	38 f4       	brcc	.+14     	; 0x678 <vfprintf+0x76>
 66a:	80 32       	cpi	r24, 0x20	; 32
 66c:	79 f0       	breq	.+30     	; 0x68c <vfprintf+0x8a>
 66e:	83 32       	cpi	r24, 0x23	; 35
 670:	a1 f4       	brne	.+40     	; 0x69a <vfprintf+0x98>
 672:	23 2d       	mov	r18, r3
 674:	20 61       	ori	r18, 0x10	; 16
 676:	1d c0       	rjmp	.+58     	; 0x6b2 <vfprintf+0xb0>
 678:	8d 32       	cpi	r24, 0x2D	; 45
 67a:	61 f0       	breq	.+24     	; 0x694 <vfprintf+0x92>
 67c:	80 33       	cpi	r24, 0x30	; 48
 67e:	69 f4       	brne	.+26     	; 0x69a <vfprintf+0x98>
 680:	23 2d       	mov	r18, r3
 682:	21 60       	ori	r18, 0x01	; 1
 684:	16 c0       	rjmp	.+44     	; 0x6b2 <vfprintf+0xb0>
 686:	83 2d       	mov	r24, r3
 688:	82 60       	ori	r24, 0x02	; 2
 68a:	38 2e       	mov	r3, r24
 68c:	e3 2d       	mov	r30, r3
 68e:	e4 60       	ori	r30, 0x04	; 4
 690:	3e 2e       	mov	r3, r30
 692:	2a c0       	rjmp	.+84     	; 0x6e8 <vfprintf+0xe6>
 694:	f3 2d       	mov	r31, r3
 696:	f8 60       	ori	r31, 0x08	; 8
 698:	1d c0       	rjmp	.+58     	; 0x6d4 <vfprintf+0xd2>
 69a:	37 fc       	sbrc	r3, 7
 69c:	2d c0       	rjmp	.+90     	; 0x6f8 <vfprintf+0xf6>
 69e:	20 ed       	ldi	r18, 0xD0	; 208
 6a0:	28 0f       	add	r18, r24
 6a2:	2a 30       	cpi	r18, 0x0A	; 10
 6a4:	40 f0       	brcs	.+16     	; 0x6b6 <vfprintf+0xb4>
 6a6:	8e 32       	cpi	r24, 0x2E	; 46
 6a8:	b9 f4       	brne	.+46     	; 0x6d8 <vfprintf+0xd6>
 6aa:	36 fc       	sbrc	r3, 6
 6ac:	81 c1       	rjmp	.+770    	; 0x9b0 <__stack+0x151>
 6ae:	23 2d       	mov	r18, r3
 6b0:	20 64       	ori	r18, 0x40	; 64
 6b2:	32 2e       	mov	r3, r18
 6b4:	19 c0       	rjmp	.+50     	; 0x6e8 <vfprintf+0xe6>
 6b6:	36 fe       	sbrs	r3, 6
 6b8:	06 c0       	rjmp	.+12     	; 0x6c6 <vfprintf+0xc4>
 6ba:	8a e0       	ldi	r24, 0x0A	; 10
 6bc:	98 9e       	mul	r9, r24
 6be:	20 0d       	add	r18, r0
 6c0:	11 24       	eor	r1, r1
 6c2:	92 2e       	mov	r9, r18
 6c4:	11 c0       	rjmp	.+34     	; 0x6e8 <vfprintf+0xe6>
 6c6:	ea e0       	ldi	r30, 0x0A	; 10
 6c8:	2e 9e       	mul	r2, r30
 6ca:	20 0d       	add	r18, r0
 6cc:	11 24       	eor	r1, r1
 6ce:	22 2e       	mov	r2, r18
 6d0:	f3 2d       	mov	r31, r3
 6d2:	f0 62       	ori	r31, 0x20	; 32
 6d4:	3f 2e       	mov	r3, r31
 6d6:	08 c0       	rjmp	.+16     	; 0x6e8 <vfprintf+0xe6>
 6d8:	8c 36       	cpi	r24, 0x6C	; 108
 6da:	21 f4       	brne	.+8      	; 0x6e4 <vfprintf+0xe2>
 6dc:	83 2d       	mov	r24, r3
 6de:	80 68       	ori	r24, 0x80	; 128
 6e0:	38 2e       	mov	r3, r24
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <vfprintf+0xe6>
 6e4:	88 36       	cpi	r24, 0x68	; 104
 6e6:	41 f4       	brne	.+16     	; 0x6f8 <vfprintf+0xf6>
 6e8:	f7 01       	movw	r30, r14
 6ea:	93 fd       	sbrc	r25, 3
 6ec:	85 91       	lpm	r24, Z+
 6ee:	93 ff       	sbrs	r25, 3
 6f0:	81 91       	ld	r24, Z+
 6f2:	7f 01       	movw	r14, r30
 6f4:	81 11       	cpse	r24, r1
 6f6:	b3 cf       	rjmp	.-154    	; 0x65e <vfprintf+0x5c>
 6f8:	98 2f       	mov	r25, r24
 6fa:	9f 7d       	andi	r25, 0xDF	; 223
 6fc:	95 54       	subi	r25, 0x45	; 69
 6fe:	93 30       	cpi	r25, 0x03	; 3
 700:	28 f4       	brcc	.+10     	; 0x70c <vfprintf+0x10a>
 702:	0c 5f       	subi	r16, 0xFC	; 252
 704:	1f 4f       	sbci	r17, 0xFF	; 255
 706:	9f e3       	ldi	r25, 0x3F	; 63
 708:	99 83       	std	Y+1, r25	; 0x01
 70a:	0d c0       	rjmp	.+26     	; 0x726 <vfprintf+0x124>
 70c:	83 36       	cpi	r24, 0x63	; 99
 70e:	31 f0       	breq	.+12     	; 0x71c <vfprintf+0x11a>
 710:	83 37       	cpi	r24, 0x73	; 115
 712:	71 f0       	breq	.+28     	; 0x730 <vfprintf+0x12e>
 714:	83 35       	cpi	r24, 0x53	; 83
 716:	09 f0       	breq	.+2      	; 0x71a <vfprintf+0x118>
 718:	59 c0       	rjmp	.+178    	; 0x7cc <vfprintf+0x1ca>
 71a:	21 c0       	rjmp	.+66     	; 0x75e <vfprintf+0x15c>
 71c:	f8 01       	movw	r30, r16
 71e:	80 81       	ld	r24, Z
 720:	89 83       	std	Y+1, r24	; 0x01
 722:	0e 5f       	subi	r16, 0xFE	; 254
 724:	1f 4f       	sbci	r17, 0xFF	; 255
 726:	88 24       	eor	r8, r8
 728:	83 94       	inc	r8
 72a:	91 2c       	mov	r9, r1
 72c:	53 01       	movw	r10, r6
 72e:	13 c0       	rjmp	.+38     	; 0x756 <vfprintf+0x154>
 730:	28 01       	movw	r4, r16
 732:	f2 e0       	ldi	r31, 0x02	; 2
 734:	4f 0e       	add	r4, r31
 736:	51 1c       	adc	r5, r1
 738:	f8 01       	movw	r30, r16
 73a:	a0 80       	ld	r10, Z
 73c:	b1 80       	ldd	r11, Z+1	; 0x01
 73e:	36 fe       	sbrs	r3, 6
 740:	03 c0       	rjmp	.+6      	; 0x748 <vfprintf+0x146>
 742:	69 2d       	mov	r22, r9
 744:	70 e0       	ldi	r23, 0x00	; 0
 746:	02 c0       	rjmp	.+4      	; 0x74c <vfprintf+0x14a>
 748:	6f ef       	ldi	r22, 0xFF	; 255
 74a:	7f ef       	ldi	r23, 0xFF	; 255
 74c:	c5 01       	movw	r24, r10
 74e:	0e 94 ed 04 	call	0x9da	; 0x9da <strnlen>
 752:	4c 01       	movw	r8, r24
 754:	82 01       	movw	r16, r4
 756:	f3 2d       	mov	r31, r3
 758:	ff 77       	andi	r31, 0x7F	; 127
 75a:	3f 2e       	mov	r3, r31
 75c:	16 c0       	rjmp	.+44     	; 0x78a <vfprintf+0x188>
 75e:	28 01       	movw	r4, r16
 760:	22 e0       	ldi	r18, 0x02	; 2
 762:	42 0e       	add	r4, r18
 764:	51 1c       	adc	r5, r1
 766:	f8 01       	movw	r30, r16
 768:	a0 80       	ld	r10, Z
 76a:	b1 80       	ldd	r11, Z+1	; 0x01
 76c:	36 fe       	sbrs	r3, 6
 76e:	03 c0       	rjmp	.+6      	; 0x776 <vfprintf+0x174>
 770:	69 2d       	mov	r22, r9
 772:	70 e0       	ldi	r23, 0x00	; 0
 774:	02 c0       	rjmp	.+4      	; 0x77a <vfprintf+0x178>
 776:	6f ef       	ldi	r22, 0xFF	; 255
 778:	7f ef       	ldi	r23, 0xFF	; 255
 77a:	c5 01       	movw	r24, r10
 77c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <strnlen_P>
 780:	4c 01       	movw	r8, r24
 782:	f3 2d       	mov	r31, r3
 784:	f0 68       	ori	r31, 0x80	; 128
 786:	3f 2e       	mov	r3, r31
 788:	82 01       	movw	r16, r4
 78a:	33 fc       	sbrc	r3, 3
 78c:	1b c0       	rjmp	.+54     	; 0x7c4 <vfprintf+0x1c2>
 78e:	82 2d       	mov	r24, r2
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	88 16       	cp	r8, r24
 794:	99 06       	cpc	r9, r25
 796:	b0 f4       	brcc	.+44     	; 0x7c4 <vfprintf+0x1c2>
 798:	b6 01       	movw	r22, r12
 79a:	80 e2       	ldi	r24, 0x20	; 32
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <fputc>
 7a2:	2a 94       	dec	r2
 7a4:	f4 cf       	rjmp	.-24     	; 0x78e <vfprintf+0x18c>
 7a6:	f5 01       	movw	r30, r10
 7a8:	37 fc       	sbrc	r3, 7
 7aa:	85 91       	lpm	r24, Z+
 7ac:	37 fe       	sbrs	r3, 7
 7ae:	81 91       	ld	r24, Z+
 7b0:	5f 01       	movw	r10, r30
 7b2:	b6 01       	movw	r22, r12
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <fputc>
 7ba:	21 10       	cpse	r2, r1
 7bc:	2a 94       	dec	r2
 7be:	21 e0       	ldi	r18, 0x01	; 1
 7c0:	82 1a       	sub	r8, r18
 7c2:	91 08       	sbc	r9, r1
 7c4:	81 14       	cp	r8, r1
 7c6:	91 04       	cpc	r9, r1
 7c8:	71 f7       	brne	.-36     	; 0x7a6 <vfprintf+0x1a4>
 7ca:	e8 c0       	rjmp	.+464    	; 0x99c <__stack+0x13d>
 7cc:	84 36       	cpi	r24, 0x64	; 100
 7ce:	11 f0       	breq	.+4      	; 0x7d4 <vfprintf+0x1d2>
 7d0:	89 36       	cpi	r24, 0x69	; 105
 7d2:	41 f5       	brne	.+80     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 7d4:	f8 01       	movw	r30, r16
 7d6:	37 fe       	sbrs	r3, 7
 7d8:	07 c0       	rjmp	.+14     	; 0x7e8 <vfprintf+0x1e6>
 7da:	60 81       	ld	r22, Z
 7dc:	71 81       	ldd	r23, Z+1	; 0x01
 7de:	82 81       	ldd	r24, Z+2	; 0x02
 7e0:	93 81       	ldd	r25, Z+3	; 0x03
 7e2:	0c 5f       	subi	r16, 0xFC	; 252
 7e4:	1f 4f       	sbci	r17, 0xFF	; 255
 7e6:	08 c0       	rjmp	.+16     	; 0x7f8 <vfprintf+0x1f6>
 7e8:	60 81       	ld	r22, Z
 7ea:	71 81       	ldd	r23, Z+1	; 0x01
 7ec:	07 2e       	mov	r0, r23
 7ee:	00 0c       	add	r0, r0
 7f0:	88 0b       	sbc	r24, r24
 7f2:	99 0b       	sbc	r25, r25
 7f4:	0e 5f       	subi	r16, 0xFE	; 254
 7f6:	1f 4f       	sbci	r17, 0xFF	; 255
 7f8:	f3 2d       	mov	r31, r3
 7fa:	ff 76       	andi	r31, 0x6F	; 111
 7fc:	3f 2e       	mov	r3, r31
 7fe:	97 ff       	sbrs	r25, 7
 800:	09 c0       	rjmp	.+18     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 802:	90 95       	com	r25
 804:	80 95       	com	r24
 806:	70 95       	com	r23
 808:	61 95       	neg	r22
 80a:	7f 4f       	sbci	r23, 0xFF	; 255
 80c:	8f 4f       	sbci	r24, 0xFF	; 255
 80e:	9f 4f       	sbci	r25, 0xFF	; 255
 810:	f0 68       	ori	r31, 0x80	; 128
 812:	3f 2e       	mov	r3, r31
 814:	2a e0       	ldi	r18, 0x0A	; 10
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	a3 01       	movw	r20, r6
 81a:	0e 94 34 05 	call	0xa68	; 0xa68 <__ultoa_invert>
 81e:	88 2e       	mov	r8, r24
 820:	86 18       	sub	r8, r6
 822:	45 c0       	rjmp	.+138    	; 0x8ae <__stack+0x4f>
 824:	85 37       	cpi	r24, 0x75	; 117
 826:	31 f4       	brne	.+12     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 828:	23 2d       	mov	r18, r3
 82a:	2f 7e       	andi	r18, 0xEF	; 239
 82c:	b2 2e       	mov	r11, r18
 82e:	2a e0       	ldi	r18, 0x0A	; 10
 830:	30 e0       	ldi	r19, 0x00	; 0
 832:	25 c0       	rjmp	.+74     	; 0x87e <__stack+0x1f>
 834:	93 2d       	mov	r25, r3
 836:	99 7f       	andi	r25, 0xF9	; 249
 838:	b9 2e       	mov	r11, r25
 83a:	8f 36       	cpi	r24, 0x6F	; 111
 83c:	c1 f0       	breq	.+48     	; 0x86e <__stack+0xf>
 83e:	18 f4       	brcc	.+6      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 840:	88 35       	cpi	r24, 0x58	; 88
 842:	79 f0       	breq	.+30     	; 0x862 <__stack+0x3>
 844:	b5 c0       	rjmp	.+362    	; 0x9b0 <__stack+0x151>
 846:	80 37       	cpi	r24, 0x70	; 112
 848:	19 f0       	breq	.+6      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 84a:	88 37       	cpi	r24, 0x78	; 120
 84c:	21 f0       	breq	.+8      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 84e:	b0 c0       	rjmp	.+352    	; 0x9b0 <__stack+0x151>
 850:	e9 2f       	mov	r30, r25
 852:	e0 61       	ori	r30, 0x10	; 16
 854:	be 2e       	mov	r11, r30
 856:	b4 fe       	sbrs	r11, 4
 858:	0d c0       	rjmp	.+26     	; 0x874 <__stack+0x15>
 85a:	fb 2d       	mov	r31, r11
 85c:	f4 60       	ori	r31, 0x04	; 4
 85e:	bf 2e       	mov	r11, r31
 860:	09 c0       	rjmp	.+18     	; 0x874 <__stack+0x15>
 862:	34 fe       	sbrs	r3, 4
 864:	0a c0       	rjmp	.+20     	; 0x87a <__stack+0x1b>
 866:	29 2f       	mov	r18, r25
 868:	26 60       	ori	r18, 0x06	; 6
 86a:	b2 2e       	mov	r11, r18
 86c:	06 c0       	rjmp	.+12     	; 0x87a <__stack+0x1b>
 86e:	28 e0       	ldi	r18, 0x08	; 8
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	05 c0       	rjmp	.+10     	; 0x87e <__stack+0x1f>
 874:	20 e1       	ldi	r18, 0x10	; 16
 876:	30 e0       	ldi	r19, 0x00	; 0
 878:	02 c0       	rjmp	.+4      	; 0x87e <__stack+0x1f>
 87a:	20 e1       	ldi	r18, 0x10	; 16
 87c:	32 e0       	ldi	r19, 0x02	; 2
 87e:	f8 01       	movw	r30, r16
 880:	b7 fe       	sbrs	r11, 7
 882:	07 c0       	rjmp	.+14     	; 0x892 <__stack+0x33>
 884:	60 81       	ld	r22, Z
 886:	71 81       	ldd	r23, Z+1	; 0x01
 888:	82 81       	ldd	r24, Z+2	; 0x02
 88a:	93 81       	ldd	r25, Z+3	; 0x03
 88c:	0c 5f       	subi	r16, 0xFC	; 252
 88e:	1f 4f       	sbci	r17, 0xFF	; 255
 890:	06 c0       	rjmp	.+12     	; 0x89e <__stack+0x3f>
 892:	60 81       	ld	r22, Z
 894:	71 81       	ldd	r23, Z+1	; 0x01
 896:	80 e0       	ldi	r24, 0x00	; 0
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	0e 5f       	subi	r16, 0xFE	; 254
 89c:	1f 4f       	sbci	r17, 0xFF	; 255
 89e:	a3 01       	movw	r20, r6
 8a0:	0e 94 34 05 	call	0xa68	; 0xa68 <__ultoa_invert>
 8a4:	88 2e       	mov	r8, r24
 8a6:	86 18       	sub	r8, r6
 8a8:	fb 2d       	mov	r31, r11
 8aa:	ff 77       	andi	r31, 0x7F	; 127
 8ac:	3f 2e       	mov	r3, r31
 8ae:	36 fe       	sbrs	r3, 6
 8b0:	0d c0       	rjmp	.+26     	; 0x8cc <__stack+0x6d>
 8b2:	23 2d       	mov	r18, r3
 8b4:	2e 7f       	andi	r18, 0xFE	; 254
 8b6:	a2 2e       	mov	r10, r18
 8b8:	89 14       	cp	r8, r9
 8ba:	58 f4       	brcc	.+22     	; 0x8d2 <__stack+0x73>
 8bc:	34 fe       	sbrs	r3, 4
 8be:	0b c0       	rjmp	.+22     	; 0x8d6 <__stack+0x77>
 8c0:	32 fc       	sbrc	r3, 2
 8c2:	09 c0       	rjmp	.+18     	; 0x8d6 <__stack+0x77>
 8c4:	83 2d       	mov	r24, r3
 8c6:	8e 7e       	andi	r24, 0xEE	; 238
 8c8:	a8 2e       	mov	r10, r24
 8ca:	05 c0       	rjmp	.+10     	; 0x8d6 <__stack+0x77>
 8cc:	b8 2c       	mov	r11, r8
 8ce:	a3 2c       	mov	r10, r3
 8d0:	03 c0       	rjmp	.+6      	; 0x8d8 <__stack+0x79>
 8d2:	b8 2c       	mov	r11, r8
 8d4:	01 c0       	rjmp	.+2      	; 0x8d8 <__stack+0x79>
 8d6:	b9 2c       	mov	r11, r9
 8d8:	a4 fe       	sbrs	r10, 4
 8da:	0f c0       	rjmp	.+30     	; 0x8fa <__stack+0x9b>
 8dc:	fe 01       	movw	r30, r28
 8de:	e8 0d       	add	r30, r8
 8e0:	f1 1d       	adc	r31, r1
 8e2:	80 81       	ld	r24, Z
 8e4:	80 33       	cpi	r24, 0x30	; 48
 8e6:	21 f4       	brne	.+8      	; 0x8f0 <__stack+0x91>
 8e8:	9a 2d       	mov	r25, r10
 8ea:	99 7e       	andi	r25, 0xE9	; 233
 8ec:	a9 2e       	mov	r10, r25
 8ee:	09 c0       	rjmp	.+18     	; 0x902 <__stack+0xa3>
 8f0:	a2 fe       	sbrs	r10, 2
 8f2:	06 c0       	rjmp	.+12     	; 0x900 <__stack+0xa1>
 8f4:	b3 94       	inc	r11
 8f6:	b3 94       	inc	r11
 8f8:	04 c0       	rjmp	.+8      	; 0x902 <__stack+0xa3>
 8fa:	8a 2d       	mov	r24, r10
 8fc:	86 78       	andi	r24, 0x86	; 134
 8fe:	09 f0       	breq	.+2      	; 0x902 <__stack+0xa3>
 900:	b3 94       	inc	r11
 902:	a3 fc       	sbrc	r10, 3
 904:	11 c0       	rjmp	.+34     	; 0x928 <__stack+0xc9>
 906:	a0 fe       	sbrs	r10, 0
 908:	06 c0       	rjmp	.+12     	; 0x916 <__stack+0xb7>
 90a:	b2 14       	cp	r11, r2
 90c:	88 f4       	brcc	.+34     	; 0x930 <__stack+0xd1>
 90e:	28 0c       	add	r2, r8
 910:	92 2c       	mov	r9, r2
 912:	9b 18       	sub	r9, r11
 914:	0e c0       	rjmp	.+28     	; 0x932 <__stack+0xd3>
 916:	b2 14       	cp	r11, r2
 918:	60 f4       	brcc	.+24     	; 0x932 <__stack+0xd3>
 91a:	b6 01       	movw	r22, r12
 91c:	80 e2       	ldi	r24, 0x20	; 32
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <fputc>
 924:	b3 94       	inc	r11
 926:	f7 cf       	rjmp	.-18     	; 0x916 <__stack+0xb7>
 928:	b2 14       	cp	r11, r2
 92a:	18 f4       	brcc	.+6      	; 0x932 <__stack+0xd3>
 92c:	2b 18       	sub	r2, r11
 92e:	02 c0       	rjmp	.+4      	; 0x934 <__stack+0xd5>
 930:	98 2c       	mov	r9, r8
 932:	21 2c       	mov	r2, r1
 934:	a4 fe       	sbrs	r10, 4
 936:	10 c0       	rjmp	.+32     	; 0x958 <__stack+0xf9>
 938:	b6 01       	movw	r22, r12
 93a:	80 e3       	ldi	r24, 0x30	; 48
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <fputc>
 942:	a2 fe       	sbrs	r10, 2
 944:	17 c0       	rjmp	.+46     	; 0x974 <__stack+0x115>
 946:	a1 fc       	sbrc	r10, 1
 948:	03 c0       	rjmp	.+6      	; 0x950 <__stack+0xf1>
 94a:	88 e7       	ldi	r24, 0x78	; 120
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	02 c0       	rjmp	.+4      	; 0x954 <__stack+0xf5>
 950:	88 e5       	ldi	r24, 0x58	; 88
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	b6 01       	movw	r22, r12
 956:	0c c0       	rjmp	.+24     	; 0x970 <__stack+0x111>
 958:	8a 2d       	mov	r24, r10
 95a:	86 78       	andi	r24, 0x86	; 134
 95c:	59 f0       	breq	.+22     	; 0x974 <__stack+0x115>
 95e:	a1 fe       	sbrs	r10, 1
 960:	02 c0       	rjmp	.+4      	; 0x966 <__stack+0x107>
 962:	8b e2       	ldi	r24, 0x2B	; 43
 964:	01 c0       	rjmp	.+2      	; 0x968 <__stack+0x109>
 966:	80 e2       	ldi	r24, 0x20	; 32
 968:	a7 fc       	sbrc	r10, 7
 96a:	8d e2       	ldi	r24, 0x2D	; 45
 96c:	b6 01       	movw	r22, r12
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <fputc>
 974:	89 14       	cp	r8, r9
 976:	38 f4       	brcc	.+14     	; 0x986 <__stack+0x127>
 978:	b6 01       	movw	r22, r12
 97a:	80 e3       	ldi	r24, 0x30	; 48
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <fputc>
 982:	9a 94       	dec	r9
 984:	f7 cf       	rjmp	.-18     	; 0x974 <__stack+0x115>
 986:	8a 94       	dec	r8
 988:	f3 01       	movw	r30, r6
 98a:	e8 0d       	add	r30, r8
 98c:	f1 1d       	adc	r31, r1
 98e:	80 81       	ld	r24, Z
 990:	b6 01       	movw	r22, r12
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <fputc>
 998:	81 10       	cpse	r8, r1
 99a:	f5 cf       	rjmp	.-22     	; 0x986 <__stack+0x127>
 99c:	22 20       	and	r2, r2
 99e:	09 f4       	brne	.+2      	; 0x9a2 <__stack+0x143>
 9a0:	42 ce       	rjmp	.-892    	; 0x626 <vfprintf+0x24>
 9a2:	b6 01       	movw	r22, r12
 9a4:	80 e2       	ldi	r24, 0x20	; 32
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <fputc>
 9ac:	2a 94       	dec	r2
 9ae:	f6 cf       	rjmp	.-20     	; 0x99c <__stack+0x13d>
 9b0:	f6 01       	movw	r30, r12
 9b2:	86 81       	ldd	r24, Z+6	; 0x06
 9b4:	97 81       	ldd	r25, Z+7	; 0x07
 9b6:	02 c0       	rjmp	.+4      	; 0x9bc <__stack+0x15d>
 9b8:	8f ef       	ldi	r24, 0xFF	; 255
 9ba:	9f ef       	ldi	r25, 0xFF	; 255
 9bc:	2b 96       	adiw	r28, 0x0b	; 11
 9be:	e2 e1       	ldi	r30, 0x12	; 18
 9c0:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__epilogue_restores__>

000009c4 <strnlen_P>:
 9c4:	fc 01       	movw	r30, r24
 9c6:	05 90       	lpm	r0, Z+
 9c8:	61 50       	subi	r22, 0x01	; 1
 9ca:	70 40       	sbci	r23, 0x00	; 0
 9cc:	01 10       	cpse	r0, r1
 9ce:	d8 f7       	brcc	.-10     	; 0x9c6 <strnlen_P+0x2>
 9d0:	80 95       	com	r24
 9d2:	90 95       	com	r25
 9d4:	8e 0f       	add	r24, r30
 9d6:	9f 1f       	adc	r25, r31
 9d8:	08 95       	ret

000009da <strnlen>:
 9da:	fc 01       	movw	r30, r24
 9dc:	61 50       	subi	r22, 0x01	; 1
 9de:	70 40       	sbci	r23, 0x00	; 0
 9e0:	01 90       	ld	r0, Z+
 9e2:	01 10       	cpse	r0, r1
 9e4:	d8 f7       	brcc	.-10     	; 0x9dc <strnlen+0x2>
 9e6:	80 95       	com	r24
 9e8:	90 95       	com	r25
 9ea:	8e 0f       	add	r24, r30
 9ec:	9f 1f       	adc	r25, r31
 9ee:	08 95       	ret

000009f0 <fputc>:
 9f0:	0f 93       	push	r16
 9f2:	1f 93       	push	r17
 9f4:	cf 93       	push	r28
 9f6:	df 93       	push	r29
 9f8:	fb 01       	movw	r30, r22
 9fa:	23 81       	ldd	r18, Z+3	; 0x03
 9fc:	21 fd       	sbrc	r18, 1
 9fe:	03 c0       	rjmp	.+6      	; 0xa06 <fputc+0x16>
 a00:	8f ef       	ldi	r24, 0xFF	; 255
 a02:	9f ef       	ldi	r25, 0xFF	; 255
 a04:	2c c0       	rjmp	.+88     	; 0xa5e <fputc+0x6e>
 a06:	22 ff       	sbrs	r18, 2
 a08:	16 c0       	rjmp	.+44     	; 0xa36 <fputc+0x46>
 a0a:	46 81       	ldd	r20, Z+6	; 0x06
 a0c:	57 81       	ldd	r21, Z+7	; 0x07
 a0e:	24 81       	ldd	r18, Z+4	; 0x04
 a10:	35 81       	ldd	r19, Z+5	; 0x05
 a12:	42 17       	cp	r20, r18
 a14:	53 07       	cpc	r21, r19
 a16:	44 f4       	brge	.+16     	; 0xa28 <fputc+0x38>
 a18:	a0 81       	ld	r26, Z
 a1a:	b1 81       	ldd	r27, Z+1	; 0x01
 a1c:	9d 01       	movw	r18, r26
 a1e:	2f 5f       	subi	r18, 0xFF	; 255
 a20:	3f 4f       	sbci	r19, 0xFF	; 255
 a22:	31 83       	std	Z+1, r19	; 0x01
 a24:	20 83       	st	Z, r18
 a26:	8c 93       	st	X, r24
 a28:	26 81       	ldd	r18, Z+6	; 0x06
 a2a:	37 81       	ldd	r19, Z+7	; 0x07
 a2c:	2f 5f       	subi	r18, 0xFF	; 255
 a2e:	3f 4f       	sbci	r19, 0xFF	; 255
 a30:	37 83       	std	Z+7, r19	; 0x07
 a32:	26 83       	std	Z+6, r18	; 0x06
 a34:	14 c0       	rjmp	.+40     	; 0xa5e <fputc+0x6e>
 a36:	8b 01       	movw	r16, r22
 a38:	ec 01       	movw	r28, r24
 a3a:	fb 01       	movw	r30, r22
 a3c:	00 84       	ldd	r0, Z+8	; 0x08
 a3e:	f1 85       	ldd	r31, Z+9	; 0x09
 a40:	e0 2d       	mov	r30, r0
 a42:	09 95       	icall
 a44:	89 2b       	or	r24, r25
 a46:	e1 f6       	brne	.-72     	; 0xa00 <fputc+0x10>
 a48:	d8 01       	movw	r26, r16
 a4a:	16 96       	adiw	r26, 0x06	; 6
 a4c:	8d 91       	ld	r24, X+
 a4e:	9c 91       	ld	r25, X
 a50:	17 97       	sbiw	r26, 0x07	; 7
 a52:	01 96       	adiw	r24, 0x01	; 1
 a54:	17 96       	adiw	r26, 0x07	; 7
 a56:	9c 93       	st	X, r25
 a58:	8e 93       	st	-X, r24
 a5a:	16 97       	sbiw	r26, 0x06	; 6
 a5c:	ce 01       	movw	r24, r28
 a5e:	df 91       	pop	r29
 a60:	cf 91       	pop	r28
 a62:	1f 91       	pop	r17
 a64:	0f 91       	pop	r16
 a66:	08 95       	ret

00000a68 <__ultoa_invert>:
 a68:	fa 01       	movw	r30, r20
 a6a:	aa 27       	eor	r26, r26
 a6c:	28 30       	cpi	r18, 0x08	; 8
 a6e:	51 f1       	breq	.+84     	; 0xac4 <__ultoa_invert+0x5c>
 a70:	20 31       	cpi	r18, 0x10	; 16
 a72:	81 f1       	breq	.+96     	; 0xad4 <__ultoa_invert+0x6c>
 a74:	e8 94       	clt
 a76:	6f 93       	push	r22
 a78:	6e 7f       	andi	r22, 0xFE	; 254
 a7a:	6e 5f       	subi	r22, 0xFE	; 254
 a7c:	7f 4f       	sbci	r23, 0xFF	; 255
 a7e:	8f 4f       	sbci	r24, 0xFF	; 255
 a80:	9f 4f       	sbci	r25, 0xFF	; 255
 a82:	af 4f       	sbci	r26, 0xFF	; 255
 a84:	b1 e0       	ldi	r27, 0x01	; 1
 a86:	3e d0       	rcall	.+124    	; 0xb04 <__ultoa_invert+0x9c>
 a88:	b4 e0       	ldi	r27, 0x04	; 4
 a8a:	3c d0       	rcall	.+120    	; 0xb04 <__ultoa_invert+0x9c>
 a8c:	67 0f       	add	r22, r23
 a8e:	78 1f       	adc	r23, r24
 a90:	89 1f       	adc	r24, r25
 a92:	9a 1f       	adc	r25, r26
 a94:	a1 1d       	adc	r26, r1
 a96:	68 0f       	add	r22, r24
 a98:	79 1f       	adc	r23, r25
 a9a:	8a 1f       	adc	r24, r26
 a9c:	91 1d       	adc	r25, r1
 a9e:	a1 1d       	adc	r26, r1
 aa0:	6a 0f       	add	r22, r26
 aa2:	71 1d       	adc	r23, r1
 aa4:	81 1d       	adc	r24, r1
 aa6:	91 1d       	adc	r25, r1
 aa8:	a1 1d       	adc	r26, r1
 aaa:	20 d0       	rcall	.+64     	; 0xaec <__ultoa_invert+0x84>
 aac:	09 f4       	brne	.+2      	; 0xab0 <__ultoa_invert+0x48>
 aae:	68 94       	set
 ab0:	3f 91       	pop	r19
 ab2:	2a e0       	ldi	r18, 0x0A	; 10
 ab4:	26 9f       	mul	r18, r22
 ab6:	11 24       	eor	r1, r1
 ab8:	30 19       	sub	r19, r0
 aba:	30 5d       	subi	r19, 0xD0	; 208
 abc:	31 93       	st	Z+, r19
 abe:	de f6       	brtc	.-74     	; 0xa76 <__ultoa_invert+0xe>
 ac0:	cf 01       	movw	r24, r30
 ac2:	08 95       	ret
 ac4:	46 2f       	mov	r20, r22
 ac6:	47 70       	andi	r20, 0x07	; 7
 ac8:	40 5d       	subi	r20, 0xD0	; 208
 aca:	41 93       	st	Z+, r20
 acc:	b3 e0       	ldi	r27, 0x03	; 3
 ace:	0f d0       	rcall	.+30     	; 0xaee <__ultoa_invert+0x86>
 ad0:	c9 f7       	brne	.-14     	; 0xac4 <__ultoa_invert+0x5c>
 ad2:	f6 cf       	rjmp	.-20     	; 0xac0 <__ultoa_invert+0x58>
 ad4:	46 2f       	mov	r20, r22
 ad6:	4f 70       	andi	r20, 0x0F	; 15
 ad8:	40 5d       	subi	r20, 0xD0	; 208
 ada:	4a 33       	cpi	r20, 0x3A	; 58
 adc:	18 f0       	brcs	.+6      	; 0xae4 <__ultoa_invert+0x7c>
 ade:	49 5d       	subi	r20, 0xD9	; 217
 ae0:	31 fd       	sbrc	r19, 1
 ae2:	40 52       	subi	r20, 0x20	; 32
 ae4:	41 93       	st	Z+, r20
 ae6:	02 d0       	rcall	.+4      	; 0xaec <__ultoa_invert+0x84>
 ae8:	a9 f7       	brne	.-22     	; 0xad4 <__ultoa_invert+0x6c>
 aea:	ea cf       	rjmp	.-44     	; 0xac0 <__ultoa_invert+0x58>
 aec:	b4 e0       	ldi	r27, 0x04	; 4
 aee:	a6 95       	lsr	r26
 af0:	97 95       	ror	r25
 af2:	87 95       	ror	r24
 af4:	77 95       	ror	r23
 af6:	67 95       	ror	r22
 af8:	ba 95       	dec	r27
 afa:	c9 f7       	brne	.-14     	; 0xaee <__ultoa_invert+0x86>
 afc:	00 97       	sbiw	r24, 0x00	; 0
 afe:	61 05       	cpc	r22, r1
 b00:	71 05       	cpc	r23, r1
 b02:	08 95       	ret
 b04:	9b 01       	movw	r18, r22
 b06:	ac 01       	movw	r20, r24
 b08:	0a 2e       	mov	r0, r26
 b0a:	06 94       	lsr	r0
 b0c:	57 95       	ror	r21
 b0e:	47 95       	ror	r20
 b10:	37 95       	ror	r19
 b12:	27 95       	ror	r18
 b14:	ba 95       	dec	r27
 b16:	c9 f7       	brne	.-14     	; 0xb0a <__ultoa_invert+0xa2>
 b18:	62 0f       	add	r22, r18
 b1a:	73 1f       	adc	r23, r19
 b1c:	84 1f       	adc	r24, r20
 b1e:	95 1f       	adc	r25, r21
 b20:	a0 1d       	adc	r26, r0
 b22:	08 95       	ret

00000b24 <__prologue_saves__>:
 b24:	2f 92       	push	r2
 b26:	3f 92       	push	r3
 b28:	4f 92       	push	r4
 b2a:	5f 92       	push	r5
 b2c:	6f 92       	push	r6
 b2e:	7f 92       	push	r7
 b30:	8f 92       	push	r8
 b32:	9f 92       	push	r9
 b34:	af 92       	push	r10
 b36:	bf 92       	push	r11
 b38:	cf 92       	push	r12
 b3a:	df 92       	push	r13
 b3c:	ef 92       	push	r14
 b3e:	ff 92       	push	r15
 b40:	0f 93       	push	r16
 b42:	1f 93       	push	r17
 b44:	cf 93       	push	r28
 b46:	df 93       	push	r29
 b48:	cd b7       	in	r28, 0x3d	; 61
 b4a:	de b7       	in	r29, 0x3e	; 62
 b4c:	ca 1b       	sub	r28, r26
 b4e:	db 0b       	sbc	r29, r27
 b50:	0f b6       	in	r0, 0x3f	; 63
 b52:	f8 94       	cli
 b54:	de bf       	out	0x3e, r29	; 62
 b56:	0f be       	out	0x3f, r0	; 63
 b58:	cd bf       	out	0x3d, r28	; 61
 b5a:	09 94       	ijmp

00000b5c <__epilogue_restores__>:
 b5c:	2a 88       	ldd	r2, Y+18	; 0x12
 b5e:	39 88       	ldd	r3, Y+17	; 0x11
 b60:	48 88       	ldd	r4, Y+16	; 0x10
 b62:	5f 84       	ldd	r5, Y+15	; 0x0f
 b64:	6e 84       	ldd	r6, Y+14	; 0x0e
 b66:	7d 84       	ldd	r7, Y+13	; 0x0d
 b68:	8c 84       	ldd	r8, Y+12	; 0x0c
 b6a:	9b 84       	ldd	r9, Y+11	; 0x0b
 b6c:	aa 84       	ldd	r10, Y+10	; 0x0a
 b6e:	b9 84       	ldd	r11, Y+9	; 0x09
 b70:	c8 84       	ldd	r12, Y+8	; 0x08
 b72:	df 80       	ldd	r13, Y+7	; 0x07
 b74:	ee 80       	ldd	r14, Y+6	; 0x06
 b76:	fd 80       	ldd	r15, Y+5	; 0x05
 b78:	0c 81       	ldd	r16, Y+4	; 0x04
 b7a:	1b 81       	ldd	r17, Y+3	; 0x03
 b7c:	aa 81       	ldd	r26, Y+2	; 0x02
 b7e:	b9 81       	ldd	r27, Y+1	; 0x01
 b80:	ce 0f       	add	r28, r30
 b82:	d1 1d       	adc	r29, r1
 b84:	0f b6       	in	r0, 0x3f	; 63
 b86:	f8 94       	cli
 b88:	de bf       	out	0x3e, r29	; 62
 b8a:	0f be       	out	0x3f, r0	; 63
 b8c:	cd bf       	out	0x3d, r28	; 61
 b8e:	ed 01       	movw	r28, r26
 b90:	08 95       	ret

00000b92 <_exit>:
 b92:	f8 94       	cli

00000b94 <__stop_program>:
 b94:	ff cf       	rjmp	.-2      	; 0xb94 <__stop_program>
