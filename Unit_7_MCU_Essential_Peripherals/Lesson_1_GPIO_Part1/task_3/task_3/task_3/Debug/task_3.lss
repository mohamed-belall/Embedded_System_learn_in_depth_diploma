
task_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000112  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000646  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000595  00000000  00000000  0000083a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029f  00000000  00000000  00000dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001070  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034d  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  000013f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "bitwise.h"
#include "atmega32_register.h"
#include <util/delay.h>

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	1f 92       	push	r1
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	// make all pin of port A as output
	//DDRA = 0b11111111;
	SETBIT(DDRD,4);
  76:	81 b3       	in	r24, 0x11	; 17
  78:	80 61       	ori	r24, 0x10	; 16
  7a:	81 bb       	out	0x11, r24	; 17
	SETBIT(DDRD,5);
  7c:	81 b3       	in	r24, 0x11	; 17
  7e:	80 62       	ori	r24, 0x20	; 32
  80:	81 bb       	out	0x11, r24	; 17
	SETBIT(DDRD,6);
  82:	81 b3       	in	r24, 0x11	; 17
  84:	80 64       	ori	r24, 0x40	; 64
  86:	81 bb       	out	0x11, r24	; 17
	SETBIT(DDRD,7);
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	80 68       	ori	r24, 0x80	; 128
  8c:	81 bb       	out	0x11, r24	; 17
	
	DDRC = 0xFF;
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	84 bb       	out	0x14, r24	; 20
	
	// PORTC PIN 0 as input
	CLEARBIT(DDRC,0);
  92:	84 b3       	in	r24, 0x14	; 20
  94:	8e 7f       	andi	r24, 0xFE	; 254
  96:	84 bb       	out	0x14, r24	; 20

	// create bit variable to iterate 8 bit 
	volatile unsigned char bit =0 ,i,j;
  98:	19 82       	std	Y+1, r1	; 0x01

	while (1) 
	{
		for(bit=7;bit>=5;bit--)
  9a:	87 e0       	ldi	r24, 0x07	; 7
  9c:	89 83       	std	Y+1, r24	; 0x01
  9e:	24 c0       	rjmp	.+72     	; 0xe8 <main+0x7c>
		{
				SETBIT(PORTD,bit);
  a0:	29 81       	ldd	r18, Y+1	; 0x01
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	ac 01       	movw	r20, r24
  a8:	02 c0       	rjmp	.+4      	; 0xae <main+0x42>
  aa:	44 0f       	add	r20, r20
  ac:	55 1f       	adc	r21, r21
  ae:	2a 95       	dec	r18
  b0:	e2 f7       	brpl	.-8      	; 0xaa <main+0x3e>
  b2:	9a 01       	movw	r18, r20
  b4:	32 b3       	in	r19, 0x12	; 18
  b6:	23 2b       	or	r18, r19
  b8:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	5f ef       	ldi	r21, 0xFF	; 255
  bc:	24 e3       	ldi	r18, 0x34	; 52
  be:	3c e0       	ldi	r19, 0x0C	; 12
  c0:	51 50       	subi	r21, 0x01	; 1
  c2:	20 40       	sbci	r18, 0x00	; 0
  c4:	30 40       	sbci	r19, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x54>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x5e>
  ca:	00 00       	nop
				_delay_ms(500);
				CLEARBIT(PORTD,bit);
  cc:	29 81       	ldd	r18, Y+1	; 0x01
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <main+0x68>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	2a 95       	dec	r18
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <main+0x64>
  d8:	80 95       	com	r24
  da:	90 95       	com	r25
  dc:	92 b3       	in	r25, 0x12	; 18
  de:	89 23       	and	r24, r25
  e0:	82 bb       	out	0x12, r24	; 18
	// create bit variable to iterate 8 bit 
	volatile unsigned char bit =0 ,i,j;

	while (1) 
	{
		for(bit=7;bit>=5;bit--)
  e2:	89 81       	ldd	r24, Y+1	; 0x01
  e4:	81 50       	subi	r24, 0x01	; 1
  e6:	89 83       	std	Y+1, r24	; 0x01
  e8:	89 81       	ldd	r24, Y+1	; 0x01
  ea:	85 30       	cpi	r24, 0x05	; 5
  ec:	c8 f6       	brcc	.-78     	; 0xa0 <main+0x34>
		{
				SETBIT(PORTD,bit);
				_delay_ms(500);
				CLEARBIT(PORTD,bit);
		}
		SETBIT(PORTD,4);
  ee:	82 b3       	in	r24, 0x12	; 18
  f0:	80 61       	ori	r24, 0x10	; 16
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	4f ef       	ldi	r20, 0xFF	; 255
  f6:	54 e3       	ldi	r21, 0x34	; 52
  f8:	8c e0       	ldi	r24, 0x0C	; 12
  fa:	41 50       	subi	r20, 0x01	; 1
  fc:	50 40       	sbci	r21, 0x00	; 0
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x8e>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x98>
 104:	00 00       	nop
		_delay_ms(500);
		CLEARBIT(PORTD,4);
 106:	82 b3       	in	r24, 0x12	; 18
 108:	8f 7e       	andi	r24, 0xEF	; 239
 10a:	82 bb       	out	0x12, r24	; 18
			PORTC = 0b1011 | (i<<4);
			_delay_ms(200);
		}
	
	*/
	}
 10c:	c6 cf       	rjmp	.-116    	; 0x9a <main+0x2e>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
