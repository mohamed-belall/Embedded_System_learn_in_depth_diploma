
task_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000063d  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a9  00000000  00000000  00000809  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027a  00000000  00000000  00000db2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000102c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000352  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000086  00000000  00000000  000013a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

int main(void)
{
	// make all pin of port A as output
	DDRA = 0b11111111;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	// PORTC PIN 0 as input
	CLEARBIT(DDRC,0);
  70:	84 b3       	in	r24, 0x14	; 20
  72:	8e 7f       	andi	r24, 0xFE	; 254
  74:	84 bb       	out	0x14, r24	; 20

	// create bit variable to iterate 8 bit 
	unsigned char bit =0 , flag=0;
  76:	40 e0       	ldi	r20, 0x00	; 0
  78:	80 e0       	ldi	r24, 0x00	; 0

	while (1) 
	{
		//we use external pull up resistance
		// we check if we cleck button
		if(READBIT(PINC,0)==0)
  7a:	98 99       	sbic	0x13, 0	; 19
  7c:	fe cf       	rjmp	.-4      	; 0x7a <main+0xe>
		{
			// if we reach pin 7 we make flag to 1 to decrement and turn off led 
			if (bit == 8)
  7e:	88 30       	cpi	r24, 0x08	; 8
  80:	09 f4       	brne	.+2      	; 0x84 <main+0x18>
				flag =1;
  82:	41 e0       	ldi	r20, 0x01	; 1
				
			// if we reach pin 0 we make flag to 0 to increment and turn on led 
			if(bit == 0)
  84:	81 11       	cpse	r24, r1
  86:	01 c0       	rjmp	.+2      	; 0x8a <main+0x1e>
				flag=0;
  88:	40 e0       	ldi	r20, 0x00	; 0

			if(flag == 0)
  8a:	41 11       	cpse	r20, r1
  8c:	16 c0       	rjmp	.+44     	; 0xba <main+0x4e>
			{
				SETBIT(PARTA,bit);
  8e:	9b b3       	in	r25, 0x1b	; 27
  90:	21 e0       	ldi	r18, 0x01	; 1
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	08 2e       	mov	r0, r24
  96:	02 c0       	rjmp	.+4      	; 0x9c <main+0x30>
  98:	22 0f       	add	r18, r18
  9a:	33 1f       	adc	r19, r19
  9c:	0a 94       	dec	r0
  9e:	e2 f7       	brpl	.-8      	; 0x98 <main+0x2c>
  a0:	29 2b       	or	r18, r25
  a2:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	31 ee       	ldi	r19, 0xE1	; 225
  a8:	94 e0       	ldi	r25, 0x04	; 4
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	30 40       	sbci	r19, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x3e>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x48>
  b4:	00 00       	nop
				_delay_ms(200);
				bit++;
  b6:	8f 5f       	subi	r24, 0xFF	; 255
  b8:	e0 cf       	rjmp	.-64     	; 0x7a <main+0xe>
			}else
			{
				bit--;
  ba:	81 50       	subi	r24, 0x01	; 1
				CLEARBIT(PARTA,bit);
  bc:	9b b3       	in	r25, 0x1b	; 27
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	08 2e       	mov	r0, r24
  c4:	02 c0       	rjmp	.+4      	; 0xca <main+0x5e>
  c6:	22 0f       	add	r18, r18
  c8:	33 1f       	adc	r19, r19
  ca:	0a 94       	dec	r0
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <main+0x5a>
  ce:	20 95       	com	r18
  d0:	29 23       	and	r18, r25
  d2:	2b bb       	out	0x1b, r18	; 27
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	31 ee       	ldi	r19, 0xE1	; 225
  d8:	94 e0       	ldi	r25, 0x04	; 4
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	30 40       	sbci	r19, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x6e>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x78>
  e4:	00 00       	nop
  e6:	c9 cf       	rjmp	.-110    	; 0x7a <main+0xe>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
