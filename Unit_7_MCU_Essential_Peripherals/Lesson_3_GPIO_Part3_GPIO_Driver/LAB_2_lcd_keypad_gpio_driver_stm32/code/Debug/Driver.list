
Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001488  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080015b8  080015b8  000115b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001618  08001618  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08001618  08001618  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001618  08001618  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001618  08001618  00011618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800161c  0800161c  0001161c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08001620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000090  080016b0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080016b0  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001171  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000067d  00000000  00000000  0002122a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000822  00000000  00000000  000218a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000170  00000000  00000000  000220d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000118  00000000  00000000  00022240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000024cf  00000000  00000000  00022358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000244b  00000000  00000000  00024827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000080be  00000000  00000000  00026c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002ed30  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000878  00000000  00000000  0002ed80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000090 	.word	0x20000090
 800014c:	00000000 	.word	0x00000000
 8000150:	080015a0 	.word	0x080015a0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000094 	.word	0x20000094
 800016c:	080015a0 	.word	0x080015a0

08000170 <keypad_Init>:

int keypad_Row[]	={R0,R1,R2,R3};
int keypad_Column[] ={C0,C1,C2,C3};

void keypad_Init()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0

	GPIO_PinConfig_t PinCfg;

	PinCfg.GPIO_PinNumber = R0;
 8000176:	2301      	movs	r3, #1
 8000178:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800017a:	2304      	movs	r3, #4
 800017c:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 800017e:	2301      	movs	r3, #1
 8000180:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000182:	1d3b      	adds	r3, r7, #4
 8000184:	4619      	mov	r1, r3
 8000186:	4844      	ldr	r0, [pc, #272]	; (8000298 <keypad_Init+0x128>)
 8000188:	f000 fb98 	bl	80008bc <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R1;
 800018c:	2302      	movs	r3, #2
 800018e:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000190:	2304      	movs	r3, #4
 8000192:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 8000194:	2301      	movs	r3, #1
 8000196:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000198:	1d3b      	adds	r3, r7, #4
 800019a:	4619      	mov	r1, r3
 800019c:	483e      	ldr	r0, [pc, #248]	; (8000298 <keypad_Init+0x128>)
 800019e:	f000 fb8d 	bl	80008bc <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R2;
 80001a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001a6:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001a8:	2304      	movs	r3, #4
 80001aa:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 80001ac:	2301      	movs	r3, #1
 80001ae:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001b0:	1d3b      	adds	r3, r7, #4
 80001b2:	4619      	mov	r1, r3
 80001b4:	4838      	ldr	r0, [pc, #224]	; (8000298 <keypad_Init+0x128>)
 80001b6:	f000 fb81 	bl	80008bc <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R3;
 80001ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80001be:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001c0:	2304      	movs	r3, #4
 80001c2:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 80001c4:	2301      	movs	r3, #1
 80001c6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	4619      	mov	r1, r3
 80001cc:	4832      	ldr	r0, [pc, #200]	; (8000298 <keypad_Init+0x128>)
 80001ce:	f000 fb75 	bl	80008bc <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C0;
 80001d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80001d6:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001d8:	2304      	movs	r3, #4
 80001da:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 80001dc:	2301      	movs	r3, #1
 80001de:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	4619      	mov	r1, r3
 80001e4:	482c      	ldr	r0, [pc, #176]	; (8000298 <keypad_Init+0x128>)
 80001e6:	f000 fb69 	bl	80008bc <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C1;
 80001ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80001ee:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001f0:	2304      	movs	r3, #4
 80001f2:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 80001f4:	2301      	movs	r3, #1
 80001f6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	4619      	mov	r1, r3
 80001fc:	4826      	ldr	r0, [pc, #152]	; (8000298 <keypad_Init+0x128>)
 80001fe:	f000 fb5d 	bl	80008bc <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C2;
 8000202:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000206:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000208:	2304      	movs	r3, #4
 800020a:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 800020c:	2301      	movs	r3, #1
 800020e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	4619      	mov	r1, r3
 8000214:	4820      	ldr	r0, [pc, #128]	; (8000298 <keypad_Init+0x128>)
 8000216:	f000 fb51 	bl	80008bc <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C3;
 800021a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800021e:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000220:	2304      	movs	r3, #4
 8000222:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 8000224:	2301      	movs	r3, #1
 8000226:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	4619      	mov	r1, r3
 800022c:	481a      	ldr	r0, [pc, #104]	; (8000298 <keypad_Init+0x128>)
 800022e:	f000 fb45 	bl	80008bc <MCAL_GPIO_Init>



	MCAL_GPIO_WritePin(KEYPAD_PORT, R0, GPIO_PIN_SET);
 8000232:	2201      	movs	r2, #1
 8000234:	2101      	movs	r1, #1
 8000236:	4818      	ldr	r0, [pc, #96]	; (8000298 <keypad_Init+0x128>)
 8000238:	f000 fbd6 	bl	80009e8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, R1, GPIO_PIN_SET);
 800023c:	2201      	movs	r2, #1
 800023e:	2102      	movs	r1, #2
 8000240:	4815      	ldr	r0, [pc, #84]	; (8000298 <keypad_Init+0x128>)
 8000242:	f000 fbd1 	bl	80009e8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, R2, GPIO_PIN_SET);
 8000246:	2201      	movs	r2, #1
 8000248:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800024c:	4812      	ldr	r0, [pc, #72]	; (8000298 <keypad_Init+0x128>)
 800024e:	f000 fbcb 	bl	80009e8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, R3, GPIO_PIN_SET);
 8000252:	2201      	movs	r2, #1
 8000254:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000258:	480f      	ldr	r0, [pc, #60]	; (8000298 <keypad_Init+0x128>)
 800025a:	f000 fbc5 	bl	80009e8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, C0, GPIO_PIN_SET);
 800025e:	2201      	movs	r2, #1
 8000260:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000264:	480c      	ldr	r0, [pc, #48]	; (8000298 <keypad_Init+0x128>)
 8000266:	f000 fbbf 	bl	80009e8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, C1, GPIO_PIN_SET);
 800026a:	2201      	movs	r2, #1
 800026c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000270:	4809      	ldr	r0, [pc, #36]	; (8000298 <keypad_Init+0x128>)
 8000272:	f000 fbb9 	bl	80009e8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, C2, GPIO_PIN_SET);
 8000276:	2201      	movs	r2, #1
 8000278:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027c:	4806      	ldr	r0, [pc, #24]	; (8000298 <keypad_Init+0x128>)
 800027e:	f000 fbb3 	bl	80009e8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, C3, GPIO_PIN_SET);
 8000282:	2201      	movs	r2, #1
 8000284:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000288:	4803      	ldr	r0, [pc, #12]	; (8000298 <keypad_Init+0x128>)
 800028a:	f000 fbad 	bl	80009e8 <MCAL_GPIO_WritePin>

}
 800028e:	bf00      	nop
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40010c00 	.word	0x40010c00

0800029c <keypad_GetKey>:

char keypad_GetKey()
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
	int i,j;

	for(i = 0; i < 4 ; i++)
 80002a2:	2300      	movs	r3, #0
 80002a4:	607b      	str	r3, [r7, #4]
 80002a6:	e0ae      	b.n	8000406 <keypad_GetKey+0x16a>
	{

		MCAL_GPIO_WritePin(KEYPAD_PORT, C0, GPIO_PIN_SET);
 80002a8:	2201      	movs	r2, #1
 80002aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002ae:	485a      	ldr	r0, [pc, #360]	; (8000418 <keypad_GetKey+0x17c>)
 80002b0:	f000 fb9a 	bl	80009e8 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, C1, GPIO_PIN_SET);
 80002b4:	2201      	movs	r2, #1
 80002b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002ba:	4857      	ldr	r0, [pc, #348]	; (8000418 <keypad_GetKey+0x17c>)
 80002bc:	f000 fb94 	bl	80009e8 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, C2, GPIO_PIN_SET);
 80002c0:	2201      	movs	r2, #1
 80002c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c6:	4854      	ldr	r0, [pc, #336]	; (8000418 <keypad_GetKey+0x17c>)
 80002c8:	f000 fb8e 	bl	80009e8 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, C3, GPIO_PIN_SET);
 80002cc:	2201      	movs	r2, #1
 80002ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002d2:	4851      	ldr	r0, [pc, #324]	; (8000418 <keypad_GetKey+0x17c>)
 80002d4:	f000 fb88 	bl	80009e8 <MCAL_GPIO_WritePin>

		MCAL_GPIO_WritePin(KEYPAD_PORT, keypad_Column[i], GPIO_PIN_RESET);
 80002d8:	4a50      	ldr	r2, [pc, #320]	; (800041c <keypad_GetKey+0x180>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e0:	b29b      	uxth	r3, r3
 80002e2:	2200      	movs	r2, #0
 80002e4:	4619      	mov	r1, r3
 80002e6:	484c      	ldr	r0, [pc, #304]	; (8000418 <keypad_GetKey+0x17c>)
 80002e8:	f000 fb7e 	bl	80009e8 <MCAL_GPIO_WritePin>
		for(j=0;j<4 ; j++)
 80002ec:	2300      	movs	r3, #0
 80002ee:	603b      	str	r3, [r7, #0]
 80002f0:	e082      	b.n	80003f8 <keypad_GetKey+0x15c>
		{

			if(MCAL_GPIO_ReadPin(KEYPAD_PORT, keypad_Row[j] ) == 0) // check if key is pressed
 80002f2:	4a4b      	ldr	r2, [pc, #300]	; (8000420 <keypad_GetKey+0x184>)
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	4619      	mov	r1, r3
 80002fe:	4846      	ldr	r0, [pc, #280]	; (8000418 <keypad_GetKey+0x17c>)
 8000300:	f000 fb5b 	bl	80009ba <MCAL_GPIO_ReadPin>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d16a      	bne.n	80003e0 <keypad_GetKey+0x144>
			{
				while(MCAL_GPIO_ReadPin(KEYPAD_PORT, keypad_Row[j] ) == 0); // wait for  single press
 800030a:	bf00      	nop
 800030c:	4a44      	ldr	r2, [pc, #272]	; (8000420 <keypad_GetKey+0x184>)
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000314:	b29b      	uxth	r3, r3
 8000316:	4619      	mov	r1, r3
 8000318:	483f      	ldr	r0, [pc, #252]	; (8000418 <keypad_GetKey+0x17c>)
 800031a:	f000 fb4e 	bl	80009ba <MCAL_GPIO_ReadPin>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d0f3      	beq.n	800030c <keypad_GetKey+0x70>
				switch (i)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2b03      	cmp	r3, #3
 8000328:	d863      	bhi.n	80003f2 <keypad_GetKey+0x156>
 800032a:	a201      	add	r2, pc, #4	; (adr r2, 8000330 <keypad_GetKey+0x94>)
 800032c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000330:	08000341 	.word	0x08000341
 8000334:	08000369 	.word	0x08000369
 8000338:	08000391 	.word	0x08000391
 800033c:	080003b9 	.word	0x080003b9
				{
				case(0):
					if(j == 0) return '7';
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d101      	bne.n	800034a <keypad_GetKey+0xae>
 8000346:	2337      	movs	r3, #55	; 0x37
 8000348:	e062      	b.n	8000410 <keypad_GetKey+0x174>
					else if(j == 1) return '4';
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	2b01      	cmp	r3, #1
 800034e:	d101      	bne.n	8000354 <keypad_GetKey+0xb8>
 8000350:	2334      	movs	r3, #52	; 0x34
 8000352:	e05d      	b.n	8000410 <keypad_GetKey+0x174>
					else if(j == 2) return '1';
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	2b02      	cmp	r3, #2
 8000358:	d101      	bne.n	800035e <keypad_GetKey+0xc2>
 800035a:	2331      	movs	r3, #49	; 0x31
 800035c:	e058      	b.n	8000410 <keypad_GetKey+0x174>
					else if(j == 3) return '?';
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	2b03      	cmp	r3, #3
 8000362:	d13f      	bne.n	80003e4 <keypad_GetKey+0x148>
 8000364:	233f      	movs	r3, #63	; 0x3f
 8000366:	e053      	b.n	8000410 <keypad_GetKey+0x174>
				break;
				case(1):
					if(j == 0) return '8';
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d101      	bne.n	8000372 <keypad_GetKey+0xd6>
 800036e:	2338      	movs	r3, #56	; 0x38
 8000370:	e04e      	b.n	8000410 <keypad_GetKey+0x174>
					else if(j == 1) return '5';
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d101      	bne.n	800037c <keypad_GetKey+0xe0>
 8000378:	2335      	movs	r3, #53	; 0x35
 800037a:	e049      	b.n	8000410 <keypad_GetKey+0x174>
					else if(j == 2) return '2';
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	2b02      	cmp	r3, #2
 8000380:	d101      	bne.n	8000386 <keypad_GetKey+0xea>
 8000382:	2332      	movs	r3, #50	; 0x32
 8000384:	e044      	b.n	8000410 <keypad_GetKey+0x174>
					else if(j == 3) return '0';
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	2b03      	cmp	r3, #3
 800038a:	d12d      	bne.n	80003e8 <keypad_GetKey+0x14c>
 800038c:	2330      	movs	r3, #48	; 0x30
 800038e:	e03f      	b.n	8000410 <keypad_GetKey+0x174>
				break;
				case(2):
					if(j == 0) return '9';
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d101      	bne.n	800039a <keypad_GetKey+0xfe>
 8000396:	2339      	movs	r3, #57	; 0x39
 8000398:	e03a      	b.n	8000410 <keypad_GetKey+0x174>
					else if(j == 1) return '6';
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	2b01      	cmp	r3, #1
 800039e:	d101      	bne.n	80003a4 <keypad_GetKey+0x108>
 80003a0:	2336      	movs	r3, #54	; 0x36
 80003a2:	e035      	b.n	8000410 <keypad_GetKey+0x174>
					else if(j == 2) return '3';
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	2b02      	cmp	r3, #2
 80003a8:	d101      	bne.n	80003ae <keypad_GetKey+0x112>
 80003aa:	2333      	movs	r3, #51	; 0x33
 80003ac:	e030      	b.n	8000410 <keypad_GetKey+0x174>
					else if(j == 3) return '=';
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	2b03      	cmp	r3, #3
 80003b2:	d11b      	bne.n	80003ec <keypad_GetKey+0x150>
 80003b4:	233d      	movs	r3, #61	; 0x3d
 80003b6:	e02b      	b.n	8000410 <keypad_GetKey+0x174>
				break;
				case(3):
					if(j == 0) return '/';
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d101      	bne.n	80003c2 <keypad_GetKey+0x126>
 80003be:	232f      	movs	r3, #47	; 0x2f
 80003c0:	e026      	b.n	8000410 <keypad_GetKey+0x174>
					else if(j == 1) return '*';
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d101      	bne.n	80003cc <keypad_GetKey+0x130>
 80003c8:	232a      	movs	r3, #42	; 0x2a
 80003ca:	e021      	b.n	8000410 <keypad_GetKey+0x174>
					else if(j == 2) return '-';
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	2b02      	cmp	r3, #2
 80003d0:	d101      	bne.n	80003d6 <keypad_GetKey+0x13a>
 80003d2:	232d      	movs	r3, #45	; 0x2d
 80003d4:	e01c      	b.n	8000410 <keypad_GetKey+0x174>
					else if(j == 3) return '+';
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	2b03      	cmp	r3, #3
 80003da:	d109      	bne.n	80003f0 <keypad_GetKey+0x154>
 80003dc:	232b      	movs	r3, #43	; 0x2b
 80003de:	e017      	b.n	8000410 <keypad_GetKey+0x174>
				break;

				}
			}
 80003e0:	bf00      	nop
 80003e2:	e006      	b.n	80003f2 <keypad_GetKey+0x156>
				break;
 80003e4:	bf00      	nop
 80003e6:	e004      	b.n	80003f2 <keypad_GetKey+0x156>
				break;
 80003e8:	bf00      	nop
 80003ea:	e002      	b.n	80003f2 <keypad_GetKey+0x156>
				break;
 80003ec:	bf00      	nop
 80003ee:	e000      	b.n	80003f2 <keypad_GetKey+0x156>
				break;
 80003f0:	bf00      	nop
		for(j=0;j<4 ; j++)
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	3301      	adds	r3, #1
 80003f6:	603b      	str	r3, [r7, #0]
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	2b03      	cmp	r3, #3
 80003fc:	f77f af79 	ble.w	80002f2 <keypad_GetKey+0x56>
	for(i = 0; i < 4 ; i++)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	3301      	adds	r3, #1
 8000404:	607b      	str	r3, [r7, #4]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	2b03      	cmp	r3, #3
 800040a:	f77f af4d 	ble.w	80002a8 <keypad_GetKey+0xc>
		}
	}
	return 'A'; // return A if no key is pressed
 800040e:	2341      	movs	r3, #65	; 0x41
}
 8000410:	4618      	mov	r0, r3
 8000412:	3708      	adds	r7, #8
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40010c00 	.word	0x40010c00
 800041c:	20000010 	.word	0x20000010
 8000420:	20000000 	.word	0x20000000

08000424 <delay_ms>:
#include "lcd_driver.h"



void delay_ms(uint32_t time)
{
 8000424:	b480      	push	{r7}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0 ; i < time ; i++)
 800042c:	2300      	movs	r3, #0
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	e00b      	b.n	800044a <delay_ms+0x26>
		for(j=0 ; j<255 ; j++);
 8000432:	2300      	movs	r3, #0
 8000434:	60bb      	str	r3, [r7, #8]
 8000436:	e002      	b.n	800043e <delay_ms+0x1a>
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	3301      	adds	r3, #1
 800043c:	60bb      	str	r3, [r7, #8]
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	2bfe      	cmp	r3, #254	; 0xfe
 8000442:	d9f9      	bls.n	8000438 <delay_ms+0x14>
	for(i=0 ; i < time ; i++)
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	3301      	adds	r3, #1
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	68fa      	ldr	r2, [r7, #12]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	429a      	cmp	r2, r3
 8000450:	d3ef      	bcc.n	8000432 <delay_ms+0xe>
}
 8000452:	bf00      	nop
 8000454:	bf00      	nop
 8000456:	3714      	adds	r7, #20
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr
	...

08000460 <LCD_Init>:

void LCD_Init()
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinCfg;
	delay_ms(20);
 8000466:	2014      	movs	r0, #20
 8000468:	f7ff ffdc 	bl	8000424 <delay_ms>


	PinCfg.GPIO_PinNumber = EN_switch ;
 800046c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000470:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000472:	2304      	movs	r3, #4
 8000474:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 8000476:	2301      	movs	r3, #1
 8000478:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CONTROL_PORT, &PinCfg);
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	4619      	mov	r1, r3
 800047e:	484d      	ldr	r0, [pc, #308]	; (80005b4 <LCD_Init+0x154>)
 8000480:	f000 fa1c 	bl	80008bc <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_switch;
 8000484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000488:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800048a:	2304      	movs	r3, #4
 800048c:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 800048e:	2301      	movs	r3, #1
 8000490:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CONTROL_PORT, &PinCfg);
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	4619      	mov	r1, r3
 8000496:	4847      	ldr	r0, [pc, #284]	; (80005b4 <LCD_Init+0x154>)
 8000498:	f000 fa10 	bl	80008bc <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RS_switch;
 800049c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004a0:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004a2:	2304      	movs	r3, #4
 80004a4:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 80004a6:	2301      	movs	r3, #1
 80004a8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CONTROL_PORT, &PinCfg);
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	4619      	mov	r1, r3
 80004ae:	4841      	ldr	r0, [pc, #260]	; (80005b4 <LCD_Init+0x154>)
 80004b0:	f000 fa04 	bl	80008bc <MCAL_GPIO_Init>


	// data pins output

	PinCfg.GPIO_PinNumber = D0;
 80004b4:	2301      	movs	r3, #1
 80004b6:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004b8:	2304      	movs	r3, #4
 80004ba:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 80004bc:	2301      	movs	r3, #1
 80004be:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	4619      	mov	r1, r3
 80004c4:	483b      	ldr	r0, [pc, #236]	; (80005b4 <LCD_Init+0x154>)
 80004c6:	f000 f9f9 	bl	80008bc <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D1;
 80004ca:	2302      	movs	r3, #2
 80004cc:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004ce:	2304      	movs	r3, #4
 80004d0:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 80004d2:	2301      	movs	r3, #1
 80004d4:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	4619      	mov	r1, r3
 80004da:	4836      	ldr	r0, [pc, #216]	; (80005b4 <LCD_Init+0x154>)
 80004dc:	f000 f9ee 	bl	80008bc <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D2;
 80004e0:	2304      	movs	r3, #4
 80004e2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004e4:	2304      	movs	r3, #4
 80004e6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 80004e8:	2301      	movs	r3, #1
 80004ea:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	4619      	mov	r1, r3
 80004f0:	4830      	ldr	r0, [pc, #192]	; (80005b4 <LCD_Init+0x154>)
 80004f2:	f000 f9e3 	bl	80008bc <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D3;
 80004f6:	2308      	movs	r3, #8
 80004f8:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004fa:	2304      	movs	r3, #4
 80004fc:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 80004fe:	2301      	movs	r3, #1
 8000500:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	4619      	mov	r1, r3
 8000506:	482b      	ldr	r0, [pc, #172]	; (80005b4 <LCD_Init+0x154>)
 8000508:	f000 f9d8 	bl	80008bc <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D4;
 800050c:	2310      	movs	r3, #16
 800050e:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000510:	2304      	movs	r3, #4
 8000512:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 8000514:	2301      	movs	r3, #1
 8000516:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	4619      	mov	r1, r3
 800051c:	4825      	ldr	r0, [pc, #148]	; (80005b4 <LCD_Init+0x154>)
 800051e:	f000 f9cd 	bl	80008bc <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D5;
 8000522:	2320      	movs	r3, #32
 8000524:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000526:	2304      	movs	r3, #4
 8000528:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 800052a:	2301      	movs	r3, #1
 800052c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	4619      	mov	r1, r3
 8000532:	4820      	ldr	r0, [pc, #128]	; (80005b4 <LCD_Init+0x154>)
 8000534:	f000 f9c2 	bl	80008bc <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D6;
 8000538:	2340      	movs	r3, #64	; 0x40
 800053a:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800053c:	2304      	movs	r3, #4
 800053e:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 8000540:	2301      	movs	r3, #1
 8000542:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	4619      	mov	r1, r3
 8000548:	481a      	ldr	r0, [pc, #104]	; (80005b4 <LCD_Init+0x154>)
 800054a:	f000 f9b7 	bl	80008bc <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D7;
 800054e:	2380      	movs	r3, #128	; 0x80
 8000550:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000552:	2304      	movs	r3, #4
 8000554:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 8000556:	2301      	movs	r3, #1
 8000558:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	4619      	mov	r1, r3
 800055e:	4815      	ldr	r0, [pc, #84]	; (80005b4 <LCD_Init+0x154>)
 8000560:	f000 f9ac 	bl	80008bc <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, EN_switch, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800056a:	4812      	ldr	r0, [pc, #72]	; (80005b4 <LCD_Init+0x154>)
 800056c:	f000 fa3c 	bl	80009e8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RS_switch, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000576:	480f      	ldr	r0, [pc, #60]	; (80005b4 <LCD_Init+0x154>)
 8000578:	f000 fa36 	bl	80009e8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RW_switch, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000582:	480c      	ldr	r0, [pc, #48]	; (80005b4 <LCD_Init+0x154>)
 8000584:	f000 fa30 	bl	80009e8 <MCAL_GPIO_WritePin>

	delay_ms(15);
 8000588:	200f      	movs	r0, #15
 800058a:	f7ff ff4b 	bl	8000424 <delay_ms>
	LCD_Clear_Screen();
 800058e:	f000 f813 	bl	80005b8 <LCD_Clear_Screen>

#ifdef EIGHT_BIT_MODE
	LCD_Send_Command(LCD_FUNCTION_8BIT_2LINES);
 8000592:	2038      	movs	r0, #56	; 0x38
 8000594:	f000 f818 	bl	80005c8 <LCD_Send_Command>
#ifdef FOUR_BIT_MODE
	LCD_Send_Command(0x02);
	LCD_Send_Command(LCD_FUNCTION_4BIT_2LINES);
#endif

	LCD_Send_Command(LCD_ENTRY_MODE);
 8000598:	2006      	movs	r0, #6
 800059a:	f000 f815 	bl	80005c8 <LCD_Send_Command>
	LCD_Send_Command(LCD_BEGIN_AT_FIRST_RAW);
 800059e:	2080      	movs	r0, #128	; 0x80
 80005a0:	f000 f812 	bl	80005c8 <LCD_Send_Command>
	LCD_Send_Command(LCD_DISP_0N_CURSOR_BLINK);
 80005a4:	200f      	movs	r0, #15
 80005a6:	f000 f80f 	bl	80005c8 <LCD_Send_Command>

}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40010800 	.word	0x40010800

080005b8 <LCD_Clear_Screen>:

void LCD_Clear_Screen(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	LCD_Send_Command(LCD_CLEAR);
 80005bc:	2001      	movs	r0, #1
 80005be:	f000 f803 	bl	80005c8 <LCD_Send_Command>
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <LCD_Send_Command>:

void LCD_Send_Command(uint8_t command)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
#ifdef EIGHT_BIT_MODE

	MCAL_GPIO_WritePort(LCD_DATA_PORT, command);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	4619      	mov	r1, r3
 80005d8:	480b      	ldr	r0, [pc, #44]	; (8000608 <LCD_Send_Command+0x40>)
 80005da:	f000 fa1c 	bl	8000a16 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RW_switch, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e4:	4808      	ldr	r0, [pc, #32]	; (8000608 <LCD_Send_Command+0x40>)
 80005e6:	f000 f9ff 	bl	80009e8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RS_switch, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f0:	4805      	ldr	r0, [pc, #20]	; (8000608 <LCD_Send_Command+0x40>)
 80005f2:	f000 f9f9 	bl	80009e8 <MCAL_GPIO_WritePin>
	delay_ms(1);
 80005f6:	2001      	movs	r0, #1
 80005f8:	f7ff ff14 	bl	8000424 <delay_ms>
	LCD_Kick();
 80005fc:	f000 f856 	bl	80006ac <LCD_Kick>
	LCD_PORT = (LCD_PORT &0x0F) | (command << 4);
	LCD_CONTROL_PORT &= ~((1<<RW_switch) | (1<<RS_switch));
	LCD_Kick();
#endif

}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40010800 	.word	0x40010800

0800060c <LCD_Send_Character>:
void LCD_Send_Character(uint8_t character)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
#ifdef EIGHT_BIT_MODE

	MCAL_GPIO_WritePort(LCD_DATA_PORT, character);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	b29b      	uxth	r3, r3
 800061a:	4619      	mov	r1, r3
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <LCD_Send_Character+0x40>)
 800061e:	f000 f9fa 	bl	8000a16 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RW_switch, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000628:	4808      	ldr	r0, [pc, #32]	; (800064c <LCD_Send_Character+0x40>)
 800062a:	f000 f9dd 	bl	80009e8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RS_switch, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <LCD_Send_Character+0x40>)
 8000636:	f000 f9d7 	bl	80009e8 <MCAL_GPIO_WritePin>

	delay_ms(1);
 800063a:	2001      	movs	r0, #1
 800063c:	f7ff fef2 	bl	8000424 <delay_ms>
	LCD_Kick();
 8000640:	f000 f834 	bl	80006ac <LCD_Kick>
	LCD_PORT = (LCD_PORT &0x0F) | (character << 4);
	LCD_CONTROL_PORT |= (1<<RS_switch);     //1: Data Register
	LCD_CONTROL_PORT &= ~(1<<RW_switch);    //0: Write
	LCD_Kick();
#endif
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40010800 	.word	0x40010800

08000650 <LCD_Send_String>:
void LCD_Send_String(char *string)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	int count =0;
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
	while(*string >0)
 800065c:	e01c      	b.n	8000698 <LCD_Send_String+0x48>
	{
		count++;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	3301      	adds	r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
		LCD_Send_Character(*string++);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	1c5a      	adds	r2, r3, #1
 8000668:	607a      	str	r2, [r7, #4]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ffcd 	bl	800060c <LCD_Send_Character>
		if (count == 16)
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	2b10      	cmp	r3, #16
 8000676:	d104      	bne.n	8000682 <LCD_Send_String+0x32>
		{
			LCD_gotoXY(1,0);
 8000678:	2100      	movs	r1, #0
 800067a:	2001      	movs	r0, #1
 800067c:	f000 f82c 	bl	80006d8 <LCD_gotoXY>
 8000680:	e00a      	b.n	8000698 <LCD_Send_String+0x48>
		}else if(count >= 32 )
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	2b1f      	cmp	r3, #31
 8000686:	dd07      	ble.n	8000698 <LCD_Send_String+0x48>
		{
			LCD_Clear_Screen();
 8000688:	f7ff ff96 	bl	80005b8 <LCD_Clear_Screen>
			LCD_gotoXY(0,0);
 800068c:	2100      	movs	r1, #0
 800068e:	2000      	movs	r0, #0
 8000690:	f000 f822 	bl	80006d8 <LCD_gotoXY>
			count =0;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
	while(*string >0)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1de      	bne.n	800065e <LCD_Send_String+0xe>
		}
	}
}
 80006a0:	bf00      	nop
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <LCD_Kick>:

void LCD_Kick(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, EN_switch, GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b6:	4807      	ldr	r0, [pc, #28]	; (80006d4 <LCD_Kick+0x28>)
 80006b8:	f000 f996 	bl	80009e8 <MCAL_GPIO_WritePin>

	delay_ms(50);
 80006bc:	2032      	movs	r0, #50	; 0x32
 80006be:	f7ff feb1 	bl	8000424 <delay_ms>

	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, EN_switch, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c8:	4802      	ldr	r0, [pc, #8]	; (80006d4 <LCD_Kick+0x28>)
 80006ca:	f000 f98d 	bl	80009e8 <MCAL_GPIO_WritePin>
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40010800 	.word	0x40010800

080006d8 <LCD_gotoXY>:




void LCD_gotoXY(uint8_t line , uint8_t position)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	460a      	mov	r2, r1
 80006e2:	71fb      	strb	r3, [r7, #7]
 80006e4:	4613      	mov	r3, r2
 80006e6:	71bb      	strb	r3, [r7, #6]
	if (line == 0) // line 1
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d108      	bne.n	8000700 <LCD_gotoXY+0x28>
	{
		if(position < 16 && position >= 0)
 80006ee:	79bb      	ldrb	r3, [r7, #6]
 80006f0:	2b0f      	cmp	r3, #15
 80006f2:	d805      	bhi.n	8000700 <LCD_gotoXY+0x28>
			LCD_Send_Command(0x80+position);
 80006f4:	79bb      	ldrb	r3, [r7, #6]
 80006f6:	3b80      	subs	r3, #128	; 0x80
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ff64 	bl	80005c8 <LCD_Send_Command>
	}
	if (line == 1) //  line 2
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d108      	bne.n	8000718 <LCD_gotoXY+0x40>
	{
		if(position < 16 && position >= 0)
 8000706:	79bb      	ldrb	r3, [r7, #6]
 8000708:	2b0f      	cmp	r3, #15
 800070a:	d805      	bhi.n	8000718 <LCD_gotoXY+0x40>
			LCD_Send_Command(0xC0+position);
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	3b40      	subs	r3, #64	; 0x40
 8000710:	b2db      	uxtb	r3, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff ff58 	bl	80005c8 <LCD_Send_Command>
	}
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <LCD_Display_Number>:
void LCD_Display_Number(unsigned int Number)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	char str[6];
	sprintf(str,"%d",Number); //adjust the formatting to your liking
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	4906      	ldr	r1, [pc, #24]	; (8000748 <LCD_Display_Number+0x28>)
 8000730:	4618      	mov	r0, r3
 8000732:	f000 fabb 	bl	8000cac <siprintf>

	LCD_Send_String(str);
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff88 	bl	8000650 <LCD_Send_String>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	080015b8 	.word	0x080015b8

0800074c <Get_CRLH_Position>:
 */

#include "STM32F103C6_GPIO_Drivers.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000756:	88fb      	ldrh	r3, [r7, #6]
 8000758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800075c:	f000 80a5 	beq.w	80008aa <Get_CRLH_Position+0x15e>
 8000760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000764:	f300 80a3 	bgt.w	80008ae <Get_CRLH_Position+0x162>
 8000768:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800076c:	f000 809b 	beq.w	80008a6 <Get_CRLH_Position+0x15a>
 8000770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000774:	f300 809b 	bgt.w	80008ae <Get_CRLH_Position+0x162>
 8000778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800077c:	f000 8091 	beq.w	80008a2 <Get_CRLH_Position+0x156>
 8000780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000784:	f300 8093 	bgt.w	80008ae <Get_CRLH_Position+0x162>
 8000788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800078c:	f000 8087 	beq.w	800089e <Get_CRLH_Position+0x152>
 8000790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000794:	f300 808b 	bgt.w	80008ae <Get_CRLH_Position+0x162>
 8000798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800079c:	d07d      	beq.n	800089a <Get_CRLH_Position+0x14e>
 800079e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80007a2:	f300 8084 	bgt.w	80008ae <Get_CRLH_Position+0x162>
 80007a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007aa:	d074      	beq.n	8000896 <Get_CRLH_Position+0x14a>
 80007ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007b0:	dc7d      	bgt.n	80008ae <Get_CRLH_Position+0x162>
 80007b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007b6:	d06c      	beq.n	8000892 <Get_CRLH_Position+0x146>
 80007b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007bc:	dc77      	bgt.n	80008ae <Get_CRLH_Position+0x162>
 80007be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007c2:	d064      	beq.n	800088e <Get_CRLH_Position+0x142>
 80007c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007c8:	dc71      	bgt.n	80008ae <Get_CRLH_Position+0x162>
 80007ca:	2b80      	cmp	r3, #128	; 0x80
 80007cc:	d05d      	beq.n	800088a <Get_CRLH_Position+0x13e>
 80007ce:	2b80      	cmp	r3, #128	; 0x80
 80007d0:	dc6d      	bgt.n	80008ae <Get_CRLH_Position+0x162>
 80007d2:	2b20      	cmp	r3, #32
 80007d4:	dc48      	bgt.n	8000868 <Get_CRLH_Position+0x11c>
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	dd69      	ble.n	80008ae <Get_CRLH_Position+0x162>
 80007da:	3b01      	subs	r3, #1
 80007dc:	2b1f      	cmp	r3, #31
 80007de:	d866      	bhi.n	80008ae <Get_CRLH_Position+0x162>
 80007e0:	a201      	add	r2, pc, #4	; (adr r2, 80007e8 <Get_CRLH_Position+0x9c>)
 80007e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e6:	bf00      	nop
 80007e8:	0800086f 	.word	0x0800086f
 80007ec:	08000873 	.word	0x08000873
 80007f0:	080008af 	.word	0x080008af
 80007f4:	08000877 	.word	0x08000877
 80007f8:	080008af 	.word	0x080008af
 80007fc:	080008af 	.word	0x080008af
 8000800:	080008af 	.word	0x080008af
 8000804:	0800087b 	.word	0x0800087b
 8000808:	080008af 	.word	0x080008af
 800080c:	080008af 	.word	0x080008af
 8000810:	080008af 	.word	0x080008af
 8000814:	080008af 	.word	0x080008af
 8000818:	080008af 	.word	0x080008af
 800081c:	080008af 	.word	0x080008af
 8000820:	080008af 	.word	0x080008af
 8000824:	0800087f 	.word	0x0800087f
 8000828:	080008af 	.word	0x080008af
 800082c:	080008af 	.word	0x080008af
 8000830:	080008af 	.word	0x080008af
 8000834:	080008af 	.word	0x080008af
 8000838:	080008af 	.word	0x080008af
 800083c:	080008af 	.word	0x080008af
 8000840:	080008af 	.word	0x080008af
 8000844:	080008af 	.word	0x080008af
 8000848:	080008af 	.word	0x080008af
 800084c:	080008af 	.word	0x080008af
 8000850:	080008af 	.word	0x080008af
 8000854:	080008af 	.word	0x080008af
 8000858:	080008af 	.word	0x080008af
 800085c:	080008af 	.word	0x080008af
 8000860:	080008af 	.word	0x080008af
 8000864:	08000883 	.word	0x08000883
 8000868:	2b40      	cmp	r3, #64	; 0x40
 800086a:	d00c      	beq.n	8000886 <Get_CRLH_Position+0x13a>
 800086c:	e01f      	b.n	80008ae <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 800086e:	2300      	movs	r3, #0
 8000870:	e01e      	b.n	80008b0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 8000872:	2304      	movs	r3, #4
 8000874:	e01c      	b.n	80008b0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 8000876:	2308      	movs	r3, #8
 8000878:	e01a      	b.n	80008b0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 800087a:	230c      	movs	r3, #12
 800087c:	e018      	b.n	80008b0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 800087e:	2310      	movs	r3, #16
 8000880:	e016      	b.n	80008b0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 8000882:	2314      	movs	r3, #20
 8000884:	e014      	b.n	80008b0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 8000886:	2318      	movs	r3, #24
 8000888:	e012      	b.n	80008b0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 800088a:	231c      	movs	r3, #28
 800088c:	e010      	b.n	80008b0 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_8:
		return 0;
 800088e:	2300      	movs	r3, #0
 8000890:	e00e      	b.n	80008b0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 8000892:	2304      	movs	r3, #4
 8000894:	e00c      	b.n	80008b0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 8000896:	2308      	movs	r3, #8
 8000898:	e00a      	b.n	80008b0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 800089a:	230c      	movs	r3, #12
 800089c:	e008      	b.n	80008b0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 800089e:	2310      	movs	r3, #16
 80008a0:	e006      	b.n	80008b0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 80008a2:	2314      	movs	r3, #20
 80008a4:	e004      	b.n	80008b0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 80008a6:	2318      	movs	r3, #24
 80008a8:	e002      	b.n	80008b0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 80008aa:	231c      	movs	r3, #28
 80008ac:	e000      	b.n	80008b0 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 80008ae:	2300      	movs	r3, #0
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop

080008bc <MCAL_GPIO_Init>:
 * @Note			-STM32F103C6 MCU has GPIO A,B,C,D,E modules
 * 					 but LQFP48 package has only GPIO A,B,part of (C,D) exported as external PINS from the MCU
 * ===================================
 * */
void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx , GPIO_PinConfig_t* PinConfig)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
	// port configuration register low (GPIOx_CRL) configure pin from 0 => 7
	// port configuration register high (GPIOx_CRH) configure pin from 8 => 15
	volatile uint32_t*  configRegister = NULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config =0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]

	configRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL  :  &GPIOx->CRH;
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	2bff      	cmp	r3, #255	; 0xff
 80008d4:	d801      	bhi.n	80008da <MCAL_GPIO_Init+0x1e>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	e001      	b.n	80008de <MCAL_GPIO_Init+0x22>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3304      	adds	r3, #4
 80008de:	60bb      	str	r3, [r7, #8]

	//clear CNF0[1:0] MODE0[1:0]
	(*configRegister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff31 	bl	800074c <Get_CRLH_Position>
 80008ea:	4603      	mov	r3, r0
 80008ec:	461a      	mov	r2, r3
 80008ee:	230f      	movs	r3, #15
 80008f0:	4093      	lsls	r3, r2
 80008f2:	43da      	mvns	r2, r3
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	401a      	ands	r2, r3
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	601a      	str	r2, [r3, #0]

	// if pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) )
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	789b      	ldrb	r3, [r3, #2]
 8000902:	2b04      	cmp	r3, #4
 8000904:	d00b      	beq.n	800091e <MCAL_GPIO_Init+0x62>
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	789b      	ldrb	r3, [r3, #2]
 800090a:	2b05      	cmp	r3, #5
 800090c:	d007      	beq.n	800091e <MCAL_GPIO_Init+0x62>
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	789b      	ldrb	r3, [r3, #2]
 8000912:	2b06      	cmp	r3, #6
 8000914:	d003      	beq.n	800091e <MCAL_GPIO_Init+0x62>
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	789b      	ldrb	r3, [r3, #2]
 800091a:	2b07      	cmp	r3, #7
 800091c:	d10e      	bne.n	800093c <MCAL_GPIO_Init+0x80>
	{
		//SET CNF0[1:0] MODE0[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_output_speed)) & 0x0F );
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	789b      	ldrb	r3, [r3, #2]
 8000922:	3b04      	subs	r3, #4
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	b25a      	sxtb	r2, r3
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	78db      	ldrb	r3, [r3, #3]
 800092c:	b25b      	sxtb	r3, r3
 800092e:	4313      	orrs	r3, r2
 8000930:	b25b      	sxtb	r3, r3
 8000932:	b2db      	uxtb	r3, r3
 8000934:	f003 030f 	and.w	r3, r3, #15
 8000938:	73fb      	strb	r3, [r7, #15]
 800093a:	e02c      	b.n	8000996 <MCAL_GPIO_Init+0xda>
	}
	// if pin is input
	else //  00: Input mode (reset state)
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	789b      	ldrb	r3, [r3, #2]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d003      	beq.n	800094c <MCAL_GPIO_Init+0x90>
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	789b      	ldrb	r3, [r3, #2]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d107      	bne.n	800095c <MCAL_GPIO_Init+0xa0>
		{
			//SET CNF0[1:0] MODE0[1:0] = 00
			PIN_Config =( (((PinConfig->GPIO_MODE) << 2) | 0x0)& 0x0F);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	789b      	ldrb	r3, [r3, #2]
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	b2db      	uxtb	r3, r3
 8000954:	f003 030f 	and.w	r3, r3, #15
 8000958:	73fb      	strb	r3, [r7, #15]
 800095a:	e01c      	b.n	8000996 <MCAL_GPIO_Init+0xda>
		}else if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF)) // Consider it as input floating
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	789b      	ldrb	r3, [r3, #2]
 8000960:	2b08      	cmp	r3, #8
 8000962:	d102      	bne.n	800096a <MCAL_GPIO_Init+0xae>
		{
			//SET CNF0[1:0] MODE0[1:0] = 00
			PIN_Config =( (((GPIO_MODE_INPUT_FLOATING) << 2)  | 0x0) & 0x0F);
 8000964:	2304      	movs	r3, #4
 8000966:	73fb      	strb	r3, [r7, #15]
 8000968:	e015      	b.n	8000996 <MCAL_GPIO_Init+0xda>
		}else // PU PD
		{
			PIN_Config =( (((GPIO_MODE_INPUT_PU) << 2) | 0x0)& 0x0F);
 800096a:	2308      	movs	r3, #8
 800096c:	73fb      	strb	r3, [r7, #15]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU) // pull up
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	789b      	ldrb	r3, [r3, #2]
 8000972:	2b02      	cmp	r3, #2
 8000974:	d107      	bne.n	8000986 <MCAL_GPIO_Init+0xca>
			{
				//Table 20. Port bit configuration table PxODR 1 => input pull up
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	68db      	ldr	r3, [r3, #12]
 800097a:	683a      	ldr	r2, [r7, #0]
 800097c:	8812      	ldrh	r2, [r2, #0]
 800097e:	431a      	orrs	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	e007      	b.n	8000996 <MCAL_GPIO_Init+0xda>
			}else // pull down
			{
				//Table 20. Port bit configuration table PxODR 0 => input pull down
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	68db      	ldr	r3, [r3, #12]
 800098a:	683a      	ldr	r2, [r7, #0]
 800098c:	8812      	ldrh	r2, [r2, #0]
 800098e:	43d2      	mvns	r2, r2
 8000990:	401a      	ands	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	60da      	str	r2, [r3, #12]
			}
		}

	}
	// write on CRL OR CRH
	(*configRegister) |= (PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000996:	7bfc      	ldrb	r4, [r7, #15]
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fed5 	bl	800074c <Get_CRLH_Position>
 80009a2:	4603      	mov	r3, r0
 80009a4:	fa04 f203 	lsl.w	r2, r4, r3
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	431a      	orrs	r2, r3
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	601a      	str	r2, [r3, #0]
}
 80009b2:	bf00      	nop
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd90      	pop	{r4, r7, pc}

080009ba <MCAL_GPIO_ReadPin>:
 * @retval			-the input pin value (two values based on @ref GPIO_PIN_state
 * @Note			-none
 * ===================================
 * */
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx , uint16_t PinNumber)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b085      	sub	sp, #20
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	460b      	mov	r3, r1
 80009c4:	807b      	strh	r3, [r7, #2]
	uint8_t bitStatus;
	if(((GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_PIN_RESET)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	689a      	ldr	r2, [r3, #8]
 80009ca:	887b      	ldrh	r3, [r7, #2]
 80009cc:	4013      	ands	r3, r2
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d002      	beq.n	80009d8 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitStatus = GPIO_PIN_SET;
 80009d2:	2301      	movs	r3, #1
 80009d4:	73fb      	strb	r3, [r7, #15]
 80009d6:	e001      	b.n	80009dc <MCAL_GPIO_ReadPin+0x22>
	}else
	{
		bitStatus = GPIO_PIN_RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	73fb      	strb	r3, [r7, #15]
	}
	return bitStatus;
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <MCAL_GPIO_WritePin>:
 * @retval			-none
 * @Note			-none
 * ===================================
 * */
void MCAL_GPIO_WritePin(GPIO_TypeDef* GPIOx , uint16_t PinNumber , uint8_t value)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	807b      	strh	r3, [r7, #2]
 80009f4:	4613      	mov	r3, r2
 80009f6:	707b      	strb	r3, [r7, #1]
	if(value != GPIO_PIN_RESET)
 80009f8:	787b      	ldrb	r3, [r7, #1]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d003      	beq.n	8000a06 <MCAL_GPIO_WritePin+0x1e>
		// OR
		//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		//		These bits are write-only and can be accessed in Word mode only.
		//		0: No action on the corresponding ODRx bit
		//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 80009fe:	887a      	ldrh	r2, [r7, #2]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	611a      	str	r2, [r3, #16]
		//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;

	}

}
 8000a04:	e002      	b.n	8000a0c <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000a06:	887a      	ldrh	r2, [r7, #2]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	615a      	str	r2, [r3, #20]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr

08000a16 <MCAL_GPIO_WritePort>:
 * @retval			-none
 * @Note			-none
 * ===================================
 * */
void MCAL_GPIO_WritePort(GPIO_TypeDef* GPIOx,uint16_t value)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
 8000a1e:	460b      	mov	r3, r1
 8000a20:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)value;
 8000a22:	887a      	ldrh	r2, [r7, #2]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	60da      	str	r2, [r3, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
	...

08000a34 <GPIO_SevenSegment_Init>:




void GPIO_SevenSegment_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0

	GPIO_PinConfig_t PinCfg;


	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000a3a:	2308      	movs	r3, #8
 8000a3c:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 8000a42:	2301      	movs	r3, #1
 8000a44:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4819      	ldr	r0, [pc, #100]	; (8000ab0 <GPIO_SevenSegment_Init+0x7c>)
 8000a4c:	f7ff ff36 	bl	80008bc <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000a50:	2310      	movs	r3, #16
 8000a52:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	4619      	mov	r1, r3
 8000a58:	4815      	ldr	r0, [pc, #84]	; (8000ab0 <GPIO_SevenSegment_Init+0x7c>)
 8000a5a:	f7ff ff2f 	bl	80008bc <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000a5e:	2320      	movs	r3, #32
 8000a60:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	4619      	mov	r1, r3
 8000a66:	4812      	ldr	r0, [pc, #72]	; (8000ab0 <GPIO_SevenSegment_Init+0x7c>)
 8000a68:	f7ff ff28 	bl	80008bc <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000a6c:	2340      	movs	r3, #64	; 0x40
 8000a6e:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	4619      	mov	r1, r3
 8000a74:	480e      	ldr	r0, [pc, #56]	; (8000ab0 <GPIO_SevenSegment_Init+0x7c>)
 8000a76:	f7ff ff21 	bl	80008bc <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000a7a:	2380      	movs	r3, #128	; 0x80
 8000a7c:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	4619      	mov	r1, r3
 8000a82:	480b      	ldr	r0, [pc, #44]	; (8000ab0 <GPIO_SevenSegment_Init+0x7c>)
 8000a84:	f7ff ff1a 	bl	80008bc <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_8;
 8000a88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a8c:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	4619      	mov	r1, r3
 8000a92:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <GPIO_SevenSegment_Init+0x7c>)
 8000a94:	f7ff ff12 	bl	80008bc <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a9c:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <GPIO_SevenSegment_Init+0x7c>)
 8000aa4:	f7ff ff0a 	bl	80008bc <MCAL_GPIO_Init>

}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40010c00 	.word	0x40010c00

08000ab4 <Clock_Init>:

void Clock_Init(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

	//ENABLE CLOCK GPIOA
	//RCC_APB2ENR |= RCC_IOPAEN;
	RCC_GPIOA_CLK_EN();
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <Clock_Init+0x30>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	4a09      	ldr	r2, [pc, #36]	; (8000ae4 <Clock_Init+0x30>)
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	6193      	str	r3, [r2, #24]
	//ENABLE CLOCK GPIOB
	//RCC_APB2ENR |= RCC_IOPBEN;
	RCC_GPIOB_CLK_EN();
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <Clock_Init+0x30>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a06      	ldr	r2, [pc, #24]	; (8000ae4 <Clock_Init+0x30>)
 8000aca:	f043 0308 	orr.w	r3, r3, #8
 8000ace:	6193      	str	r3, [r2, #24]
	RCC_GPIOC_CLK_EN();
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <Clock_Init+0x30>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	4a03      	ldr	r2, [pc, #12]	; (8000ae4 <Clock_Init+0x30>)
 8000ad6:	f043 0310 	orr.w	r3, r3, #16
 8000ada:	6193      	str	r3, [r2, #24]

}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <main>:


int main(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
	volatile uint8_t key_pressed;
	uint8_t i;

	Clock_Init();
 8000aee:	f7ff ffe1 	bl	8000ab4 <Clock_Init>
	GPIO_SevenSegment_Init();
 8000af2:	f7ff ff9f 	bl	8000a34 <GPIO_SevenSegment_Init>
	LCD_Init();
 8000af6:	f7ff fcb3 	bl	8000460 <LCD_Init>

	LCD_Send_String("hey");
 8000afa:	4823      	ldr	r0, [pc, #140]	; (8000b88 <main+0xa0>)
 8000afc:	f7ff fda8 	bl	8000650 <LCD_Send_String>
	delay_ms(500);
 8000b00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b04:	f7ff fc8e 	bl	8000424 <delay_ms>
	LCD_Clear_Screen();
 8000b08:	f7ff fd56 	bl	80005b8 <LCD_Clear_Screen>

	for(i=0;i<11;i++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	71fb      	strb	r3, [r7, #7]
 8000b10:	e014      	b.n	8000b3c <main+0x54>
	{
		MCAL_GPIO_WritePort(GPIOB, segments_hex[i] << 3);
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	4a1d      	ldr	r2, [pc, #116]	; (8000b8c <main+0xa4>)
 8000b16:	5cd3      	ldrb	r3, [r2, r3]
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	00db      	lsls	r3, r3, #3
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	4619      	mov	r1, r3
 8000b20:	481b      	ldr	r0, [pc, #108]	; (8000b90 <main+0xa8>)
 8000b22:	f7ff ff78 	bl	8000a16 <MCAL_GPIO_WritePort>
		LCD_Display_Number(i);
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fdf9 	bl	8000720 <LCD_Display_Number>
		delay_ms(500);
 8000b2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b32:	f7ff fc77 	bl	8000424 <delay_ms>
	for(i=0;i<11;i++)
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	71fb      	strb	r3, [r7, #7]
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	2b0a      	cmp	r3, #10
 8000b40:	d9e7      	bls.n	8000b12 <main+0x2a>
	}
	LCD_Clear_Screen();
 8000b42:	f7ff fd39 	bl	80005b8 <LCD_Clear_Screen>

	keypad_Init();
 8000b46:	f7ff fb13 	bl	8000170 <keypad_Init>

	LCD_Send_String("keypad is Ready");
 8000b4a:	4812      	ldr	r0, [pc, #72]	; (8000b94 <main+0xac>)
 8000b4c:	f7ff fd80 	bl	8000650 <LCD_Send_String>
	delay_ms(500);
 8000b50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b54:	f7ff fc66 	bl	8000424 <delay_ms>
	LCD_Clear_Screen();
 8000b58:	f7ff fd2e 	bl	80005b8 <LCD_Clear_Screen>

	while(1)
	{
		key_pressed = keypad_GetKey();
 8000b5c:	f7ff fb9e 	bl	800029c <keypad_GetKey>
 8000b60:	4603      	mov	r3, r0
 8000b62:	71bb      	strb	r3, [r7, #6]
		switch (key_pressed) {
 8000b64:	79bb      	ldrb	r3, [r7, #6]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b3f      	cmp	r3, #63	; 0x3f
 8000b6a:	d002      	beq.n	8000b72 <main+0x8a>
 8000b6c:	2b41      	cmp	r3, #65	; 0x41
 8000b6e:	d103      	bne.n	8000b78 <main+0x90>
		case 'A':
			break;
 8000b70:	e008      	b.n	8000b84 <main+0x9c>
		case '?':
			LCD_Clear_Screen();
 8000b72:	f7ff fd21 	bl	80005b8 <LCD_Clear_Screen>
			break;
 8000b76:	e005      	b.n	8000b84 <main+0x9c>
		default:
			LCD_Send_Character(key_pressed);
 8000b78:	79bb      	ldrb	r3, [r7, #6]
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fd45 	bl	800060c <LCD_Send_Character>
			break;
 8000b82:	bf00      	nop
		key_pressed = keypad_GetKey();
 8000b84:	e7ea      	b.n	8000b5c <main+0x74>
 8000b86:	bf00      	nop
 8000b88:	080015d0 	.word	0x080015d0
 8000b8c:	20000020 	.word	0x20000020
 8000b90:	40010c00 	.word	0x40010c00
 8000b94:	080015d4 	.word	0x080015d4

08000b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba0:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <_sbrk+0x5c>)
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <_sbrk+0x60>)
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <_sbrk+0x64>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <_sbrk+0x68>)
 8000bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d207      	bcs.n	8000bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc8:	f000 f846 	bl	8000c58 <__errno>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	220c      	movs	r2, #12
 8000bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	e009      	b.n	8000bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <_sbrk+0x64>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <_sbrk+0x64>)
 8000be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bea:	68fb      	ldr	r3, [r7, #12]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20002800 	.word	0x20002800
 8000bf8:	00000400 	.word	0x00000400
 8000bfc:	200000ac 	.word	0x200000ac
 8000c00:	200000c0 	.word	0x200000c0

08000c04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c06:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c08:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c0e:	490d      	ldr	r1, [pc, #52]	; (8000c44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c10:	4a0d      	ldr	r2, [pc, #52]	; (8000c48 <LoopForever+0xe>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c24:	4c0a      	ldr	r4, [pc, #40]	; (8000c50 <LoopForever+0x16>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c32:	f000 f817 	bl	8000c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c36:	f7ff ff57 	bl	8000ae8 <main>

08000c3a <LoopForever>:

LoopForever:
  b LoopForever
 8000c3a:	e7fe      	b.n	8000c3a <LoopForever>
  ldr   r0, =_estack
 8000c3c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c44:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000c48:	08001620 	.word	0x08001620
  ldr r2, =_sbss
 8000c4c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000c50:	200000c0 	.word	0x200000c0

08000c54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC1_2_IRQHandler>
	...

08000c58 <__errno>:
 8000c58:	4b01      	ldr	r3, [pc, #4]	; (8000c60 <__errno+0x8>)
 8000c5a:	6818      	ldr	r0, [r3, #0]
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	2000002c 	.word	0x2000002c

08000c64 <__libc_init_array>:
 8000c64:	b570      	push	{r4, r5, r6, lr}
 8000c66:	2600      	movs	r6, #0
 8000c68:	4d0c      	ldr	r5, [pc, #48]	; (8000c9c <__libc_init_array+0x38>)
 8000c6a:	4c0d      	ldr	r4, [pc, #52]	; (8000ca0 <__libc_init_array+0x3c>)
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	10a4      	asrs	r4, r4, #2
 8000c70:	42a6      	cmp	r6, r4
 8000c72:	d109      	bne.n	8000c88 <__libc_init_array+0x24>
 8000c74:	f000 fc94 	bl	80015a0 <_init>
 8000c78:	2600      	movs	r6, #0
 8000c7a:	4d0a      	ldr	r5, [pc, #40]	; (8000ca4 <__libc_init_array+0x40>)
 8000c7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ca8 <__libc_init_array+0x44>)
 8000c7e:	1b64      	subs	r4, r4, r5
 8000c80:	10a4      	asrs	r4, r4, #2
 8000c82:	42a6      	cmp	r6, r4
 8000c84:	d105      	bne.n	8000c92 <__libc_init_array+0x2e>
 8000c86:	bd70      	pop	{r4, r5, r6, pc}
 8000c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c8c:	4798      	blx	r3
 8000c8e:	3601      	adds	r6, #1
 8000c90:	e7ee      	b.n	8000c70 <__libc_init_array+0xc>
 8000c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c96:	4798      	blx	r3
 8000c98:	3601      	adds	r6, #1
 8000c9a:	e7f2      	b.n	8000c82 <__libc_init_array+0x1e>
 8000c9c:	08001618 	.word	0x08001618
 8000ca0:	08001618 	.word	0x08001618
 8000ca4:	08001618 	.word	0x08001618
 8000ca8:	0800161c 	.word	0x0800161c

08000cac <siprintf>:
 8000cac:	b40e      	push	{r1, r2, r3}
 8000cae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000cb2:	b500      	push	{lr}
 8000cb4:	b09c      	sub	sp, #112	; 0x70
 8000cb6:	ab1d      	add	r3, sp, #116	; 0x74
 8000cb8:	9002      	str	r0, [sp, #8]
 8000cba:	9006      	str	r0, [sp, #24]
 8000cbc:	9107      	str	r1, [sp, #28]
 8000cbe:	9104      	str	r1, [sp, #16]
 8000cc0:	4808      	ldr	r0, [pc, #32]	; (8000ce4 <siprintf+0x38>)
 8000cc2:	4909      	ldr	r1, [pc, #36]	; (8000ce8 <siprintf+0x3c>)
 8000cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8000cc8:	9105      	str	r1, [sp, #20]
 8000cca:	6800      	ldr	r0, [r0, #0]
 8000ccc:	a902      	add	r1, sp, #8
 8000cce:	9301      	str	r3, [sp, #4]
 8000cd0:	f000 f868 	bl	8000da4 <_svfiprintf_r>
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	9b02      	ldr	r3, [sp, #8]
 8000cd8:	701a      	strb	r2, [r3, #0]
 8000cda:	b01c      	add	sp, #112	; 0x70
 8000cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ce0:	b003      	add	sp, #12
 8000ce2:	4770      	bx	lr
 8000ce4:	2000002c 	.word	0x2000002c
 8000ce8:	ffff0208 	.word	0xffff0208

08000cec <__ssputs_r>:
 8000cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	688e      	ldr	r6, [r1, #8]
 8000cf2:	4682      	mov	sl, r0
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	460c      	mov	r4, r1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	461f      	mov	r7, r3
 8000cfc:	d838      	bhi.n	8000d70 <__ssputs_r+0x84>
 8000cfe:	898a      	ldrh	r2, [r1, #12]
 8000d00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000d04:	d032      	beq.n	8000d6c <__ssputs_r+0x80>
 8000d06:	6825      	ldr	r5, [r4, #0]
 8000d08:	6909      	ldr	r1, [r1, #16]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	eba5 0901 	sub.w	r9, r5, r1
 8000d10:	6965      	ldr	r5, [r4, #20]
 8000d12:	444b      	add	r3, r9
 8000d14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000d18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000d1c:	106d      	asrs	r5, r5, #1
 8000d1e:	429d      	cmp	r5, r3
 8000d20:	bf38      	it	cc
 8000d22:	461d      	movcc	r5, r3
 8000d24:	0553      	lsls	r3, r2, #21
 8000d26:	d531      	bpl.n	8000d8c <__ssputs_r+0xa0>
 8000d28:	4629      	mov	r1, r5
 8000d2a:	f000 fb6f 	bl	800140c <_malloc_r>
 8000d2e:	4606      	mov	r6, r0
 8000d30:	b950      	cbnz	r0, 8000d48 <__ssputs_r+0x5c>
 8000d32:	230c      	movs	r3, #12
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f8ca 3000 	str.w	r3, [sl]
 8000d3c:	89a3      	ldrh	r3, [r4, #12]
 8000d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d42:	81a3      	strh	r3, [r4, #12]
 8000d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d48:	464a      	mov	r2, r9
 8000d4a:	6921      	ldr	r1, [r4, #16]
 8000d4c:	f000 face 	bl	80012ec <memcpy>
 8000d50:	89a3      	ldrh	r3, [r4, #12]
 8000d52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d5a:	81a3      	strh	r3, [r4, #12]
 8000d5c:	6126      	str	r6, [r4, #16]
 8000d5e:	444e      	add	r6, r9
 8000d60:	6026      	str	r6, [r4, #0]
 8000d62:	463e      	mov	r6, r7
 8000d64:	6165      	str	r5, [r4, #20]
 8000d66:	eba5 0509 	sub.w	r5, r5, r9
 8000d6a:	60a5      	str	r5, [r4, #8]
 8000d6c:	42be      	cmp	r6, r7
 8000d6e:	d900      	bls.n	8000d72 <__ssputs_r+0x86>
 8000d70:	463e      	mov	r6, r7
 8000d72:	4632      	mov	r2, r6
 8000d74:	4641      	mov	r1, r8
 8000d76:	6820      	ldr	r0, [r4, #0]
 8000d78:	f000 fac6 	bl	8001308 <memmove>
 8000d7c:	68a3      	ldr	r3, [r4, #8]
 8000d7e:	2000      	movs	r0, #0
 8000d80:	1b9b      	subs	r3, r3, r6
 8000d82:	60a3      	str	r3, [r4, #8]
 8000d84:	6823      	ldr	r3, [r4, #0]
 8000d86:	4433      	add	r3, r6
 8000d88:	6023      	str	r3, [r4, #0]
 8000d8a:	e7db      	b.n	8000d44 <__ssputs_r+0x58>
 8000d8c:	462a      	mov	r2, r5
 8000d8e:	f000 fbb1 	bl	80014f4 <_realloc_r>
 8000d92:	4606      	mov	r6, r0
 8000d94:	2800      	cmp	r0, #0
 8000d96:	d1e1      	bne.n	8000d5c <__ssputs_r+0x70>
 8000d98:	4650      	mov	r0, sl
 8000d9a:	6921      	ldr	r1, [r4, #16]
 8000d9c:	f000 face 	bl	800133c <_free_r>
 8000da0:	e7c7      	b.n	8000d32 <__ssputs_r+0x46>
	...

08000da4 <_svfiprintf_r>:
 8000da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000da8:	4698      	mov	r8, r3
 8000daa:	898b      	ldrh	r3, [r1, #12]
 8000dac:	4607      	mov	r7, r0
 8000dae:	061b      	lsls	r3, r3, #24
 8000db0:	460d      	mov	r5, r1
 8000db2:	4614      	mov	r4, r2
 8000db4:	b09d      	sub	sp, #116	; 0x74
 8000db6:	d50e      	bpl.n	8000dd6 <_svfiprintf_r+0x32>
 8000db8:	690b      	ldr	r3, [r1, #16]
 8000dba:	b963      	cbnz	r3, 8000dd6 <_svfiprintf_r+0x32>
 8000dbc:	2140      	movs	r1, #64	; 0x40
 8000dbe:	f000 fb25 	bl	800140c <_malloc_r>
 8000dc2:	6028      	str	r0, [r5, #0]
 8000dc4:	6128      	str	r0, [r5, #16]
 8000dc6:	b920      	cbnz	r0, 8000dd2 <_svfiprintf_r+0x2e>
 8000dc8:	230c      	movs	r3, #12
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	e0d1      	b.n	8000f76 <_svfiprintf_r+0x1d2>
 8000dd2:	2340      	movs	r3, #64	; 0x40
 8000dd4:	616b      	str	r3, [r5, #20]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8000dda:	2320      	movs	r3, #32
 8000ddc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000de0:	2330      	movs	r3, #48	; 0x30
 8000de2:	f04f 0901 	mov.w	r9, #1
 8000de6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000dea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000f90 <_svfiprintf_r+0x1ec>
 8000dee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000df2:	4623      	mov	r3, r4
 8000df4:	469a      	mov	sl, r3
 8000df6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000dfa:	b10a      	cbz	r2, 8000e00 <_svfiprintf_r+0x5c>
 8000dfc:	2a25      	cmp	r2, #37	; 0x25
 8000dfe:	d1f9      	bne.n	8000df4 <_svfiprintf_r+0x50>
 8000e00:	ebba 0b04 	subs.w	fp, sl, r4
 8000e04:	d00b      	beq.n	8000e1e <_svfiprintf_r+0x7a>
 8000e06:	465b      	mov	r3, fp
 8000e08:	4622      	mov	r2, r4
 8000e0a:	4629      	mov	r1, r5
 8000e0c:	4638      	mov	r0, r7
 8000e0e:	f7ff ff6d 	bl	8000cec <__ssputs_r>
 8000e12:	3001      	adds	r0, #1
 8000e14:	f000 80aa 	beq.w	8000f6c <_svfiprintf_r+0x1c8>
 8000e18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000e1a:	445a      	add	r2, fp
 8000e1c:	9209      	str	r2, [sp, #36]	; 0x24
 8000e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f000 80a2 	beq.w	8000f6c <_svfiprintf_r+0x1c8>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e32:	f10a 0a01 	add.w	sl, sl, #1
 8000e36:	9304      	str	r3, [sp, #16]
 8000e38:	9307      	str	r3, [sp, #28]
 8000e3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000e3e:	931a      	str	r3, [sp, #104]	; 0x68
 8000e40:	4654      	mov	r4, sl
 8000e42:	2205      	movs	r2, #5
 8000e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e48:	4851      	ldr	r0, [pc, #324]	; (8000f90 <_svfiprintf_r+0x1ec>)
 8000e4a:	f000 fa41 	bl	80012d0 <memchr>
 8000e4e:	9a04      	ldr	r2, [sp, #16]
 8000e50:	b9d8      	cbnz	r0, 8000e8a <_svfiprintf_r+0xe6>
 8000e52:	06d0      	lsls	r0, r2, #27
 8000e54:	bf44      	itt	mi
 8000e56:	2320      	movmi	r3, #32
 8000e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e5c:	0711      	lsls	r1, r2, #28
 8000e5e:	bf44      	itt	mi
 8000e60:	232b      	movmi	r3, #43	; 0x2b
 8000e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e66:	f89a 3000 	ldrb.w	r3, [sl]
 8000e6a:	2b2a      	cmp	r3, #42	; 0x2a
 8000e6c:	d015      	beq.n	8000e9a <_svfiprintf_r+0xf6>
 8000e6e:	4654      	mov	r4, sl
 8000e70:	2000      	movs	r0, #0
 8000e72:	f04f 0c0a 	mov.w	ip, #10
 8000e76:	9a07      	ldr	r2, [sp, #28]
 8000e78:	4621      	mov	r1, r4
 8000e7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e7e:	3b30      	subs	r3, #48	; 0x30
 8000e80:	2b09      	cmp	r3, #9
 8000e82:	d94e      	bls.n	8000f22 <_svfiprintf_r+0x17e>
 8000e84:	b1b0      	cbz	r0, 8000eb4 <_svfiprintf_r+0x110>
 8000e86:	9207      	str	r2, [sp, #28]
 8000e88:	e014      	b.n	8000eb4 <_svfiprintf_r+0x110>
 8000e8a:	eba0 0308 	sub.w	r3, r0, r8
 8000e8e:	fa09 f303 	lsl.w	r3, r9, r3
 8000e92:	4313      	orrs	r3, r2
 8000e94:	46a2      	mov	sl, r4
 8000e96:	9304      	str	r3, [sp, #16]
 8000e98:	e7d2      	b.n	8000e40 <_svfiprintf_r+0x9c>
 8000e9a:	9b03      	ldr	r3, [sp, #12]
 8000e9c:	1d19      	adds	r1, r3, #4
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	9103      	str	r1, [sp, #12]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	bfbb      	ittet	lt
 8000ea6:	425b      	neglt	r3, r3
 8000ea8:	f042 0202 	orrlt.w	r2, r2, #2
 8000eac:	9307      	strge	r3, [sp, #28]
 8000eae:	9307      	strlt	r3, [sp, #28]
 8000eb0:	bfb8      	it	lt
 8000eb2:	9204      	strlt	r2, [sp, #16]
 8000eb4:	7823      	ldrb	r3, [r4, #0]
 8000eb6:	2b2e      	cmp	r3, #46	; 0x2e
 8000eb8:	d10c      	bne.n	8000ed4 <_svfiprintf_r+0x130>
 8000eba:	7863      	ldrb	r3, [r4, #1]
 8000ebc:	2b2a      	cmp	r3, #42	; 0x2a
 8000ebe:	d135      	bne.n	8000f2c <_svfiprintf_r+0x188>
 8000ec0:	9b03      	ldr	r3, [sp, #12]
 8000ec2:	3402      	adds	r4, #2
 8000ec4:	1d1a      	adds	r2, r3, #4
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	9203      	str	r2, [sp, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	bfb8      	it	lt
 8000ece:	f04f 33ff 	movlt.w	r3, #4294967295
 8000ed2:	9305      	str	r3, [sp, #20]
 8000ed4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8000f94 <_svfiprintf_r+0x1f0>
 8000ed8:	2203      	movs	r2, #3
 8000eda:	4650      	mov	r0, sl
 8000edc:	7821      	ldrb	r1, [r4, #0]
 8000ede:	f000 f9f7 	bl	80012d0 <memchr>
 8000ee2:	b140      	cbz	r0, 8000ef6 <_svfiprintf_r+0x152>
 8000ee4:	2340      	movs	r3, #64	; 0x40
 8000ee6:	eba0 000a 	sub.w	r0, r0, sl
 8000eea:	fa03 f000 	lsl.w	r0, r3, r0
 8000eee:	9b04      	ldr	r3, [sp, #16]
 8000ef0:	3401      	adds	r4, #1
 8000ef2:	4303      	orrs	r3, r0
 8000ef4:	9304      	str	r3, [sp, #16]
 8000ef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000efa:	2206      	movs	r2, #6
 8000efc:	4826      	ldr	r0, [pc, #152]	; (8000f98 <_svfiprintf_r+0x1f4>)
 8000efe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000f02:	f000 f9e5 	bl	80012d0 <memchr>
 8000f06:	2800      	cmp	r0, #0
 8000f08:	d038      	beq.n	8000f7c <_svfiprintf_r+0x1d8>
 8000f0a:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <_svfiprintf_r+0x1f8>)
 8000f0c:	bb1b      	cbnz	r3, 8000f56 <_svfiprintf_r+0x1b2>
 8000f0e:	9b03      	ldr	r3, [sp, #12]
 8000f10:	3307      	adds	r3, #7
 8000f12:	f023 0307 	bic.w	r3, r3, #7
 8000f16:	3308      	adds	r3, #8
 8000f18:	9303      	str	r3, [sp, #12]
 8000f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f1c:	4433      	add	r3, r6
 8000f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8000f20:	e767      	b.n	8000df2 <_svfiprintf_r+0x4e>
 8000f22:	460c      	mov	r4, r1
 8000f24:	2001      	movs	r0, #1
 8000f26:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f2a:	e7a5      	b.n	8000e78 <_svfiprintf_r+0xd4>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f04f 0c0a 	mov.w	ip, #10
 8000f32:	4619      	mov	r1, r3
 8000f34:	3401      	adds	r4, #1
 8000f36:	9305      	str	r3, [sp, #20]
 8000f38:	4620      	mov	r0, r4
 8000f3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f3e:	3a30      	subs	r2, #48	; 0x30
 8000f40:	2a09      	cmp	r2, #9
 8000f42:	d903      	bls.n	8000f4c <_svfiprintf_r+0x1a8>
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0c5      	beq.n	8000ed4 <_svfiprintf_r+0x130>
 8000f48:	9105      	str	r1, [sp, #20]
 8000f4a:	e7c3      	b.n	8000ed4 <_svfiprintf_r+0x130>
 8000f4c:	4604      	mov	r4, r0
 8000f4e:	2301      	movs	r3, #1
 8000f50:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f54:	e7f0      	b.n	8000f38 <_svfiprintf_r+0x194>
 8000f56:	ab03      	add	r3, sp, #12
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	462a      	mov	r2, r5
 8000f5c:	4638      	mov	r0, r7
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <_svfiprintf_r+0x1fc>)
 8000f60:	a904      	add	r1, sp, #16
 8000f62:	f3af 8000 	nop.w
 8000f66:	1c42      	adds	r2, r0, #1
 8000f68:	4606      	mov	r6, r0
 8000f6a:	d1d6      	bne.n	8000f1a <_svfiprintf_r+0x176>
 8000f6c:	89ab      	ldrh	r3, [r5, #12]
 8000f6e:	065b      	lsls	r3, r3, #25
 8000f70:	f53f af2c 	bmi.w	8000dcc <_svfiprintf_r+0x28>
 8000f74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f76:	b01d      	add	sp, #116	; 0x74
 8000f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f7c:	ab03      	add	r3, sp, #12
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	462a      	mov	r2, r5
 8000f82:	4638      	mov	r0, r7
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <_svfiprintf_r+0x1fc>)
 8000f86:	a904      	add	r1, sp, #16
 8000f88:	f000 f87c 	bl	8001084 <_printf_i>
 8000f8c:	e7eb      	b.n	8000f66 <_svfiprintf_r+0x1c2>
 8000f8e:	bf00      	nop
 8000f90:	080015e4 	.word	0x080015e4
 8000f94:	080015ea 	.word	0x080015ea
 8000f98:	080015ee 	.word	0x080015ee
 8000f9c:	00000000 	.word	0x00000000
 8000fa0:	08000ced 	.word	0x08000ced

08000fa4 <_printf_common>:
 8000fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fa8:	4616      	mov	r6, r2
 8000faa:	4699      	mov	r9, r3
 8000fac:	688a      	ldr	r2, [r1, #8]
 8000fae:	690b      	ldr	r3, [r1, #16]
 8000fb0:	4607      	mov	r7, r0
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	bfb8      	it	lt
 8000fb6:	4613      	movlt	r3, r2
 8000fb8:	6033      	str	r3, [r6, #0]
 8000fba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000fbe:	460c      	mov	r4, r1
 8000fc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000fc4:	b10a      	cbz	r2, 8000fca <_printf_common+0x26>
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	6033      	str	r3, [r6, #0]
 8000fca:	6823      	ldr	r3, [r4, #0]
 8000fcc:	0699      	lsls	r1, r3, #26
 8000fce:	bf42      	ittt	mi
 8000fd0:	6833      	ldrmi	r3, [r6, #0]
 8000fd2:	3302      	addmi	r3, #2
 8000fd4:	6033      	strmi	r3, [r6, #0]
 8000fd6:	6825      	ldr	r5, [r4, #0]
 8000fd8:	f015 0506 	ands.w	r5, r5, #6
 8000fdc:	d106      	bne.n	8000fec <_printf_common+0x48>
 8000fde:	f104 0a19 	add.w	sl, r4, #25
 8000fe2:	68e3      	ldr	r3, [r4, #12]
 8000fe4:	6832      	ldr	r2, [r6, #0]
 8000fe6:	1a9b      	subs	r3, r3, r2
 8000fe8:	42ab      	cmp	r3, r5
 8000fea:	dc28      	bgt.n	800103e <_printf_common+0x9a>
 8000fec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000ff0:	1e13      	subs	r3, r2, #0
 8000ff2:	6822      	ldr	r2, [r4, #0]
 8000ff4:	bf18      	it	ne
 8000ff6:	2301      	movne	r3, #1
 8000ff8:	0692      	lsls	r2, r2, #26
 8000ffa:	d42d      	bmi.n	8001058 <_printf_common+0xb4>
 8000ffc:	4649      	mov	r1, r9
 8000ffe:	4638      	mov	r0, r7
 8001000:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001004:	47c0      	blx	r8
 8001006:	3001      	adds	r0, #1
 8001008:	d020      	beq.n	800104c <_printf_common+0xa8>
 800100a:	6823      	ldr	r3, [r4, #0]
 800100c:	68e5      	ldr	r5, [r4, #12]
 800100e:	f003 0306 	and.w	r3, r3, #6
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf18      	it	ne
 8001016:	2500      	movne	r5, #0
 8001018:	6832      	ldr	r2, [r6, #0]
 800101a:	f04f 0600 	mov.w	r6, #0
 800101e:	68a3      	ldr	r3, [r4, #8]
 8001020:	bf08      	it	eq
 8001022:	1aad      	subeq	r5, r5, r2
 8001024:	6922      	ldr	r2, [r4, #16]
 8001026:	bf08      	it	eq
 8001028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800102c:	4293      	cmp	r3, r2
 800102e:	bfc4      	itt	gt
 8001030:	1a9b      	subgt	r3, r3, r2
 8001032:	18ed      	addgt	r5, r5, r3
 8001034:	341a      	adds	r4, #26
 8001036:	42b5      	cmp	r5, r6
 8001038:	d11a      	bne.n	8001070 <_printf_common+0xcc>
 800103a:	2000      	movs	r0, #0
 800103c:	e008      	b.n	8001050 <_printf_common+0xac>
 800103e:	2301      	movs	r3, #1
 8001040:	4652      	mov	r2, sl
 8001042:	4649      	mov	r1, r9
 8001044:	4638      	mov	r0, r7
 8001046:	47c0      	blx	r8
 8001048:	3001      	adds	r0, #1
 800104a:	d103      	bne.n	8001054 <_printf_common+0xb0>
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001054:	3501      	adds	r5, #1
 8001056:	e7c4      	b.n	8000fe2 <_printf_common+0x3e>
 8001058:	2030      	movs	r0, #48	; 0x30
 800105a:	18e1      	adds	r1, r4, r3
 800105c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001066:	4422      	add	r2, r4
 8001068:	3302      	adds	r3, #2
 800106a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800106e:	e7c5      	b.n	8000ffc <_printf_common+0x58>
 8001070:	2301      	movs	r3, #1
 8001072:	4622      	mov	r2, r4
 8001074:	4649      	mov	r1, r9
 8001076:	4638      	mov	r0, r7
 8001078:	47c0      	blx	r8
 800107a:	3001      	adds	r0, #1
 800107c:	d0e6      	beq.n	800104c <_printf_common+0xa8>
 800107e:	3601      	adds	r6, #1
 8001080:	e7d9      	b.n	8001036 <_printf_common+0x92>
	...

08001084 <_printf_i>:
 8001084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001088:	7e0f      	ldrb	r7, [r1, #24]
 800108a:	4691      	mov	r9, r2
 800108c:	2f78      	cmp	r7, #120	; 0x78
 800108e:	4680      	mov	r8, r0
 8001090:	460c      	mov	r4, r1
 8001092:	469a      	mov	sl, r3
 8001094:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001096:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800109a:	d807      	bhi.n	80010ac <_printf_i+0x28>
 800109c:	2f62      	cmp	r7, #98	; 0x62
 800109e:	d80a      	bhi.n	80010b6 <_printf_i+0x32>
 80010a0:	2f00      	cmp	r7, #0
 80010a2:	f000 80d9 	beq.w	8001258 <_printf_i+0x1d4>
 80010a6:	2f58      	cmp	r7, #88	; 0x58
 80010a8:	f000 80a4 	beq.w	80011f4 <_printf_i+0x170>
 80010ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80010b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80010b4:	e03a      	b.n	800112c <_printf_i+0xa8>
 80010b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80010ba:	2b15      	cmp	r3, #21
 80010bc:	d8f6      	bhi.n	80010ac <_printf_i+0x28>
 80010be:	a101      	add	r1, pc, #4	; (adr r1, 80010c4 <_printf_i+0x40>)
 80010c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80010c4:	0800111d 	.word	0x0800111d
 80010c8:	08001131 	.word	0x08001131
 80010cc:	080010ad 	.word	0x080010ad
 80010d0:	080010ad 	.word	0x080010ad
 80010d4:	080010ad 	.word	0x080010ad
 80010d8:	080010ad 	.word	0x080010ad
 80010dc:	08001131 	.word	0x08001131
 80010e0:	080010ad 	.word	0x080010ad
 80010e4:	080010ad 	.word	0x080010ad
 80010e8:	080010ad 	.word	0x080010ad
 80010ec:	080010ad 	.word	0x080010ad
 80010f0:	0800123f 	.word	0x0800123f
 80010f4:	08001161 	.word	0x08001161
 80010f8:	08001221 	.word	0x08001221
 80010fc:	080010ad 	.word	0x080010ad
 8001100:	080010ad 	.word	0x080010ad
 8001104:	08001261 	.word	0x08001261
 8001108:	080010ad 	.word	0x080010ad
 800110c:	08001161 	.word	0x08001161
 8001110:	080010ad 	.word	0x080010ad
 8001114:	080010ad 	.word	0x080010ad
 8001118:	08001229 	.word	0x08001229
 800111c:	682b      	ldr	r3, [r5, #0]
 800111e:	1d1a      	adds	r2, r3, #4
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	602a      	str	r2, [r5, #0]
 8001124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001128:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800112c:	2301      	movs	r3, #1
 800112e:	e0a4      	b.n	800127a <_printf_i+0x1f6>
 8001130:	6820      	ldr	r0, [r4, #0]
 8001132:	6829      	ldr	r1, [r5, #0]
 8001134:	0606      	lsls	r6, r0, #24
 8001136:	f101 0304 	add.w	r3, r1, #4
 800113a:	d50a      	bpl.n	8001152 <_printf_i+0xce>
 800113c:	680e      	ldr	r6, [r1, #0]
 800113e:	602b      	str	r3, [r5, #0]
 8001140:	2e00      	cmp	r6, #0
 8001142:	da03      	bge.n	800114c <_printf_i+0xc8>
 8001144:	232d      	movs	r3, #45	; 0x2d
 8001146:	4276      	negs	r6, r6
 8001148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800114c:	230a      	movs	r3, #10
 800114e:	485e      	ldr	r0, [pc, #376]	; (80012c8 <_printf_i+0x244>)
 8001150:	e019      	b.n	8001186 <_printf_i+0x102>
 8001152:	680e      	ldr	r6, [r1, #0]
 8001154:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001158:	602b      	str	r3, [r5, #0]
 800115a:	bf18      	it	ne
 800115c:	b236      	sxthne	r6, r6
 800115e:	e7ef      	b.n	8001140 <_printf_i+0xbc>
 8001160:	682b      	ldr	r3, [r5, #0]
 8001162:	6820      	ldr	r0, [r4, #0]
 8001164:	1d19      	adds	r1, r3, #4
 8001166:	6029      	str	r1, [r5, #0]
 8001168:	0601      	lsls	r1, r0, #24
 800116a:	d501      	bpl.n	8001170 <_printf_i+0xec>
 800116c:	681e      	ldr	r6, [r3, #0]
 800116e:	e002      	b.n	8001176 <_printf_i+0xf2>
 8001170:	0646      	lsls	r6, r0, #25
 8001172:	d5fb      	bpl.n	800116c <_printf_i+0xe8>
 8001174:	881e      	ldrh	r6, [r3, #0]
 8001176:	2f6f      	cmp	r7, #111	; 0x6f
 8001178:	bf0c      	ite	eq
 800117a:	2308      	moveq	r3, #8
 800117c:	230a      	movne	r3, #10
 800117e:	4852      	ldr	r0, [pc, #328]	; (80012c8 <_printf_i+0x244>)
 8001180:	2100      	movs	r1, #0
 8001182:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001186:	6865      	ldr	r5, [r4, #4]
 8001188:	2d00      	cmp	r5, #0
 800118a:	bfa8      	it	ge
 800118c:	6821      	ldrge	r1, [r4, #0]
 800118e:	60a5      	str	r5, [r4, #8]
 8001190:	bfa4      	itt	ge
 8001192:	f021 0104 	bicge.w	r1, r1, #4
 8001196:	6021      	strge	r1, [r4, #0]
 8001198:	b90e      	cbnz	r6, 800119e <_printf_i+0x11a>
 800119a:	2d00      	cmp	r5, #0
 800119c:	d04d      	beq.n	800123a <_printf_i+0x1b6>
 800119e:	4615      	mov	r5, r2
 80011a0:	fbb6 f1f3 	udiv	r1, r6, r3
 80011a4:	fb03 6711 	mls	r7, r3, r1, r6
 80011a8:	5dc7      	ldrb	r7, [r0, r7]
 80011aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80011ae:	4637      	mov	r7, r6
 80011b0:	42bb      	cmp	r3, r7
 80011b2:	460e      	mov	r6, r1
 80011b4:	d9f4      	bls.n	80011a0 <_printf_i+0x11c>
 80011b6:	2b08      	cmp	r3, #8
 80011b8:	d10b      	bne.n	80011d2 <_printf_i+0x14e>
 80011ba:	6823      	ldr	r3, [r4, #0]
 80011bc:	07de      	lsls	r6, r3, #31
 80011be:	d508      	bpl.n	80011d2 <_printf_i+0x14e>
 80011c0:	6923      	ldr	r3, [r4, #16]
 80011c2:	6861      	ldr	r1, [r4, #4]
 80011c4:	4299      	cmp	r1, r3
 80011c6:	bfde      	ittt	le
 80011c8:	2330      	movle	r3, #48	; 0x30
 80011ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80011ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80011d2:	1b52      	subs	r2, r2, r5
 80011d4:	6122      	str	r2, [r4, #16]
 80011d6:	464b      	mov	r3, r9
 80011d8:	4621      	mov	r1, r4
 80011da:	4640      	mov	r0, r8
 80011dc:	f8cd a000 	str.w	sl, [sp]
 80011e0:	aa03      	add	r2, sp, #12
 80011e2:	f7ff fedf 	bl	8000fa4 <_printf_common>
 80011e6:	3001      	adds	r0, #1
 80011e8:	d14c      	bne.n	8001284 <_printf_i+0x200>
 80011ea:	f04f 30ff 	mov.w	r0, #4294967295
 80011ee:	b004      	add	sp, #16
 80011f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011f4:	4834      	ldr	r0, [pc, #208]	; (80012c8 <_printf_i+0x244>)
 80011f6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80011fa:	6829      	ldr	r1, [r5, #0]
 80011fc:	6823      	ldr	r3, [r4, #0]
 80011fe:	f851 6b04 	ldr.w	r6, [r1], #4
 8001202:	6029      	str	r1, [r5, #0]
 8001204:	061d      	lsls	r5, r3, #24
 8001206:	d514      	bpl.n	8001232 <_printf_i+0x1ae>
 8001208:	07df      	lsls	r7, r3, #31
 800120a:	bf44      	itt	mi
 800120c:	f043 0320 	orrmi.w	r3, r3, #32
 8001210:	6023      	strmi	r3, [r4, #0]
 8001212:	b91e      	cbnz	r6, 800121c <_printf_i+0x198>
 8001214:	6823      	ldr	r3, [r4, #0]
 8001216:	f023 0320 	bic.w	r3, r3, #32
 800121a:	6023      	str	r3, [r4, #0]
 800121c:	2310      	movs	r3, #16
 800121e:	e7af      	b.n	8001180 <_printf_i+0xfc>
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	f043 0320 	orr.w	r3, r3, #32
 8001226:	6023      	str	r3, [r4, #0]
 8001228:	2378      	movs	r3, #120	; 0x78
 800122a:	4828      	ldr	r0, [pc, #160]	; (80012cc <_printf_i+0x248>)
 800122c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001230:	e7e3      	b.n	80011fa <_printf_i+0x176>
 8001232:	0659      	lsls	r1, r3, #25
 8001234:	bf48      	it	mi
 8001236:	b2b6      	uxthmi	r6, r6
 8001238:	e7e6      	b.n	8001208 <_printf_i+0x184>
 800123a:	4615      	mov	r5, r2
 800123c:	e7bb      	b.n	80011b6 <_printf_i+0x132>
 800123e:	682b      	ldr	r3, [r5, #0]
 8001240:	6826      	ldr	r6, [r4, #0]
 8001242:	1d18      	adds	r0, r3, #4
 8001244:	6961      	ldr	r1, [r4, #20]
 8001246:	6028      	str	r0, [r5, #0]
 8001248:	0635      	lsls	r5, r6, #24
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	d501      	bpl.n	8001252 <_printf_i+0x1ce>
 800124e:	6019      	str	r1, [r3, #0]
 8001250:	e002      	b.n	8001258 <_printf_i+0x1d4>
 8001252:	0670      	lsls	r0, r6, #25
 8001254:	d5fb      	bpl.n	800124e <_printf_i+0x1ca>
 8001256:	8019      	strh	r1, [r3, #0]
 8001258:	2300      	movs	r3, #0
 800125a:	4615      	mov	r5, r2
 800125c:	6123      	str	r3, [r4, #16]
 800125e:	e7ba      	b.n	80011d6 <_printf_i+0x152>
 8001260:	682b      	ldr	r3, [r5, #0]
 8001262:	2100      	movs	r1, #0
 8001264:	1d1a      	adds	r2, r3, #4
 8001266:	602a      	str	r2, [r5, #0]
 8001268:	681d      	ldr	r5, [r3, #0]
 800126a:	6862      	ldr	r2, [r4, #4]
 800126c:	4628      	mov	r0, r5
 800126e:	f000 f82f 	bl	80012d0 <memchr>
 8001272:	b108      	cbz	r0, 8001278 <_printf_i+0x1f4>
 8001274:	1b40      	subs	r0, r0, r5
 8001276:	6060      	str	r0, [r4, #4]
 8001278:	6863      	ldr	r3, [r4, #4]
 800127a:	6123      	str	r3, [r4, #16]
 800127c:	2300      	movs	r3, #0
 800127e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001282:	e7a8      	b.n	80011d6 <_printf_i+0x152>
 8001284:	462a      	mov	r2, r5
 8001286:	4649      	mov	r1, r9
 8001288:	4640      	mov	r0, r8
 800128a:	6923      	ldr	r3, [r4, #16]
 800128c:	47d0      	blx	sl
 800128e:	3001      	adds	r0, #1
 8001290:	d0ab      	beq.n	80011ea <_printf_i+0x166>
 8001292:	6823      	ldr	r3, [r4, #0]
 8001294:	079b      	lsls	r3, r3, #30
 8001296:	d413      	bmi.n	80012c0 <_printf_i+0x23c>
 8001298:	68e0      	ldr	r0, [r4, #12]
 800129a:	9b03      	ldr	r3, [sp, #12]
 800129c:	4298      	cmp	r0, r3
 800129e:	bfb8      	it	lt
 80012a0:	4618      	movlt	r0, r3
 80012a2:	e7a4      	b.n	80011ee <_printf_i+0x16a>
 80012a4:	2301      	movs	r3, #1
 80012a6:	4632      	mov	r2, r6
 80012a8:	4649      	mov	r1, r9
 80012aa:	4640      	mov	r0, r8
 80012ac:	47d0      	blx	sl
 80012ae:	3001      	adds	r0, #1
 80012b0:	d09b      	beq.n	80011ea <_printf_i+0x166>
 80012b2:	3501      	adds	r5, #1
 80012b4:	68e3      	ldr	r3, [r4, #12]
 80012b6:	9903      	ldr	r1, [sp, #12]
 80012b8:	1a5b      	subs	r3, r3, r1
 80012ba:	42ab      	cmp	r3, r5
 80012bc:	dcf2      	bgt.n	80012a4 <_printf_i+0x220>
 80012be:	e7eb      	b.n	8001298 <_printf_i+0x214>
 80012c0:	2500      	movs	r5, #0
 80012c2:	f104 0619 	add.w	r6, r4, #25
 80012c6:	e7f5      	b.n	80012b4 <_printf_i+0x230>
 80012c8:	080015f5 	.word	0x080015f5
 80012cc:	08001606 	.word	0x08001606

080012d0 <memchr>:
 80012d0:	4603      	mov	r3, r0
 80012d2:	b510      	push	{r4, lr}
 80012d4:	b2c9      	uxtb	r1, r1
 80012d6:	4402      	add	r2, r0
 80012d8:	4293      	cmp	r3, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	d101      	bne.n	80012e2 <memchr+0x12>
 80012de:	2000      	movs	r0, #0
 80012e0:	e003      	b.n	80012ea <memchr+0x1a>
 80012e2:	7804      	ldrb	r4, [r0, #0]
 80012e4:	3301      	adds	r3, #1
 80012e6:	428c      	cmp	r4, r1
 80012e8:	d1f6      	bne.n	80012d8 <memchr+0x8>
 80012ea:	bd10      	pop	{r4, pc}

080012ec <memcpy>:
 80012ec:	440a      	add	r2, r1
 80012ee:	4291      	cmp	r1, r2
 80012f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80012f4:	d100      	bne.n	80012f8 <memcpy+0xc>
 80012f6:	4770      	bx	lr
 80012f8:	b510      	push	{r4, lr}
 80012fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80012fe:	4291      	cmp	r1, r2
 8001300:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001304:	d1f9      	bne.n	80012fa <memcpy+0xe>
 8001306:	bd10      	pop	{r4, pc}

08001308 <memmove>:
 8001308:	4288      	cmp	r0, r1
 800130a:	b510      	push	{r4, lr}
 800130c:	eb01 0402 	add.w	r4, r1, r2
 8001310:	d902      	bls.n	8001318 <memmove+0x10>
 8001312:	4284      	cmp	r4, r0
 8001314:	4623      	mov	r3, r4
 8001316:	d807      	bhi.n	8001328 <memmove+0x20>
 8001318:	1e43      	subs	r3, r0, #1
 800131a:	42a1      	cmp	r1, r4
 800131c:	d008      	beq.n	8001330 <memmove+0x28>
 800131e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001322:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001326:	e7f8      	b.n	800131a <memmove+0x12>
 8001328:	4601      	mov	r1, r0
 800132a:	4402      	add	r2, r0
 800132c:	428a      	cmp	r2, r1
 800132e:	d100      	bne.n	8001332 <memmove+0x2a>
 8001330:	bd10      	pop	{r4, pc}
 8001332:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001336:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800133a:	e7f7      	b.n	800132c <memmove+0x24>

0800133c <_free_r>:
 800133c:	b538      	push	{r3, r4, r5, lr}
 800133e:	4605      	mov	r5, r0
 8001340:	2900      	cmp	r1, #0
 8001342:	d040      	beq.n	80013c6 <_free_r+0x8a>
 8001344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001348:	1f0c      	subs	r4, r1, #4
 800134a:	2b00      	cmp	r3, #0
 800134c:	bfb8      	it	lt
 800134e:	18e4      	addlt	r4, r4, r3
 8001350:	f000 f910 	bl	8001574 <__malloc_lock>
 8001354:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <_free_r+0x8c>)
 8001356:	6813      	ldr	r3, [r2, #0]
 8001358:	b933      	cbnz	r3, 8001368 <_free_r+0x2c>
 800135a:	6063      	str	r3, [r4, #4]
 800135c:	6014      	str	r4, [r2, #0]
 800135e:	4628      	mov	r0, r5
 8001360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001364:	f000 b90c 	b.w	8001580 <__malloc_unlock>
 8001368:	42a3      	cmp	r3, r4
 800136a:	d908      	bls.n	800137e <_free_r+0x42>
 800136c:	6820      	ldr	r0, [r4, #0]
 800136e:	1821      	adds	r1, r4, r0
 8001370:	428b      	cmp	r3, r1
 8001372:	bf01      	itttt	eq
 8001374:	6819      	ldreq	r1, [r3, #0]
 8001376:	685b      	ldreq	r3, [r3, #4]
 8001378:	1809      	addeq	r1, r1, r0
 800137a:	6021      	streq	r1, [r4, #0]
 800137c:	e7ed      	b.n	800135a <_free_r+0x1e>
 800137e:	461a      	mov	r2, r3
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	b10b      	cbz	r3, 8001388 <_free_r+0x4c>
 8001384:	42a3      	cmp	r3, r4
 8001386:	d9fa      	bls.n	800137e <_free_r+0x42>
 8001388:	6811      	ldr	r1, [r2, #0]
 800138a:	1850      	adds	r0, r2, r1
 800138c:	42a0      	cmp	r0, r4
 800138e:	d10b      	bne.n	80013a8 <_free_r+0x6c>
 8001390:	6820      	ldr	r0, [r4, #0]
 8001392:	4401      	add	r1, r0
 8001394:	1850      	adds	r0, r2, r1
 8001396:	4283      	cmp	r3, r0
 8001398:	6011      	str	r1, [r2, #0]
 800139a:	d1e0      	bne.n	800135e <_free_r+0x22>
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	4401      	add	r1, r0
 80013a2:	6011      	str	r1, [r2, #0]
 80013a4:	6053      	str	r3, [r2, #4]
 80013a6:	e7da      	b.n	800135e <_free_r+0x22>
 80013a8:	d902      	bls.n	80013b0 <_free_r+0x74>
 80013aa:	230c      	movs	r3, #12
 80013ac:	602b      	str	r3, [r5, #0]
 80013ae:	e7d6      	b.n	800135e <_free_r+0x22>
 80013b0:	6820      	ldr	r0, [r4, #0]
 80013b2:	1821      	adds	r1, r4, r0
 80013b4:	428b      	cmp	r3, r1
 80013b6:	bf01      	itttt	eq
 80013b8:	6819      	ldreq	r1, [r3, #0]
 80013ba:	685b      	ldreq	r3, [r3, #4]
 80013bc:	1809      	addeq	r1, r1, r0
 80013be:	6021      	streq	r1, [r4, #0]
 80013c0:	6063      	str	r3, [r4, #4]
 80013c2:	6054      	str	r4, [r2, #4]
 80013c4:	e7cb      	b.n	800135e <_free_r+0x22>
 80013c6:	bd38      	pop	{r3, r4, r5, pc}
 80013c8:	200000b0 	.word	0x200000b0

080013cc <sbrk_aligned>:
 80013cc:	b570      	push	{r4, r5, r6, lr}
 80013ce:	4e0e      	ldr	r6, [pc, #56]	; (8001408 <sbrk_aligned+0x3c>)
 80013d0:	460c      	mov	r4, r1
 80013d2:	6831      	ldr	r1, [r6, #0]
 80013d4:	4605      	mov	r5, r0
 80013d6:	b911      	cbnz	r1, 80013de <sbrk_aligned+0x12>
 80013d8:	f000 f8bc 	bl	8001554 <_sbrk_r>
 80013dc:	6030      	str	r0, [r6, #0]
 80013de:	4621      	mov	r1, r4
 80013e0:	4628      	mov	r0, r5
 80013e2:	f000 f8b7 	bl	8001554 <_sbrk_r>
 80013e6:	1c43      	adds	r3, r0, #1
 80013e8:	d00a      	beq.n	8001400 <sbrk_aligned+0x34>
 80013ea:	1cc4      	adds	r4, r0, #3
 80013ec:	f024 0403 	bic.w	r4, r4, #3
 80013f0:	42a0      	cmp	r0, r4
 80013f2:	d007      	beq.n	8001404 <sbrk_aligned+0x38>
 80013f4:	1a21      	subs	r1, r4, r0
 80013f6:	4628      	mov	r0, r5
 80013f8:	f000 f8ac 	bl	8001554 <_sbrk_r>
 80013fc:	3001      	adds	r0, #1
 80013fe:	d101      	bne.n	8001404 <sbrk_aligned+0x38>
 8001400:	f04f 34ff 	mov.w	r4, #4294967295
 8001404:	4620      	mov	r0, r4
 8001406:	bd70      	pop	{r4, r5, r6, pc}
 8001408:	200000b4 	.word	0x200000b4

0800140c <_malloc_r>:
 800140c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001410:	1ccd      	adds	r5, r1, #3
 8001412:	f025 0503 	bic.w	r5, r5, #3
 8001416:	3508      	adds	r5, #8
 8001418:	2d0c      	cmp	r5, #12
 800141a:	bf38      	it	cc
 800141c:	250c      	movcc	r5, #12
 800141e:	2d00      	cmp	r5, #0
 8001420:	4607      	mov	r7, r0
 8001422:	db01      	blt.n	8001428 <_malloc_r+0x1c>
 8001424:	42a9      	cmp	r1, r5
 8001426:	d905      	bls.n	8001434 <_malloc_r+0x28>
 8001428:	230c      	movs	r3, #12
 800142a:	2600      	movs	r6, #0
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	4630      	mov	r0, r6
 8001430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001434:	4e2e      	ldr	r6, [pc, #184]	; (80014f0 <_malloc_r+0xe4>)
 8001436:	f000 f89d 	bl	8001574 <__malloc_lock>
 800143a:	6833      	ldr	r3, [r6, #0]
 800143c:	461c      	mov	r4, r3
 800143e:	bb34      	cbnz	r4, 800148e <_malloc_r+0x82>
 8001440:	4629      	mov	r1, r5
 8001442:	4638      	mov	r0, r7
 8001444:	f7ff ffc2 	bl	80013cc <sbrk_aligned>
 8001448:	1c43      	adds	r3, r0, #1
 800144a:	4604      	mov	r4, r0
 800144c:	d14d      	bne.n	80014ea <_malloc_r+0xde>
 800144e:	6834      	ldr	r4, [r6, #0]
 8001450:	4626      	mov	r6, r4
 8001452:	2e00      	cmp	r6, #0
 8001454:	d140      	bne.n	80014d8 <_malloc_r+0xcc>
 8001456:	6823      	ldr	r3, [r4, #0]
 8001458:	4631      	mov	r1, r6
 800145a:	4638      	mov	r0, r7
 800145c:	eb04 0803 	add.w	r8, r4, r3
 8001460:	f000 f878 	bl	8001554 <_sbrk_r>
 8001464:	4580      	cmp	r8, r0
 8001466:	d13a      	bne.n	80014de <_malloc_r+0xd2>
 8001468:	6821      	ldr	r1, [r4, #0]
 800146a:	3503      	adds	r5, #3
 800146c:	1a6d      	subs	r5, r5, r1
 800146e:	f025 0503 	bic.w	r5, r5, #3
 8001472:	3508      	adds	r5, #8
 8001474:	2d0c      	cmp	r5, #12
 8001476:	bf38      	it	cc
 8001478:	250c      	movcc	r5, #12
 800147a:	4638      	mov	r0, r7
 800147c:	4629      	mov	r1, r5
 800147e:	f7ff ffa5 	bl	80013cc <sbrk_aligned>
 8001482:	3001      	adds	r0, #1
 8001484:	d02b      	beq.n	80014de <_malloc_r+0xd2>
 8001486:	6823      	ldr	r3, [r4, #0]
 8001488:	442b      	add	r3, r5
 800148a:	6023      	str	r3, [r4, #0]
 800148c:	e00e      	b.n	80014ac <_malloc_r+0xa0>
 800148e:	6822      	ldr	r2, [r4, #0]
 8001490:	1b52      	subs	r2, r2, r5
 8001492:	d41e      	bmi.n	80014d2 <_malloc_r+0xc6>
 8001494:	2a0b      	cmp	r2, #11
 8001496:	d916      	bls.n	80014c6 <_malloc_r+0xba>
 8001498:	1961      	adds	r1, r4, r5
 800149a:	42a3      	cmp	r3, r4
 800149c:	6025      	str	r5, [r4, #0]
 800149e:	bf18      	it	ne
 80014a0:	6059      	strne	r1, [r3, #4]
 80014a2:	6863      	ldr	r3, [r4, #4]
 80014a4:	bf08      	it	eq
 80014a6:	6031      	streq	r1, [r6, #0]
 80014a8:	5162      	str	r2, [r4, r5]
 80014aa:	604b      	str	r3, [r1, #4]
 80014ac:	4638      	mov	r0, r7
 80014ae:	f104 060b 	add.w	r6, r4, #11
 80014b2:	f000 f865 	bl	8001580 <__malloc_unlock>
 80014b6:	f026 0607 	bic.w	r6, r6, #7
 80014ba:	1d23      	adds	r3, r4, #4
 80014bc:	1af2      	subs	r2, r6, r3
 80014be:	d0b6      	beq.n	800142e <_malloc_r+0x22>
 80014c0:	1b9b      	subs	r3, r3, r6
 80014c2:	50a3      	str	r3, [r4, r2]
 80014c4:	e7b3      	b.n	800142e <_malloc_r+0x22>
 80014c6:	6862      	ldr	r2, [r4, #4]
 80014c8:	42a3      	cmp	r3, r4
 80014ca:	bf0c      	ite	eq
 80014cc:	6032      	streq	r2, [r6, #0]
 80014ce:	605a      	strne	r2, [r3, #4]
 80014d0:	e7ec      	b.n	80014ac <_malloc_r+0xa0>
 80014d2:	4623      	mov	r3, r4
 80014d4:	6864      	ldr	r4, [r4, #4]
 80014d6:	e7b2      	b.n	800143e <_malloc_r+0x32>
 80014d8:	4634      	mov	r4, r6
 80014da:	6876      	ldr	r6, [r6, #4]
 80014dc:	e7b9      	b.n	8001452 <_malloc_r+0x46>
 80014de:	230c      	movs	r3, #12
 80014e0:	4638      	mov	r0, r7
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	f000 f84c 	bl	8001580 <__malloc_unlock>
 80014e8:	e7a1      	b.n	800142e <_malloc_r+0x22>
 80014ea:	6025      	str	r5, [r4, #0]
 80014ec:	e7de      	b.n	80014ac <_malloc_r+0xa0>
 80014ee:	bf00      	nop
 80014f0:	200000b0 	.word	0x200000b0

080014f4 <_realloc_r>:
 80014f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014f8:	4680      	mov	r8, r0
 80014fa:	4614      	mov	r4, r2
 80014fc:	460e      	mov	r6, r1
 80014fe:	b921      	cbnz	r1, 800150a <_realloc_r+0x16>
 8001500:	4611      	mov	r1, r2
 8001502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001506:	f7ff bf81 	b.w	800140c <_malloc_r>
 800150a:	b92a      	cbnz	r2, 8001518 <_realloc_r+0x24>
 800150c:	f7ff ff16 	bl	800133c <_free_r>
 8001510:	4625      	mov	r5, r4
 8001512:	4628      	mov	r0, r5
 8001514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001518:	f000 f838 	bl	800158c <_malloc_usable_size_r>
 800151c:	4284      	cmp	r4, r0
 800151e:	4607      	mov	r7, r0
 8001520:	d802      	bhi.n	8001528 <_realloc_r+0x34>
 8001522:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001526:	d812      	bhi.n	800154e <_realloc_r+0x5a>
 8001528:	4621      	mov	r1, r4
 800152a:	4640      	mov	r0, r8
 800152c:	f7ff ff6e 	bl	800140c <_malloc_r>
 8001530:	4605      	mov	r5, r0
 8001532:	2800      	cmp	r0, #0
 8001534:	d0ed      	beq.n	8001512 <_realloc_r+0x1e>
 8001536:	42bc      	cmp	r4, r7
 8001538:	4622      	mov	r2, r4
 800153a:	4631      	mov	r1, r6
 800153c:	bf28      	it	cs
 800153e:	463a      	movcs	r2, r7
 8001540:	f7ff fed4 	bl	80012ec <memcpy>
 8001544:	4631      	mov	r1, r6
 8001546:	4640      	mov	r0, r8
 8001548:	f7ff fef8 	bl	800133c <_free_r>
 800154c:	e7e1      	b.n	8001512 <_realloc_r+0x1e>
 800154e:	4635      	mov	r5, r6
 8001550:	e7df      	b.n	8001512 <_realloc_r+0x1e>
	...

08001554 <_sbrk_r>:
 8001554:	b538      	push	{r3, r4, r5, lr}
 8001556:	2300      	movs	r3, #0
 8001558:	4d05      	ldr	r5, [pc, #20]	; (8001570 <_sbrk_r+0x1c>)
 800155a:	4604      	mov	r4, r0
 800155c:	4608      	mov	r0, r1
 800155e:	602b      	str	r3, [r5, #0]
 8001560:	f7ff fb1a 	bl	8000b98 <_sbrk>
 8001564:	1c43      	adds	r3, r0, #1
 8001566:	d102      	bne.n	800156e <_sbrk_r+0x1a>
 8001568:	682b      	ldr	r3, [r5, #0]
 800156a:	b103      	cbz	r3, 800156e <_sbrk_r+0x1a>
 800156c:	6023      	str	r3, [r4, #0]
 800156e:	bd38      	pop	{r3, r4, r5, pc}
 8001570:	200000b8 	.word	0x200000b8

08001574 <__malloc_lock>:
 8001574:	4801      	ldr	r0, [pc, #4]	; (800157c <__malloc_lock+0x8>)
 8001576:	f000 b811 	b.w	800159c <__retarget_lock_acquire_recursive>
 800157a:	bf00      	nop
 800157c:	200000bc 	.word	0x200000bc

08001580 <__malloc_unlock>:
 8001580:	4801      	ldr	r0, [pc, #4]	; (8001588 <__malloc_unlock+0x8>)
 8001582:	f000 b80c 	b.w	800159e <__retarget_lock_release_recursive>
 8001586:	bf00      	nop
 8001588:	200000bc 	.word	0x200000bc

0800158c <_malloc_usable_size_r>:
 800158c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001590:	1f18      	subs	r0, r3, #4
 8001592:	2b00      	cmp	r3, #0
 8001594:	bfbc      	itt	lt
 8001596:	580b      	ldrlt	r3, [r1, r0]
 8001598:	18c0      	addlt	r0, r0, r3
 800159a:	4770      	bx	lr

0800159c <__retarget_lock_acquire_recursive>:
 800159c:	4770      	bx	lr

0800159e <__retarget_lock_release_recursive>:
 800159e:	4770      	bx	lr

080015a0 <_init>:
 80015a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015a2:	bf00      	nop
 80015a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015a6:	bc08      	pop	{r3}
 80015a8:	469e      	mov	lr, r3
 80015aa:	4770      	bx	lr

080015ac <_fini>:
 80015ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ae:	bf00      	nop
 80015b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015b2:	bc08      	pop	{r3}
 80015b4:	469e      	mov	lr, r3
 80015b6:	4770      	bx	lr
